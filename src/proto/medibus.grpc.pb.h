// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: medibus.proto
#ifndef GRPC_medibus_2eproto__INCLUDED
#define GRPC_medibus_2eproto__INCLUDED

#include "medibus.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace medibus {

// The greeting service definition.
class Medibus final {
 public:
  static constexpr char const* service_full_name() {
    return "medibus.Medibus";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Request current Alarms (Codepage 3)
    virtual ::grpc::Status CurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncCurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncCurAlarmsCP3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncCurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncCurAlarmsCP3Raw(context, request, cq));
    }
    // Request current measured data (codepage 1) 24H
    virtual ::grpc::Status CurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncCurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncCurMeasuredDataCP1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncCurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncCurMeasuredDataCP1Raw(context, request, cq));
    }
    // Request current low Alarm Limits (Codepage 1) 25H
    virtual ::grpc::Status CurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncCurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncCurLowAlarmLimitsCP1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncCurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncCurLowAlarmLimitsCP1Raw(context, request, cq));
    }
    // Request current high Alarm Limits (Codepage 1) 26H
    virtual ::grpc::Status CurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncCurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncCurHighAlarmLimitsCP1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncCurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncCurHighAlarmLimitsCP1Raw(context, request, cq));
    }
    // Request current Alarms (Codepage 1) 27H
    virtual ::grpc::Status CurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncCurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncCurAlarmsCP1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncCurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncCurAlarmsCP1Raw(context, request, cq));
    }
    // Request current device settings 29H
    virtual ::grpc::Status CurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncCurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncCurDeviceSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncCurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncCurDeviceSettingsRaw(context, request, cq));
    }
    // Request test messages 2AH
    virtual ::grpc::Status TextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncTextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncTextMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncTextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncTextMessagesRaw(context, request, cq));
    }
    // Request current measured data (codepage 2) 2BH
    virtual ::grpc::Status CurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncCurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncCurMeasuredDataCP2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncCurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncCurMeasuredDataCP2Raw(context, request, cq));
    }
    // Request current low Alarm Limits (Codepage 2) 2CH
    virtual ::grpc::Status CurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncCurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncCurLowAlarmLimitsCP2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncCurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncCurLowAlarmLimitsCP2Raw(context, request, cq));
    }
    // Request current high Alarm Limits (Codepage 2) 2DH
    virtual ::grpc::Status CurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncCurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncCurHighAlarmLimitsCP2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncCurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncCurHighAlarmLimitsCP2Raw(context, request, cq));
    }
    // Request current Alarms (Codepage 2) 2EH
    virtual ::grpc::Status CurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncCurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncCurAlarmsCP2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncCurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncCurAlarmsCP2Raw(context, request, cq));
    }
    // Request device identification 52H
    virtual ::grpc::Status DeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncDeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncDeviceIdentificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncDeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncDeviceIdentificationRaw(context, request, cq));
    }
    // Request real time 
    virtual ::grpc::Status RealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::medibus::MedibusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> AsyncRealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(AsyncRealTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>> PrepareAsyncRealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>>(PrepareAsyncRealTimeRaw(context, request, cq));
    }
    // Request all data for each medibus loop 
    std::unique_ptr< ::grpc::ClientWriterInterface< ::medibus::LoopRequest>> DataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::medibus::LoopRequest>>(DataInEachLoopRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::medibus::LoopRequest>> AsyncDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::medibus::LoopRequest>>(AsyncDataInEachLoopRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::medibus::LoopRequest>> PrepareAsyncDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::medibus::LoopRequest>>(PrepareAsyncDataInEachLoopRaw(context, response, cq));
    }
    // Request all data for each medibus loop 
    std::unique_ptr< ::grpc::ClientWriterInterface< ::medibus::DelimitedLoopRequest>> DelimitedDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::medibus::DelimitedLoopRequest>>(DelimitedDataInEachLoopRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::medibus::DelimitedLoopRequest>> AsyncDelimitedDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::medibus::DelimitedLoopRequest>>(AsyncDelimitedDataInEachLoopRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::medibus::DelimitedLoopRequest>> PrepareAsyncDelimitedDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::medibus::DelimitedLoopRequest>>(PrepareAsyncDelimitedDataInEachLoopRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Request current Alarms (Codepage 3)
      virtual void CurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request current measured data (codepage 1) 24H
      virtual void CurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request current low Alarm Limits (Codepage 1) 25H
      virtual void CurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request current high Alarm Limits (Codepage 1) 26H
      virtual void CurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request current Alarms (Codepage 1) 27H
      virtual void CurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request current device settings 29H
      virtual void CurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request test messages 2AH
      virtual void TextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request current measured data (codepage 2) 2BH
      virtual void CurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request current low Alarm Limits (Codepage 2) 2CH
      virtual void CurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request current high Alarm Limits (Codepage 2) 2DH
      virtual void CurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request current Alarms (Codepage 2) 2EH
      virtual void CurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request device identification 52H
      virtual void DeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request real time 
      virtual void RealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request all data for each medibus loop 
      virtual void DataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::ClientWriteReactor< ::medibus::LoopRequest>* reactor) = 0;
      // Request all data for each medibus loop 
      virtual void DelimitedDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::ClientWriteReactor< ::medibus::DelimitedLoopRequest>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncCurAlarmsCP3Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncCurAlarmsCP3Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncCurMeasuredDataCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncCurMeasuredDataCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncCurLowAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncCurLowAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncCurHighAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncCurHighAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncCurAlarmsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncCurAlarmsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncCurDeviceSettingsRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncCurDeviceSettingsRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncTextMessagesRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncTextMessagesRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncCurMeasuredDataCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncCurMeasuredDataCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncCurLowAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncCurLowAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncCurHighAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncCurHighAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncCurAlarmsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncCurAlarmsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncDeviceIdentificationRaw(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncDeviceIdentificationRaw(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* AsyncRealTimeRaw(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::medibus::MedibusReply>* PrepareAsyncRealTimeRaw(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::medibus::LoopRequest>* DataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::medibus::LoopRequest>* AsyncDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::medibus::LoopRequest>* PrepareAsyncDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::medibus::DelimitedLoopRequest>* DelimitedDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::medibus::DelimitedLoopRequest>* AsyncDelimitedDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::medibus::DelimitedLoopRequest>* PrepareAsyncDelimitedDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncCurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncCurAlarmsCP3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncCurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncCurAlarmsCP3Raw(context, request, cq));
    }
    ::grpc::Status CurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncCurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncCurMeasuredDataCP1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncCurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncCurMeasuredDataCP1Raw(context, request, cq));
    }
    ::grpc::Status CurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncCurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncCurLowAlarmLimitsCP1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncCurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncCurLowAlarmLimitsCP1Raw(context, request, cq));
    }
    ::grpc::Status CurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncCurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncCurHighAlarmLimitsCP1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncCurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncCurHighAlarmLimitsCP1Raw(context, request, cq));
    }
    ::grpc::Status CurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncCurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncCurAlarmsCP1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncCurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncCurAlarmsCP1Raw(context, request, cq));
    }
    ::grpc::Status CurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncCurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncCurDeviceSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncCurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncCurDeviceSettingsRaw(context, request, cq));
    }
    ::grpc::Status TextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncTextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncTextMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncTextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncTextMessagesRaw(context, request, cq));
    }
    ::grpc::Status CurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncCurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncCurMeasuredDataCP2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncCurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncCurMeasuredDataCP2Raw(context, request, cq));
    }
    ::grpc::Status CurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncCurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncCurLowAlarmLimitsCP2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncCurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncCurLowAlarmLimitsCP2Raw(context, request, cq));
    }
    ::grpc::Status CurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncCurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncCurHighAlarmLimitsCP2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncCurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncCurHighAlarmLimitsCP2Raw(context, request, cq));
    }
    ::grpc::Status CurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncCurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncCurAlarmsCP2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncCurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncCurAlarmsCP2Raw(context, request, cq));
    }
    ::grpc::Status DeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncDeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncDeviceIdentificationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncDeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncDeviceIdentificationRaw(context, request, cq));
    }
    ::grpc::Status RealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::medibus::MedibusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> AsyncRealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(AsyncRealTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>> PrepareAsyncRealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>>(PrepareAsyncRealTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::medibus::LoopRequest>> DataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::medibus::LoopRequest>>(DataInEachLoopRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::medibus::LoopRequest>> AsyncDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::medibus::LoopRequest>>(AsyncDataInEachLoopRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::medibus::LoopRequest>> PrepareAsyncDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::medibus::LoopRequest>>(PrepareAsyncDataInEachLoopRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::medibus::DelimitedLoopRequest>> DelimitedDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::medibus::DelimitedLoopRequest>>(DelimitedDataInEachLoopRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::medibus::DelimitedLoopRequest>> AsyncDelimitedDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::medibus::DelimitedLoopRequest>>(AsyncDelimitedDataInEachLoopRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::medibus::DelimitedLoopRequest>> PrepareAsyncDelimitedDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::medibus::DelimitedLoopRequest>>(PrepareAsyncDelimitedDataInEachLoopRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void CurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void CurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void CurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void CurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void CurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void CurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void TextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void CurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void CurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void CurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void CurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void DeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)>) override;
      void RealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::ClientWriteReactor< ::medibus::LoopRequest>* reactor) override;
      void DelimitedDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::ClientWriteReactor< ::medibus::DelimitedLoopRequest>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncCurAlarmsCP3Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncCurAlarmsCP3Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncCurMeasuredDataCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncCurMeasuredDataCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncCurLowAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncCurLowAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncCurHighAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncCurHighAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncCurAlarmsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncCurAlarmsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncCurDeviceSettingsRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncCurDeviceSettingsRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncTextMessagesRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncTextMessagesRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncCurMeasuredDataCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncCurMeasuredDataCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncCurLowAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncCurLowAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncCurHighAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncCurHighAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncCurAlarmsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncCurAlarmsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncDeviceIdentificationRaw(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncDeviceIdentificationRaw(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* AsyncRealTimeRaw(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* PrepareAsyncRealTimeRaw(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::medibus::LoopRequest>* DataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response) override;
    ::grpc::ClientAsyncWriter< ::medibus::LoopRequest>* AsyncDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::medibus::LoopRequest>* PrepareAsyncDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::medibus::DelimitedLoopRequest>* DelimitedDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response) override;
    ::grpc::ClientAsyncWriter< ::medibus::DelimitedLoopRequest>* AsyncDelimitedDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::medibus::DelimitedLoopRequest>* PrepareAsyncDelimitedDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CurAlarmsCP3_;
    const ::grpc::internal::RpcMethod rpcmethod_CurMeasuredDataCP1_;
    const ::grpc::internal::RpcMethod rpcmethod_CurLowAlarmLimitsCP1_;
    const ::grpc::internal::RpcMethod rpcmethod_CurHighAlarmLimitsCP1_;
    const ::grpc::internal::RpcMethod rpcmethod_CurAlarmsCP1_;
    const ::grpc::internal::RpcMethod rpcmethod_CurDeviceSettings_;
    const ::grpc::internal::RpcMethod rpcmethod_TextMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_CurMeasuredDataCP2_;
    const ::grpc::internal::RpcMethod rpcmethod_CurLowAlarmLimitsCP2_;
    const ::grpc::internal::RpcMethod rpcmethod_CurHighAlarmLimitsCP2_;
    const ::grpc::internal::RpcMethod rpcmethod_CurAlarmsCP2_;
    const ::grpc::internal::RpcMethod rpcmethod_DeviceIdentification_;
    const ::grpc::internal::RpcMethod rpcmethod_RealTime_;
    const ::grpc::internal::RpcMethod rpcmethod_DataInEachLoop_;
    const ::grpc::internal::RpcMethod rpcmethod_DelimitedDataInEachLoop_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Request current Alarms (Codepage 3)
    virtual ::grpc::Status CurAlarmsCP3(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response);
    // Request current measured data (codepage 1) 24H
    virtual ::grpc::Status CurMeasuredDataCP1(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response);
    // Request current low Alarm Limits (Codepage 1) 25H
    virtual ::grpc::Status CurLowAlarmLimitsCP1(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response);
    // Request current high Alarm Limits (Codepage 1) 26H
    virtual ::grpc::Status CurHighAlarmLimitsCP1(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response);
    // Request current Alarms (Codepage 1) 27H
    virtual ::grpc::Status CurAlarmsCP1(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response);
    // Request current device settings 29H
    virtual ::grpc::Status CurDeviceSettings(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response);
    // Request test messages 2AH
    virtual ::grpc::Status TextMessages(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response);
    // Request current measured data (codepage 2) 2BH
    virtual ::grpc::Status CurMeasuredDataCP2(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response);
    // Request current low Alarm Limits (Codepage 2) 2CH
    virtual ::grpc::Status CurLowAlarmLimitsCP2(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response);
    // Request current high Alarm Limits (Codepage 2) 2DH
    virtual ::grpc::Status CurHighAlarmLimitsCP2(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response);
    // Request current Alarms (Codepage 2) 2EH
    virtual ::grpc::Status CurAlarmsCP2(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response);
    // Request device identification 52H
    virtual ::grpc::Status DeviceIdentification(::grpc::ServerContext* context, const ::medibus::DeviceIdentificationRequest* request, ::medibus::MedibusReply* response);
    // Request real time 
    virtual ::grpc::Status RealTime(::grpc::ServerContext* context, const ::medibus::MedibusRealTimeRequest* request, ::medibus::MedibusReply* response);
    // Request all data for each medibus loop 
    virtual ::grpc::Status DataInEachLoop(::grpc::ServerContext* context, ::grpc::ServerReader< ::medibus::LoopRequest>* reader, ::medibus::MedibusReply* response);
    // Request all data for each medibus loop 
    virtual ::grpc::Status DelimitedDataInEachLoop(::grpc::ServerContext* context, ::grpc::ServerReader< ::medibus::DelimitedLoopRequest>* reader, ::medibus::MedibusReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CurAlarmsCP3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurAlarmsCP3() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CurAlarmsCP3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP3(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurAlarmsCP3(::grpc::ServerContext* context, ::medibus::MedibusRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurMeasuredDataCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurMeasuredDataCP1() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CurMeasuredDataCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurMeasuredDataCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurMeasuredDataCP1(::grpc::ServerContext* context, ::medibus::MedibusRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurLowAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurLowAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CurLowAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurLowAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurLowAlarmLimitsCP1(::grpc::ServerContext* context, ::medibus::MedibusRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurHighAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurHighAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CurHighAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurHighAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurHighAlarmLimitsCP1(::grpc::ServerContext* context, ::medibus::MedibusRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurAlarmsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurAlarmsCP1() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CurAlarmsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurAlarmsCP1(::grpc::ServerContext* context, ::medibus::MedibusRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurDeviceSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurDeviceSettings() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CurDeviceSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurDeviceSettings(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurDeviceSettings(::grpc::ServerContext* context, ::medibus::MedibusRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TextMessages() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_TextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextMessages(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTextMessages(::grpc::ServerContext* context, ::medibus::MedibusRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurMeasuredDataCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurMeasuredDataCP2() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CurMeasuredDataCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurMeasuredDataCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurMeasuredDataCP2(::grpc::ServerContext* context, ::medibus::MedibusRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurLowAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurLowAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CurLowAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurLowAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurLowAlarmLimitsCP2(::grpc::ServerContext* context, ::medibus::MedibusRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurHighAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurHighAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CurHighAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurHighAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurHighAlarmLimitsCP2(::grpc::ServerContext* context, ::medibus::MedibusRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CurAlarmsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurAlarmsCP2() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CurAlarmsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurAlarmsCP2(::grpc::ServerContext* context, ::medibus::MedibusRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeviceIdentification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeviceIdentification() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_DeviceIdentification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeviceIdentification(::grpc::ServerContext* /*context*/, const ::medibus::DeviceIdentificationRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeviceIdentification(::grpc::ServerContext* context, ::medibus::DeviceIdentificationRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RealTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RealTime() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_RealTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealTime(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRealTimeRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealTime(::grpc::ServerContext* context, ::medibus::MedibusRealTimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::medibus::MedibusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataInEachLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataInEachLoop() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_DataInEachLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataInEachLoop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::medibus::LoopRequest>* /*reader*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataInEachLoop(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::medibus::MedibusReply, ::medibus::LoopRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(13, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelimitedDataInEachLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DelimitedDataInEachLoop() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_DelimitedDataInEachLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelimitedDataInEachLoop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::medibus::DelimitedLoopRequest>* /*reader*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelimitedDataInEachLoop(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::medibus::MedibusReply, ::medibus::DelimitedLoopRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(14, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CurAlarmsCP3<WithAsyncMethod_CurMeasuredDataCP1<WithAsyncMethod_CurLowAlarmLimitsCP1<WithAsyncMethod_CurHighAlarmLimitsCP1<WithAsyncMethod_CurAlarmsCP1<WithAsyncMethod_CurDeviceSettings<WithAsyncMethod_TextMessages<WithAsyncMethod_CurMeasuredDataCP2<WithAsyncMethod_CurLowAlarmLimitsCP2<WithAsyncMethod_CurHighAlarmLimitsCP2<WithAsyncMethod_CurAlarmsCP2<WithAsyncMethod_DeviceIdentification<WithAsyncMethod_RealTime<WithAsyncMethod_DataInEachLoop<WithAsyncMethod_DelimitedDataInEachLoop<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CurAlarmsCP3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurAlarmsCP3() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) { return this->CurAlarmsCP3(context, request, response); }));}
    void SetMessageAllocatorFor_CurAlarmsCP3(
        ::grpc::MessageAllocator< ::medibus::MedibusRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurAlarmsCP3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP3(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurAlarmsCP3(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurMeasuredDataCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurMeasuredDataCP1() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) { return this->CurMeasuredDataCP1(context, request, response); }));}
    void SetMessageAllocatorFor_CurMeasuredDataCP1(
        ::grpc::MessageAllocator< ::medibus::MedibusRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurMeasuredDataCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurMeasuredDataCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurMeasuredDataCP1(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurLowAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurLowAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) { return this->CurLowAlarmLimitsCP1(context, request, response); }));}
    void SetMessageAllocatorFor_CurLowAlarmLimitsCP1(
        ::grpc::MessageAllocator< ::medibus::MedibusRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurLowAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurLowAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurLowAlarmLimitsCP1(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurHighAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurHighAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) { return this->CurHighAlarmLimitsCP1(context, request, response); }));}
    void SetMessageAllocatorFor_CurHighAlarmLimitsCP1(
        ::grpc::MessageAllocator< ::medibus::MedibusRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurHighAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurHighAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurHighAlarmLimitsCP1(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurAlarmsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurAlarmsCP1() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) { return this->CurAlarmsCP1(context, request, response); }));}
    void SetMessageAllocatorFor_CurAlarmsCP1(
        ::grpc::MessageAllocator< ::medibus::MedibusRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurAlarmsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurAlarmsCP1(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurDeviceSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurDeviceSettings() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) { return this->CurDeviceSettings(context, request, response); }));}
    void SetMessageAllocatorFor_CurDeviceSettings(
        ::grpc::MessageAllocator< ::medibus::MedibusRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurDeviceSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurDeviceSettings(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurDeviceSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TextMessages() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) { return this->TextMessages(context, request, response); }));}
    void SetMessageAllocatorFor_TextMessages(
        ::grpc::MessageAllocator< ::medibus::MedibusRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextMessages(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TextMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurMeasuredDataCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurMeasuredDataCP2() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) { return this->CurMeasuredDataCP2(context, request, response); }));}
    void SetMessageAllocatorFor_CurMeasuredDataCP2(
        ::grpc::MessageAllocator< ::medibus::MedibusRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurMeasuredDataCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurMeasuredDataCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurMeasuredDataCP2(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurLowAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurLowAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) { return this->CurLowAlarmLimitsCP2(context, request, response); }));}
    void SetMessageAllocatorFor_CurLowAlarmLimitsCP2(
        ::grpc::MessageAllocator< ::medibus::MedibusRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurLowAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurLowAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurLowAlarmLimitsCP2(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurHighAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurHighAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) { return this->CurHighAlarmLimitsCP2(context, request, response); }));}
    void SetMessageAllocatorFor_CurHighAlarmLimitsCP2(
        ::grpc::MessageAllocator< ::medibus::MedibusRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurHighAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurHighAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurHighAlarmLimitsCP2(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CurAlarmsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurAlarmsCP2() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) { return this->CurAlarmsCP2(context, request, response); }));}
    void SetMessageAllocatorFor_CurAlarmsCP2(
        ::grpc::MessageAllocator< ::medibus::MedibusRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurAlarmsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurAlarmsCP2(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeviceIdentification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeviceIdentification() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::DeviceIdentificationRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::DeviceIdentificationRequest* request, ::medibus::MedibusReply* response) { return this->DeviceIdentification(context, request, response); }));}
    void SetMessageAllocatorFor_DeviceIdentification(
        ::grpc::MessageAllocator< ::medibus::DeviceIdentificationRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::DeviceIdentificationRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeviceIdentification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeviceIdentification(::grpc::ServerContext* /*context*/, const ::medibus::DeviceIdentificationRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeviceIdentification(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::DeviceIdentificationRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RealTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RealTime() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRealTimeRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::medibus::MedibusRealTimeRequest* request, ::medibus::MedibusReply* response) { return this->RealTime(context, request, response); }));}
    void SetMessageAllocatorFor_RealTime(
        ::grpc::MessageAllocator< ::medibus::MedibusRealTimeRequest, ::medibus::MedibusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::medibus::MedibusRealTimeRequest, ::medibus::MedibusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RealTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealTime(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRealTimeRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RealTime(
      ::grpc::CallbackServerContext* /*context*/, const ::medibus::MedibusRealTimeRequest* /*request*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataInEachLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataInEachLoop() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackClientStreamingHandler< ::medibus::LoopRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, ::medibus::MedibusReply* response) { return this->DataInEachLoop(context, response); }));
    }
    ~WithCallbackMethod_DataInEachLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataInEachLoop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::medibus::LoopRequest>* /*reader*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::medibus::LoopRequest>* DataInEachLoop(
      ::grpc::CallbackServerContext* /*context*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DelimitedDataInEachLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DelimitedDataInEachLoop() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackClientStreamingHandler< ::medibus::DelimitedLoopRequest, ::medibus::MedibusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, ::medibus::MedibusReply* response) { return this->DelimitedDataInEachLoop(context, response); }));
    }
    ~WithCallbackMethod_DelimitedDataInEachLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelimitedDataInEachLoop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::medibus::DelimitedLoopRequest>* /*reader*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::medibus::DelimitedLoopRequest>* DelimitedDataInEachLoop(
      ::grpc::CallbackServerContext* /*context*/, ::medibus::MedibusReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CurAlarmsCP3<WithCallbackMethod_CurMeasuredDataCP1<WithCallbackMethod_CurLowAlarmLimitsCP1<WithCallbackMethod_CurHighAlarmLimitsCP1<WithCallbackMethod_CurAlarmsCP1<WithCallbackMethod_CurDeviceSettings<WithCallbackMethod_TextMessages<WithCallbackMethod_CurMeasuredDataCP2<WithCallbackMethod_CurLowAlarmLimitsCP2<WithCallbackMethod_CurHighAlarmLimitsCP2<WithCallbackMethod_CurAlarmsCP2<WithCallbackMethod_DeviceIdentification<WithCallbackMethod_RealTime<WithCallbackMethod_DataInEachLoop<WithCallbackMethod_DelimitedDataInEachLoop<Service > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CurAlarmsCP3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurAlarmsCP3() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CurAlarmsCP3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP3(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurMeasuredDataCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurMeasuredDataCP1() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CurMeasuredDataCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurMeasuredDataCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurLowAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurLowAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CurLowAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurLowAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurHighAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurHighAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CurHighAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurHighAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurAlarmsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurAlarmsCP1() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CurAlarmsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurDeviceSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurDeviceSettings() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CurDeviceSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurDeviceSettings(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TextMessages() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_TextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextMessages(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurMeasuredDataCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurMeasuredDataCP2() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CurMeasuredDataCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurMeasuredDataCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurLowAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurLowAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CurLowAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurLowAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurHighAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurHighAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CurHighAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurHighAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CurAlarmsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurAlarmsCP2() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CurAlarmsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeviceIdentification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeviceIdentification() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_DeviceIdentification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeviceIdentification(::grpc::ServerContext* /*context*/, const ::medibus::DeviceIdentificationRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RealTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RealTime() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_RealTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealTime(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRealTimeRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataInEachLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataInEachLoop() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_DataInEachLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataInEachLoop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::medibus::LoopRequest>* /*reader*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelimitedDataInEachLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DelimitedDataInEachLoop() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_DelimitedDataInEachLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelimitedDataInEachLoop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::medibus::DelimitedLoopRequest>* /*reader*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurAlarmsCP3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurAlarmsCP3() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CurAlarmsCP3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP3(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurAlarmsCP3(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurMeasuredDataCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurMeasuredDataCP1() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CurMeasuredDataCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurMeasuredDataCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurMeasuredDataCP1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurLowAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurLowAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CurLowAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurLowAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurLowAlarmLimitsCP1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurHighAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurHighAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CurHighAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurHighAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurHighAlarmLimitsCP1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurAlarmsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurAlarmsCP1() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CurAlarmsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurAlarmsCP1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurDeviceSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurDeviceSettings() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CurDeviceSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurDeviceSettings(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurDeviceSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TextMessages() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_TextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextMessages(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTextMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurMeasuredDataCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurMeasuredDataCP2() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CurMeasuredDataCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurMeasuredDataCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurMeasuredDataCP2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurLowAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurLowAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CurLowAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurLowAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurLowAlarmLimitsCP2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurHighAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurHighAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CurHighAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurHighAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurHighAlarmLimitsCP2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurAlarmsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurAlarmsCP2() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_CurAlarmsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurAlarmsCP2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeviceIdentification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeviceIdentification() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_DeviceIdentification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeviceIdentification(::grpc::ServerContext* /*context*/, const ::medibus::DeviceIdentificationRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeviceIdentification(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RealTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RealTime() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_RealTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealTime(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRealTimeRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRealTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataInEachLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataInEachLoop() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_DataInEachLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataInEachLoop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::medibus::LoopRequest>* /*reader*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataInEachLoop(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(13, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelimitedDataInEachLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DelimitedDataInEachLoop() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_DelimitedDataInEachLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelimitedDataInEachLoop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::medibus::DelimitedLoopRequest>* /*reader*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelimitedDataInEachLoop(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(14, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurAlarmsCP3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurAlarmsCP3() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurAlarmsCP3(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurAlarmsCP3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP3(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurAlarmsCP3(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurMeasuredDataCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurMeasuredDataCP1() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurMeasuredDataCP1(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurMeasuredDataCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurMeasuredDataCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurMeasuredDataCP1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurLowAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurLowAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurLowAlarmLimitsCP1(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurLowAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurLowAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurLowAlarmLimitsCP1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurHighAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurHighAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurHighAlarmLimitsCP1(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurHighAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurHighAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurHighAlarmLimitsCP1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurAlarmsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurAlarmsCP1() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurAlarmsCP1(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurAlarmsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurAlarmsCP1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurDeviceSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurDeviceSettings() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurDeviceSettings(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurDeviceSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurDeviceSettings(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurDeviceSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TextMessages() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TextMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_TextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TextMessages(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TextMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurMeasuredDataCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurMeasuredDataCP2() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurMeasuredDataCP2(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurMeasuredDataCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurMeasuredDataCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurMeasuredDataCP2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurLowAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurLowAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurLowAlarmLimitsCP2(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurLowAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurLowAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurLowAlarmLimitsCP2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurHighAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurHighAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurHighAlarmLimitsCP2(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurHighAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurHighAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurHighAlarmLimitsCP2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurAlarmsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurAlarmsCP2() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurAlarmsCP2(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurAlarmsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurAlarmsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurAlarmsCP2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeviceIdentification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeviceIdentification() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeviceIdentification(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeviceIdentification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeviceIdentification(::grpc::ServerContext* /*context*/, const ::medibus::DeviceIdentificationRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeviceIdentification(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RealTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RealTime() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RealTime(context, request, response); }));
    }
    ~WithRawCallbackMethod_RealTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RealTime(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRealTimeRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RealTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataInEachLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataInEachLoop() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->DataInEachLoop(context, response); }));
    }
    ~WithRawCallbackMethod_DataInEachLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataInEachLoop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::medibus::LoopRequest>* /*reader*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* DataInEachLoop(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DelimitedDataInEachLoop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DelimitedDataInEachLoop() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->DelimitedDataInEachLoop(context, response); }));
    }
    ~WithRawCallbackMethod_DelimitedDataInEachLoop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelimitedDataInEachLoop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::medibus::DelimitedLoopRequest>* /*reader*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* DelimitedDataInEachLoop(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurAlarmsCP3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurAlarmsCP3() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedCurAlarmsCP3(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurAlarmsCP3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurAlarmsCP3(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurAlarmsCP3(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurMeasuredDataCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurMeasuredDataCP1() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedCurMeasuredDataCP1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurMeasuredDataCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurMeasuredDataCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurMeasuredDataCP1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurLowAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurLowAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedCurLowAlarmLimitsCP1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurLowAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurLowAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurLowAlarmLimitsCP1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurHighAlarmLimitsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurHighAlarmLimitsCP1() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedCurHighAlarmLimitsCP1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurHighAlarmLimitsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurHighAlarmLimitsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurHighAlarmLimitsCP1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurAlarmsCP1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurAlarmsCP1() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedCurAlarmsCP1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurAlarmsCP1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurAlarmsCP1(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurAlarmsCP1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurDeviceSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurDeviceSettings() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedCurDeviceSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurDeviceSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurDeviceSettings(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurDeviceSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TextMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TextMessages() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedTextMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TextMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TextMessages(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTextMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurMeasuredDataCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurMeasuredDataCP2() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedCurMeasuredDataCP2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurMeasuredDataCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurMeasuredDataCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurMeasuredDataCP2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurLowAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurLowAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedCurLowAlarmLimitsCP2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurLowAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurLowAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurLowAlarmLimitsCP2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurHighAlarmLimitsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurHighAlarmLimitsCP2() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedCurHighAlarmLimitsCP2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurHighAlarmLimitsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurHighAlarmLimitsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurHighAlarmLimitsCP2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurAlarmsCP2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurAlarmsCP2() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedCurAlarmsCP2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurAlarmsCP2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurAlarmsCP2(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurAlarmsCP2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeviceIdentification : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeviceIdentification() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::DeviceIdentificationRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::DeviceIdentificationRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedDeviceIdentification(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeviceIdentification() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeviceIdentification(::grpc::ServerContext* /*context*/, const ::medibus::DeviceIdentificationRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeviceIdentification(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::DeviceIdentificationRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RealTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RealTime() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::medibus::MedibusRealTimeRequest, ::medibus::MedibusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::medibus::MedibusRealTimeRequest, ::medibus::MedibusReply>* streamer) {
                       return this->StreamedRealTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RealTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RealTime(::grpc::ServerContext* /*context*/, const ::medibus::MedibusRealTimeRequest* /*request*/, ::medibus::MedibusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRealTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::medibus::MedibusRealTimeRequest,::medibus::MedibusReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CurAlarmsCP3<WithStreamedUnaryMethod_CurMeasuredDataCP1<WithStreamedUnaryMethod_CurLowAlarmLimitsCP1<WithStreamedUnaryMethod_CurHighAlarmLimitsCP1<WithStreamedUnaryMethod_CurAlarmsCP1<WithStreamedUnaryMethod_CurDeviceSettings<WithStreamedUnaryMethod_TextMessages<WithStreamedUnaryMethod_CurMeasuredDataCP2<WithStreamedUnaryMethod_CurLowAlarmLimitsCP2<WithStreamedUnaryMethod_CurHighAlarmLimitsCP2<WithStreamedUnaryMethod_CurAlarmsCP2<WithStreamedUnaryMethod_DeviceIdentification<WithStreamedUnaryMethod_RealTime<Service > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CurAlarmsCP3<WithStreamedUnaryMethod_CurMeasuredDataCP1<WithStreamedUnaryMethod_CurLowAlarmLimitsCP1<WithStreamedUnaryMethod_CurHighAlarmLimitsCP1<WithStreamedUnaryMethod_CurAlarmsCP1<WithStreamedUnaryMethod_CurDeviceSettings<WithStreamedUnaryMethod_TextMessages<WithStreamedUnaryMethod_CurMeasuredDataCP2<WithStreamedUnaryMethod_CurLowAlarmLimitsCP2<WithStreamedUnaryMethod_CurHighAlarmLimitsCP2<WithStreamedUnaryMethod_CurAlarmsCP2<WithStreamedUnaryMethod_DeviceIdentification<WithStreamedUnaryMethod_RealTime<Service > > > > > > > > > > > > > StreamedService;
};
// The following are all request from client to server with the parameter filled with the device responds

}  // namespace medibus


#endif  // GRPC_medibus_2eproto__INCLUDED
