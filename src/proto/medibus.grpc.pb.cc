// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: medibus.proto

#include "medibus.pb.h"
#include "medibus.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace medibus {

static const char* Medibus_method_names[] = {
  "/medibus.Medibus/CurMeasuredDataCP1",
  "/medibus.Medibus/CurLowAlarmLimitsCP1",
  "/medibus.Medibus/CurHighAlarmLimitsCP1",
  "/medibus.Medibus/CurAlarmsCP1",
  "/medibus.Medibus/CurDeviceSettings",
  "/medibus.Medibus/TextMessages",
  "/medibus.Medibus/CurMeasuredDataCP2",
  "/medibus.Medibus/CurLowAlarmLimitsCP2",
  "/medibus.Medibus/CurHighAlarmLimitsCP2",
  "/medibus.Medibus/CurAlarmsCP2",
  "/medibus.Medibus/DeviceIdentification",
  "/medibus.Medibus/CurAlarmsCP3",
  "/medibus.Medibus/RealTime",
  "/medibus.Medibus/DataInEachLoop",
  "/medibus.Medibus/DelimitedDataInEachLoop",
};

std::unique_ptr< Medibus::Stub> Medibus::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Medibus::Stub> stub(new Medibus::Stub(channel, options));
  return stub;
}

Medibus::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CurMeasuredDataCP1_(Medibus_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurLowAlarmLimitsCP1_(Medibus_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurHighAlarmLimitsCP1_(Medibus_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurAlarmsCP1_(Medibus_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurDeviceSettings_(Medibus_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TextMessages_(Medibus_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurMeasuredDataCP2_(Medibus_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurLowAlarmLimitsCP2_(Medibus_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurHighAlarmLimitsCP2_(Medibus_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurAlarmsCP2_(Medibus_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeviceIdentification_(Medibus_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CurAlarmsCP3_(Medibus_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RealTime_(Medibus_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataInEachLoop_(Medibus_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DelimitedDataInEachLoop_(Medibus_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status Medibus::Stub::CurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurMeasuredDataCP1_, context, request, response);
}

void Medibus::Stub::async::CurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurMeasuredDataCP1_, context, request, response, std::move(f));
}

void Medibus::Stub::async::CurMeasuredDataCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurMeasuredDataCP1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncCurMeasuredDataCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurMeasuredDataCP1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncCurMeasuredDataCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurMeasuredDataCP1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::CurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurLowAlarmLimitsCP1_, context, request, response);
}

void Medibus::Stub::async::CurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurLowAlarmLimitsCP1_, context, request, response, std::move(f));
}

void Medibus::Stub::async::CurLowAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurLowAlarmLimitsCP1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncCurLowAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurLowAlarmLimitsCP1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncCurLowAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurLowAlarmLimitsCP1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::CurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurHighAlarmLimitsCP1_, context, request, response);
}

void Medibus::Stub::async::CurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurHighAlarmLimitsCP1_, context, request, response, std::move(f));
}

void Medibus::Stub::async::CurHighAlarmLimitsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurHighAlarmLimitsCP1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncCurHighAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurHighAlarmLimitsCP1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncCurHighAlarmLimitsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurHighAlarmLimitsCP1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::CurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurAlarmsCP1_, context, request, response);
}

void Medibus::Stub::async::CurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurAlarmsCP1_, context, request, response, std::move(f));
}

void Medibus::Stub::async::CurAlarmsCP1(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurAlarmsCP1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncCurAlarmsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurAlarmsCP1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncCurAlarmsCP1Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurAlarmsCP1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::CurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurDeviceSettings_, context, request, response);
}

void Medibus::Stub::async::CurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurDeviceSettings_, context, request, response, std::move(f));
}

void Medibus::Stub::async::CurDeviceSettings(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurDeviceSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncCurDeviceSettingsRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurDeviceSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncCurDeviceSettingsRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurDeviceSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::TextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TextMessages_, context, request, response);
}

void Medibus::Stub::async::TextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TextMessages_, context, request, response, std::move(f));
}

void Medibus::Stub::async::TextMessages(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TextMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncTextMessagesRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TextMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncTextMessagesRaw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTextMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::CurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurMeasuredDataCP2_, context, request, response);
}

void Medibus::Stub::async::CurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurMeasuredDataCP2_, context, request, response, std::move(f));
}

void Medibus::Stub::async::CurMeasuredDataCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurMeasuredDataCP2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncCurMeasuredDataCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurMeasuredDataCP2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncCurMeasuredDataCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurMeasuredDataCP2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::CurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurLowAlarmLimitsCP2_, context, request, response);
}

void Medibus::Stub::async::CurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurLowAlarmLimitsCP2_, context, request, response, std::move(f));
}

void Medibus::Stub::async::CurLowAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurLowAlarmLimitsCP2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncCurLowAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurLowAlarmLimitsCP2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncCurLowAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurLowAlarmLimitsCP2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::CurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurHighAlarmLimitsCP2_, context, request, response);
}

void Medibus::Stub::async::CurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurHighAlarmLimitsCP2_, context, request, response, std::move(f));
}

void Medibus::Stub::async::CurHighAlarmLimitsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurHighAlarmLimitsCP2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncCurHighAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurHighAlarmLimitsCP2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncCurHighAlarmLimitsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurHighAlarmLimitsCP2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::CurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurAlarmsCP2_, context, request, response);
}

void Medibus::Stub::async::CurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurAlarmsCP2_, context, request, response, std::move(f));
}

void Medibus::Stub::async::CurAlarmsCP2(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurAlarmsCP2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncCurAlarmsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurAlarmsCP2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncCurAlarmsCP2Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurAlarmsCP2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::DeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::DeviceIdentificationRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeviceIdentification_, context, request, response);
}

void Medibus::Stub::async::DeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::DeviceIdentificationRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeviceIdentification_, context, request, response, std::move(f));
}

void Medibus::Stub::async::DeviceIdentification(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeviceIdentification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncDeviceIdentificationRaw(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::DeviceIdentificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeviceIdentification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncDeviceIdentificationRaw(::grpc::ClientContext* context, const ::medibus::DeviceIdentificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeviceIdentificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::CurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CurAlarmsCP3_, context, request, response);
}

void Medibus::Stub::async::CurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurAlarmsCP3_, context, request, response, std::move(f));
}

void Medibus::Stub::async::CurAlarmsCP3(::grpc::ClientContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CurAlarmsCP3_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncCurAlarmsCP3Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CurAlarmsCP3_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncCurAlarmsCP3Raw(::grpc::ClientContext* context, const ::medibus::MedibusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCurAlarmsCP3Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Medibus::Stub::RealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::medibus::MedibusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medibus::MedibusRealTimeRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RealTime_, context, request, response);
}

void Medibus::Stub::async::RealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest* request, ::medibus::MedibusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medibus::MedibusRealTimeRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RealTime_, context, request, response, std::move(f));
}

void Medibus::Stub::async::RealTime(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest* request, ::medibus::MedibusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RealTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::PrepareAsyncRealTimeRaw(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medibus::MedibusReply, ::medibus::MedibusRealTimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RealTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medibus::MedibusReply>* Medibus::Stub::AsyncRealTimeRaw(::grpc::ClientContext* context, const ::medibus::MedibusRealTimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRealTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::medibus::LoopRequest>* Medibus::Stub::DataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response) {
  return ::grpc::internal::ClientWriterFactory< ::medibus::LoopRequest>::Create(channel_.get(), rpcmethod_DataInEachLoop_, context, response);
}

void Medibus::Stub::async::DataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::ClientWriteReactor< ::medibus::LoopRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::medibus::LoopRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_DataInEachLoop_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::medibus::LoopRequest>* Medibus::Stub::AsyncDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::medibus::LoopRequest>::Create(channel_.get(), cq, rpcmethod_DataInEachLoop_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::medibus::LoopRequest>* Medibus::Stub::PrepareAsyncDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::medibus::LoopRequest>::Create(channel_.get(), cq, rpcmethod_DataInEachLoop_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::medibus::DelimitedLoopRequest>* Medibus::Stub::DelimitedDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response) {
  return ::grpc::internal::ClientWriterFactory< ::medibus::DelimitedLoopRequest>::Create(channel_.get(), rpcmethod_DelimitedDataInEachLoop_, context, response);
}

void Medibus::Stub::async::DelimitedDataInEachLoop(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::ClientWriteReactor< ::medibus::DelimitedLoopRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::medibus::DelimitedLoopRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_DelimitedDataInEachLoop_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::medibus::DelimitedLoopRequest>* Medibus::Stub::AsyncDelimitedDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::medibus::DelimitedLoopRequest>::Create(channel_.get(), cq, rpcmethod_DelimitedDataInEachLoop_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::medibus::DelimitedLoopRequest>* Medibus::Stub::PrepareAsyncDelimitedDataInEachLoopRaw(::grpc::ClientContext* context, ::medibus::MedibusReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::medibus::DelimitedLoopRequest>::Create(channel_.get(), cq, rpcmethod_DelimitedDataInEachLoop_, context, response, false, nullptr);
}

Medibus::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->CurMeasuredDataCP1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->CurLowAlarmLimitsCP1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->CurHighAlarmLimitsCP1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->CurAlarmsCP1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->CurDeviceSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->TextMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->CurMeasuredDataCP2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->CurLowAlarmLimitsCP2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->CurHighAlarmLimitsCP2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->CurAlarmsCP2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::DeviceIdentificationRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::DeviceIdentificationRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->DeviceIdentification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->CurAlarmsCP3(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medibus::Service, ::medibus::MedibusRealTimeRequest, ::medibus::MedibusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medibus::MedibusRealTimeRequest* req,
             ::medibus::MedibusReply* resp) {
               return service->RealTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[13],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Medibus::Service, ::medibus::LoopRequest, ::medibus::MedibusReply>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::medibus::LoopRequest>* reader,
             ::medibus::MedibusReply* resp) {
               return service->DataInEachLoop(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medibus_method_names[14],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Medibus::Service, ::medibus::DelimitedLoopRequest, ::medibus::MedibusReply>(
          [](Medibus::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::medibus::DelimitedLoopRequest>* reader,
             ::medibus::MedibusReply* resp) {
               return service->DelimitedDataInEachLoop(ctx, reader, resp);
             }, this)));
}

Medibus::Service::~Service() {
}

::grpc::Status Medibus::Service::CurMeasuredDataCP1(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::CurLowAlarmLimitsCP1(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::CurHighAlarmLimitsCP1(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::CurAlarmsCP1(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::CurDeviceSettings(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::TextMessages(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::CurMeasuredDataCP2(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::CurLowAlarmLimitsCP2(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::CurHighAlarmLimitsCP2(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::CurAlarmsCP2(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::DeviceIdentification(::grpc::ServerContext* context, const ::medibus::DeviceIdentificationRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::CurAlarmsCP3(::grpc::ServerContext* context, const ::medibus::MedibusRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::RealTime(::grpc::ServerContext* context, const ::medibus::MedibusRealTimeRequest* request, ::medibus::MedibusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::DataInEachLoop(::grpc::ServerContext* context, ::grpc::ServerReader< ::medibus::LoopRequest>* reader, ::medibus::MedibusReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medibus::Service::DelimitedDataInEachLoop(::grpc::ServerContext* context, ::grpc::ServerReader< ::medibus::DelimitedLoopRequest>* reader, ::medibus::MedibusReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace medibus

