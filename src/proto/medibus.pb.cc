// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: medibus.proto

#include "medibus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace medibus {
PROTOBUF_CONSTEXPR DeviceIdentificationRequest_DeviceIdentificationRespond::DeviceIdentificationRequest_DeviceIdentificationRespond(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.facility_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.poc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bed_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.building_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.floor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct DeviceIdentificationRequest_DeviceIdentificationRespondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceIdentificationRequest_DeviceIdentificationRespondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceIdentificationRequest_DeviceIdentificationRespondDefaultTypeInternal() {}
  union {
    DeviceIdentificationRequest_DeviceIdentificationRespond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceIdentificationRequest_DeviceIdentificationRespondDefaultTypeInternal _DeviceIdentificationRequest_DeviceIdentificationRespond_default_instance_;
PROTOBUF_CONSTEXPR DeviceIdentificationRequest::DeviceIdentificationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instance_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceresponds_)*/nullptr
  , /*decltype(_impl_.sequence_id_)*/uint64_t{0u}} {}
struct DeviceIdentificationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceIdentificationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceIdentificationRequestDefaultTypeInternal() {}
  union {
    DeviceIdentificationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceIdentificationRequestDefaultTypeInternal _DeviceIdentificationRequest_default_instance_;
PROTOBUF_CONSTEXPR MedibusRequest_DeviceRespond::MedibusRequest_DeviceRespond(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MedibusRequest_DeviceRespondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MedibusRequest_DeviceRespondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MedibusRequest_DeviceRespondDefaultTypeInternal() {}
  union {
    MedibusRequest_DeviceRespond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MedibusRequest_DeviceRespondDefaultTypeInternal _MedibusRequest_DeviceRespond_default_instance_;
PROTOBUF_CONSTEXPR MedibusRequest::MedibusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceresponds_)*/{}
  , /*decltype(_impl_.instance_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequence_id_)*/uint64_t{0u}} {}
struct MedibusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MedibusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MedibusRequestDefaultTypeInternal() {}
  union {
    MedibusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MedibusRequestDefaultTypeInternal _MedibusRequest_default_instance_;
PROTOBUF_CONSTEXPR MedibusReply::MedibusReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instance_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MedibusReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MedibusReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MedibusReplyDefaultTypeInternal() {}
  union {
    MedibusReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MedibusReplyDefaultTypeInternal _MedibusReply_default_instance_;
PROTOBUF_CONSTEXPR LoopRequest::LoopRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instance_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cur_measured_data_cp1_)*/nullptr
  , /*decltype(_impl_.cur_low_alarm_limits_cp1_)*/nullptr
  , /*decltype(_impl_.cur_high_alarm_limits_cp1_)*/nullptr
  , /*decltype(_impl_.cur_alarms_cp1_)*/nullptr
  , /*decltype(_impl_.cur_device_settings_)*/nullptr
  , /*decltype(_impl_.text_messages_)*/nullptr
  , /*decltype(_impl_.cur_measured_data_cp2_)*/nullptr
  , /*decltype(_impl_.cur_low_alarm_limits_cp2_)*/nullptr
  , /*decltype(_impl_.cur_high_alarm_limits_cp2_)*/nullptr
  , /*decltype(_impl_.cur_alarms_cp2_)*/nullptr
  , /*decltype(_impl_.device_identification_)*/nullptr
  , /*decltype(_impl_.cur_alarms_cp3_)*/nullptr
  , /*decltype(_impl_.cur_real_time_vol_)*/nullptr
  , /*decltype(_impl_.cur_real_time_flow_)*/nullptr
  , /*decltype(_impl_.cur_real_time_paw_)*/nullptr
  , /*decltype(_impl_.cur_real_time_co2_)*/nullptr
  , /*decltype(_impl_.cur_real_time_ptrach_)*/nullptr
  , /*decltype(_impl_.sequence_id_)*/uint64_t{0u}} {}
struct LoopRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoopRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoopRequestDefaultTypeInternal() {}
  union {
    LoopRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoopRequestDefaultTypeInternal _LoopRequest_default_instance_;
PROTOBUF_CONSTEXPR DelimitedLoopRequest::DelimitedLoopRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct DelimitedLoopRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelimitedLoopRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelimitedLoopRequestDefaultTypeInternal() {}
  union {
    DelimitedLoopRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelimitedLoopRequestDefaultTypeInternal _DelimitedLoopRequest_default_instance_;
}  // namespace medibus
static ::_pb::Metadata file_level_metadata_medibus_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_medibus_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_medibus_2eproto = nullptr;

const uint32_t TableStruct_medibus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond, _impl_.devicename_),
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond, _impl_.facility_),
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond, _impl_.poc_),
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond, _impl_.bed_),
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond, _impl_.building_),
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond, _impl_.floor_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest, _impl_.instance_id_),
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest, _impl_.sequence_id_),
  PROTOBUF_FIELD_OFFSET(::medibus::DeviceIdentificationRequest, _impl_.deviceresponds_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusRequest_DeviceRespond, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusRequest_DeviceRespond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusRequest_DeviceRespond, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusRequest_DeviceRespond, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusRequest_DeviceRespond, _impl_.unit_),
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusRequest_DeviceRespond, _impl_.description_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusRequest, _impl_.instance_id_),
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusRequest, _impl_.sequence_id_),
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusRequest, _impl_.deviceresponds_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusReply, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusReply, _impl_.instance_id_),
  PROTOBUF_FIELD_OFFSET(::medibus::MedibusReply, _impl_.message_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.instance_id_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.sequence_id_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_measured_data_cp1_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_low_alarm_limits_cp1_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_high_alarm_limits_cp1_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_alarms_cp1_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_device_settings_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.text_messages_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_measured_data_cp2_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_low_alarm_limits_cp2_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_high_alarm_limits_cp2_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_alarms_cp2_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.device_identification_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_alarms_cp3_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_real_time_vol_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_real_time_flow_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_real_time_paw_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_real_time_co2_),
  PROTOBUF_FIELD_OFFSET(::medibus::LoopRequest, _impl_.cur_real_time_ptrach_),
  0,
  18,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::medibus::DelimitedLoopRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::medibus::DelimitedLoopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::medibus::DelimitedLoopRequest, _impl_.msg_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond)},
  { 22, 31, -1, sizeof(::medibus::DeviceIdentificationRequest)},
  { 34, 44, -1, sizeof(::medibus::MedibusRequest_DeviceRespond)},
  { 48, 57, -1, sizeof(::medibus::MedibusRequest)},
  { 60, 68, -1, sizeof(::medibus::MedibusReply)},
  { 70, 95, -1, sizeof(::medibus::LoopRequest)},
  { 114, 121, -1, sizeof(::medibus::DelimitedLoopRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::medibus::_DeviceIdentificationRequest_DeviceIdentificationRespond_default_instance_._instance,
  &::medibus::_DeviceIdentificationRequest_default_instance_._instance,
  &::medibus::_MedibusRequest_DeviceRespond_default_instance_._instance,
  &::medibus::_MedibusRequest_default_instance_._instance,
  &::medibus::_MedibusReply_default_instance_._instance,
  &::medibus::_LoopRequest_default_instance_._instance,
  &::medibus::_DelimitedLoopRequest_default_instance_._instance,
};

const char descriptor_table_protodef_medibus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmedibus.proto\022\007medibus\"\205\004\n\033DeviceIdent"
  "ificationRequest\022\030\n\013instance_id\030\001 \001(\tH\000\210"
  "\001\001\022\030\n\013sequence_id\030\002 \001(\006H\001\210\001\001\022]\n\016devicere"
  "sponds\030\003 \001(\0132@.medibus.DeviceIdentificat"
  "ionRequest.DeviceIdentificationRespondH\002"
  "\210\001\001\032\237\002\n\033DeviceIdentificationRespond\022\025\n\010d"
  "eviceid\030\001 \001(\tH\000\210\001\001\022\027\n\ndevicename\030\002 \001(\tH\001"
  "\210\001\001\022\025\n\010facility\030\003 \001(\tH\002\210\001\001\022\020\n\003poc\030\004 \001(\tH"
  "\003\210\001\001\022\020\n\003bed\030\005 \001(\tH\004\210\001\001\022\021\n\004room\030\006 \001(\tH\005\210\001"
  "\001\022\025\n\010building\030\007 \001(\tH\006\210\001\001\022\022\n\005floor\030\010 \001(\tH"
  "\007\210\001\001B\013\n\t_deviceidB\r\n\013_devicenameB\013\n\t_fac"
  "ilityB\006\n\004_pocB\006\n\004_bedB\007\n\005_roomB\013\n\t_build"
  "ingB\010\n\006_floorB\016\n\014_instance_idB\016\n\014_sequen"
  "ce_idB\021\n\017_deviceresponds\"\265\002\n\016MedibusRequ"
  "est\022\030\n\013instance_id\030\001 \001(\tH\000\210\001\001\022\030\n\013sequenc"
  "e_id\030\002 \001(\006H\001\210\001\001\022=\n\016deviceresponds\030\003 \003(\0132"
  "%.medibus.MedibusRequest.DeviceRespond\032\217"
  "\001\n\rDeviceRespond\022\021\n\004code\030\001 \001(\tH\000\210\001\001\022\022\n\005v"
  "alue\030\002 \001(\tH\001\210\001\001\022\021\n\004unit\030\003 \001(\tH\002\210\001\001\022\030\n\013de"
  "scription\030\004 \001(\tH\003\210\001\001B\007\n\005_codeB\010\n\006_valueB"
  "\007\n\005_unitB\016\n\014_descriptionB\016\n\014_instance_id"
  "B\016\n\014_sequence_id\"I\n\014MedibusReply\022\030\n\013inst"
  "ance_id\030\001 \001(\tH\000\210\001\001\022\017\n\007message\030\002 \001(\tB\016\n\014_"
  "instance_id\"\363\013\n\013LoopRequest\022\030\n\013instance_"
  "id\030\001 \001(\tH\000\210\001\001\022\030\n\013sequence_id\030\002 \001(\006H\001\210\001\001\022"
  ";\n\025cur_measured_data_cp1\030\003 \001(\0132\027.medibus"
  ".MedibusRequestH\002\210\001\001\022>\n\030cur_low_alarm_li"
  "mits_cp1\030\004 \001(\0132\027.medibus.MedibusRequestH"
  "\003\210\001\001\022\?\n\031cur_high_alarm_limits_cp1\030\005 \001(\0132"
  "\027.medibus.MedibusRequestH\004\210\001\001\0224\n\016cur_ala"
  "rms_cp1\030\006 \001(\0132\027.medibus.MedibusRequestH\005"
  "\210\001\001\0229\n\023cur_device_settings\030\007 \001(\0132\027.medib"
  "us.MedibusRequestH\006\210\001\001\0223\n\rtext_messages\030"
  "\010 \001(\0132\027.medibus.MedibusRequestH\007\210\001\001\022;\n\025c"
  "ur_measured_data_cp2\030\t \001(\0132\027.medibus.Med"
  "ibusRequestH\010\210\001\001\022>\n\030cur_low_alarm_limits"
  "_cp2\030\n \001(\0132\027.medibus.MedibusRequestH\t\210\001\001"
  "\022\?\n\031cur_high_alarm_limits_cp2\030\013 \001(\0132\027.me"
  "dibus.MedibusRequestH\n\210\001\001\0224\n\016cur_alarms_"
  "cp2\030\014 \001(\0132\027.medibus.MedibusRequestH\013\210\001\001\022"
  "H\n\025device_identification\030\r \001(\0132$.medibus"
  ".DeviceIdentificationRequestH\014\210\001\001\0224\n\016cur"
  "_alarms_cp3\030\016 \001(\0132\027.medibus.MedibusReque"
  "stH\r\210\001\001\0227\n\021cur_real_time_vol\030\017 \001(\0132\027.med"
  "ibus.MedibusRequestH\016\210\001\001\0228\n\022cur_real_tim"
  "e_flow\030\020 \001(\0132\027.medibus.MedibusRequestH\017\210"
  "\001\001\0227\n\021cur_real_time_paw\030\021 \001(\0132\027.medibus."
  "MedibusRequestH\020\210\001\001\0227\n\021cur_real_time_co2"
  "\030\022 \001(\0132\027.medibus.MedibusRequestH\021\210\001\001\022:\n\024"
  "cur_real_time_ptrach\030\023 \001(\0132\027.medibus.Med"
  "ibusRequestH\022\210\001\001B\016\n\014_instance_idB\016\n\014_seq"
  "uence_idB\030\n\026_cur_measured_data_cp1B\033\n\031_c"
  "ur_low_alarm_limits_cp1B\034\n\032_cur_high_ala"
  "rm_limits_cp1B\021\n\017_cur_alarms_cp1B\026\n\024_cur"
  "_device_settingsB\020\n\016_text_messagesB\030\n\026_c"
  "ur_measured_data_cp2B\033\n\031_cur_low_alarm_l"
  "imits_cp2B\034\n\032_cur_high_alarm_limits_cp2B"
  "\021\n\017_cur_alarms_cp2B\030\n\026_device_identifica"
  "tionB\021\n\017_cur_alarms_cp3B\024\n\022_cur_real_tim"
  "e_volB\025\n\023_cur_real_time_flowB\024\n\022_cur_rea"
  "l_time_pawB\024\n\022_cur_real_time_co2B\027\n\025_cur"
  "_real_time_ptrach\"0\n\024DelimitedLoopReques"
  "t\022\020\n\003msg\030\001 \001(\014H\000\210\001\001B\006\n\004_msg2\277\010\n\007Medibus\022"
  "F\n\022CurMeasuredDataCP1\022\027.medibus.MedibusR"
  "equest\032\025.medibus.MedibusReply\"\000\022H\n\024CurLo"
  "wAlarmLimitsCP1\022\027.medibus.MedibusRequest"
  "\032\025.medibus.MedibusReply\"\000\022I\n\025CurHighAlar"
  "mLimitsCP1\022\027.medibus.MedibusRequest\032\025.me"
  "dibus.MedibusReply\"\000\022@\n\014CurAlarmsCP1\022\027.m"
  "edibus.MedibusRequest\032\025.medibus.MedibusR"
  "eply\"\000\022E\n\021CurDeviceSettings\022\027.medibus.Me"
  "dibusRequest\032\025.medibus.MedibusReply\"\000\022@\n"
  "\014TextMessages\022\027.medibus.MedibusRequest\032\025"
  ".medibus.MedibusReply\"\000\022F\n\022CurMeasuredDa"
  "taCP2\022\027.medibus.MedibusRequest\032\025.medibus"
  ".MedibusReply\"\000\022H\n\024CurLowAlarmLimitsCP2\022"
  "\027.medibus.MedibusRequest\032\025.medibus.Medib"
  "usReply\"\000\022I\n\025CurHighAlarmLimitsCP2\022\027.med"
  "ibus.MedibusRequest\032\025.medibus.MedibusRep"
  "ly\"\000\022@\n\014CurAlarmsCP2\022\027.medibus.MedibusRe"
  "quest\032\025.medibus.MedibusReply\"\000\022U\n\024Device"
  "Identification\022$.medibus.DeviceIdentific"
  "ationRequest\032\025.medibus.MedibusReply\"\000\022@\n"
  "\014CurAlarmsCP3\022\027.medibus.MedibusRequest\032\025"
  ".medibus.MedibusReply\"\000\022<\n\010RealTime\022\027.me"
  "dibus.MedibusRequest\032\025.medibus.MedibusRe"
  "ply\"\000\022A\n\016DataInEachLoop\022\024.medibus.LoopRe"
  "quest\032\025.medibus.MedibusReply\"\000(\001\022S\n\027Deli"
  "mitedDataInEachLoop\022\035.medibus.DelimitedL"
  "oopRequest\032\025.medibus.MedibusReply\"\000(\001b\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_medibus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_medibus_2eproto = {
    false, false, 3605, descriptor_table_protodef_medibus_2eproto,
    "medibus.proto",
    &descriptor_table_medibus_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_medibus_2eproto::offsets,
    file_level_metadata_medibus_2eproto, file_level_enum_descriptors_medibus_2eproto,
    file_level_service_descriptors_medibus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_medibus_2eproto_getter() {
  return &descriptor_table_medibus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_medibus_2eproto(&descriptor_table_medibus_2eproto);
namespace medibus {

// ===================================================================

class DeviceIdentificationRequest_DeviceIdentificationRespond::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceIdentificationRequest_DeviceIdentificationRespond>()._impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_facility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_poc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_room(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_building(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_floor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

DeviceIdentificationRequest_DeviceIdentificationRespond::DeviceIdentificationRequest_DeviceIdentificationRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:medibus.DeviceIdentificationRequest.DeviceIdentificationRespond)
}
DeviceIdentificationRequest_DeviceIdentificationRespond::DeviceIdentificationRequest_DeviceIdentificationRespond(const DeviceIdentificationRequest_DeviceIdentificationRespond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceIdentificationRequest_DeviceIdentificationRespond* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.devicename_){}
    , decltype(_impl_.facility_){}
    , decltype(_impl_.poc_){}
    , decltype(_impl_.bed_){}
    , decltype(_impl_.room_){}
    , decltype(_impl_.building_){}
    , decltype(_impl_.floor_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deviceid()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_devicename()) {
    _this->_impl_.devicename_.Set(from._internal_devicename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.facility_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.facility_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_facility()) {
    _this->_impl_.facility_.Set(from._internal_facility(), 
      _this->GetArenaForAllocation());
  }
  _impl_.poc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.poc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_poc()) {
    _this->_impl_.poc_.Set(from._internal_poc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bed()) {
    _this->_impl_.bed_.Set(from._internal_bed(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_room()) {
    _this->_impl_.room_.Set(from._internal_room(), 
      _this->GetArenaForAllocation());
  }
  _impl_.building_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.building_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_building()) {
    _this->_impl_.building_.Set(from._internal_building(), 
      _this->GetArenaForAllocation());
  }
  _impl_.floor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.floor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_floor()) {
    _this->_impl_.floor_.Set(from._internal_floor(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:medibus.DeviceIdentificationRequest.DeviceIdentificationRespond)
}

inline void DeviceIdentificationRequest_DeviceIdentificationRespond::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.devicename_){}
    , decltype(_impl_.facility_){}
    , decltype(_impl_.poc_){}
    , decltype(_impl_.bed_){}
    , decltype(_impl_.room_){}
    , decltype(_impl_.building_){}
    , decltype(_impl_.floor_){}
  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.facility_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.facility_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.poc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.poc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.building_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.building_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.floor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.floor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceIdentificationRequest_DeviceIdentificationRespond::~DeviceIdentificationRequest_DeviceIdentificationRespond() {
  // @@protoc_insertion_point(destructor:medibus.DeviceIdentificationRequest.DeviceIdentificationRespond)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceIdentificationRequest_DeviceIdentificationRespond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
  _impl_.devicename_.Destroy();
  _impl_.facility_.Destroy();
  _impl_.poc_.Destroy();
  _impl_.bed_.Destroy();
  _impl_.room_.Destroy();
  _impl_.building_.Destroy();
  _impl_.floor_.Destroy();
}

void DeviceIdentificationRequest_DeviceIdentificationRespond::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceIdentificationRequest_DeviceIdentificationRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:medibus.DeviceIdentificationRequest.DeviceIdentificationRespond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.deviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.devicename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.facility_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.poc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.bed_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.room_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.building_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.floor_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceIdentificationRequest_DeviceIdentificationRespond::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.deviceid"));
        } else
          goto handle_unusual;
        continue;
      // optional string devicename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.devicename"));
        } else
          goto handle_unusual;
        continue;
      // optional string facility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_facility();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.facility"));
        } else
          goto handle_unusual;
        continue;
      // optional string poc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_poc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.poc"));
        } else
          goto handle_unusual;
        continue;
      // optional string bed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.bed"));
        } else
          goto handle_unusual;
        continue;
      // optional string room = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_room();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.room"));
        } else
          goto handle_unusual;
        continue;
      // optional string building = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_building();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.building"));
        } else
          goto handle_unusual;
        continue;
      // optional string floor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_floor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.floor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceIdentificationRequest_DeviceIdentificationRespond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:medibus.DeviceIdentificationRequest.DeviceIdentificationRespond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string deviceid = 1;
  if (_internal_has_deviceid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.deviceid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // optional string devicename = 2;
  if (_internal_has_devicename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicename().data(), static_cast<int>(this->_internal_devicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.devicename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_devicename(), target);
  }

  // optional string facility = 3;
  if (_internal_has_facility()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_facility().data(), static_cast<int>(this->_internal_facility().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.facility");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_facility(), target);
  }

  // optional string poc = 4;
  if (_internal_has_poc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_poc().data(), static_cast<int>(this->_internal_poc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.poc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_poc(), target);
  }

  // optional string bed = 5;
  if (_internal_has_bed()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bed().data(), static_cast<int>(this->_internal_bed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.bed");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bed(), target);
  }

  // optional string room = 6;
  if (_internal_has_room()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.room");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_room(), target);
  }

  // optional string building = 7;
  if (_internal_has_building()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_building().data(), static_cast<int>(this->_internal_building().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.building");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_building(), target);
  }

  // optional string floor = 8;
  if (_internal_has_floor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_floor().data(), static_cast<int>(this->_internal_floor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.DeviceIdentificationRequest.DeviceIdentificationRespond.floor");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_floor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medibus.DeviceIdentificationRequest.DeviceIdentificationRespond)
  return target;
}

size_t DeviceIdentificationRequest_DeviceIdentificationRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medibus.DeviceIdentificationRequest.DeviceIdentificationRespond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string deviceid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deviceid());
    }

    // optional string devicename = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicename());
    }

    // optional string facility = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_facility());
    }

    // optional string poc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_poc());
    }

    // optional string bed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bed());
    }

    // optional string room = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_room());
    }

    // optional string building = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_building());
    }

    // optional string floor = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_floor());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceIdentificationRequest_DeviceIdentificationRespond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceIdentificationRequest_DeviceIdentificationRespond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceIdentificationRequest_DeviceIdentificationRespond::GetClassData() const { return &_class_data_; }


void DeviceIdentificationRequest_DeviceIdentificationRespond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceIdentificationRequest_DeviceIdentificationRespond*>(&to_msg);
  auto& from = static_cast<const DeviceIdentificationRequest_DeviceIdentificationRespond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:medibus.DeviceIdentificationRequest.DeviceIdentificationRespond)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_deviceid(from._internal_deviceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_devicename(from._internal_devicename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_facility(from._internal_facility());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_poc(from._internal_poc());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_bed(from._internal_bed());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_room(from._internal_room());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_building(from._internal_building());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_floor(from._internal_floor());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceIdentificationRequest_DeviceIdentificationRespond::CopyFrom(const DeviceIdentificationRequest_DeviceIdentificationRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medibus.DeviceIdentificationRequest.DeviceIdentificationRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceIdentificationRequest_DeviceIdentificationRespond::IsInitialized() const {
  return true;
}

void DeviceIdentificationRequest_DeviceIdentificationRespond::InternalSwap(DeviceIdentificationRequest_DeviceIdentificationRespond* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicename_, lhs_arena,
      &other->_impl_.devicename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.facility_, lhs_arena,
      &other->_impl_.facility_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.poc_, lhs_arena,
      &other->_impl_.poc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bed_, lhs_arena,
      &other->_impl_.bed_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_, lhs_arena,
      &other->_impl_.room_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.building_, lhs_arena,
      &other->_impl_.building_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.floor_, lhs_arena,
      &other->_impl_.floor_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceIdentificationRequest_DeviceIdentificationRespond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_medibus_2eproto_getter, &descriptor_table_medibus_2eproto_once,
      file_level_metadata_medibus_2eproto[0]);
}

// ===================================================================

class DeviceIdentificationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceIdentificationRequest>()._impl_._has_bits_);
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond& deviceresponds(const DeviceIdentificationRequest* msg);
  static void set_has_deviceresponds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond&
DeviceIdentificationRequest::_Internal::deviceresponds(const DeviceIdentificationRequest* msg) {
  return *msg->_impl_.deviceresponds_;
}
DeviceIdentificationRequest::DeviceIdentificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:medibus.DeviceIdentificationRequest)
}
DeviceIdentificationRequest::DeviceIdentificationRequest(const DeviceIdentificationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceIdentificationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.deviceresponds_){nullptr}
    , decltype(_impl_.sequence_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instance_id()) {
    _this->_impl_.instance_id_.Set(from._internal_instance_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_deviceresponds()) {
    _this->_impl_.deviceresponds_ = new ::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond(*from._impl_.deviceresponds_);
  }
  _this->_impl_.sequence_id_ = from._impl_.sequence_id_;
  // @@protoc_insertion_point(copy_constructor:medibus.DeviceIdentificationRequest)
}

inline void DeviceIdentificationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.deviceresponds_){nullptr}
    , decltype(_impl_.sequence_id_){uint64_t{0u}}
  };
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceIdentificationRequest::~DeviceIdentificationRequest() {
  // @@protoc_insertion_point(destructor:medibus.DeviceIdentificationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceIdentificationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instance_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deviceresponds_;
}

void DeviceIdentificationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceIdentificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:medibus.DeviceIdentificationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.instance_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.deviceresponds_ != nullptr);
      _impl_.deviceresponds_->Clear();
    }
  }
  _impl_.sequence_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceIdentificationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.DeviceIdentificationRequest.instance_id"));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 sequence_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_sequence_id(&has_bits);
          _impl_.sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.DeviceIdentificationRequest.DeviceIdentificationRespond deviceresponds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deviceresponds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceIdentificationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:medibus.DeviceIdentificationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string instance_id = 1;
  if (_internal_has_instance_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_id().data(), static_cast<int>(this->_internal_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.DeviceIdentificationRequest.instance_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_id(), target);
  }

  // optional fixed64 sequence_id = 2;
  if (_internal_has_sequence_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sequence_id(), target);
  }

  // optional .medibus.DeviceIdentificationRequest.DeviceIdentificationRespond deviceresponds = 3;
  if (_internal_has_deviceresponds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::deviceresponds(this),
        _Internal::deviceresponds(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medibus.DeviceIdentificationRequest)
  return target;
}

size_t DeviceIdentificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medibus.DeviceIdentificationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string instance_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instance_id());
    }

    // optional .medibus.DeviceIdentificationRequest.DeviceIdentificationRespond deviceresponds = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deviceresponds_);
    }

    // optional fixed64 sequence_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceIdentificationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceIdentificationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceIdentificationRequest::GetClassData() const { return &_class_data_; }


void DeviceIdentificationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceIdentificationRequest*>(&to_msg);
  auto& from = static_cast<const DeviceIdentificationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:medibus.DeviceIdentificationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_instance_id(from._internal_instance_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_deviceresponds()->::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond::MergeFrom(
          from._internal_deviceresponds());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sequence_id_ = from._impl_.sequence_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceIdentificationRequest::CopyFrom(const DeviceIdentificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medibus.DeviceIdentificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceIdentificationRequest::IsInitialized() const {
  return true;
}

void DeviceIdentificationRequest::InternalSwap(DeviceIdentificationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_id_, lhs_arena,
      &other->_impl_.instance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceIdentificationRequest, _impl_.sequence_id_)
      + sizeof(DeviceIdentificationRequest::_impl_.sequence_id_)
      - PROTOBUF_FIELD_OFFSET(DeviceIdentificationRequest, _impl_.deviceresponds_)>(
          reinterpret_cast<char*>(&_impl_.deviceresponds_),
          reinterpret_cast<char*>(&other->_impl_.deviceresponds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceIdentificationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_medibus_2eproto_getter, &descriptor_table_medibus_2eproto_once,
      file_level_metadata_medibus_2eproto[1]);
}

// ===================================================================

class MedibusRequest_DeviceRespond::_Internal {
 public:
  using HasBits = decltype(std::declval<MedibusRequest_DeviceRespond>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MedibusRequest_DeviceRespond::MedibusRequest_DeviceRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:medibus.MedibusRequest.DeviceRespond)
}
MedibusRequest_DeviceRespond::MedibusRequest_DeviceRespond(const MedibusRequest_DeviceRespond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MedibusRequest_DeviceRespond* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.unit_){}
    , decltype(_impl_.description_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unit()) {
    _this->_impl_.unit_.Set(from._internal_unit(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:medibus.MedibusRequest.DeviceRespond)
}

inline void MedibusRequest_DeviceRespond::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.unit_){}
    , decltype(_impl_.description_){}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MedibusRequest_DeviceRespond::~MedibusRequest_DeviceRespond() {
  // @@protoc_insertion_point(destructor:medibus.MedibusRequest.DeviceRespond)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MedibusRequest_DeviceRespond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.value_.Destroy();
  _impl_.unit_.Destroy();
  _impl_.description_.Destroy();
}

void MedibusRequest_DeviceRespond::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MedibusRequest_DeviceRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:medibus.MedibusRequest.DeviceRespond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.unit_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MedibusRequest_DeviceRespond::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.MedibusRequest.DeviceRespond.code"));
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.MedibusRequest.DeviceRespond.value"));
        } else
          goto handle_unusual;
        continue;
      // optional string unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_unit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.MedibusRequest.DeviceRespond.unit"));
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.MedibusRequest.DeviceRespond.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MedibusRequest_DeviceRespond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:medibus.MedibusRequest.DeviceRespond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string code = 1;
  if (_internal_has_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.MedibusRequest.DeviceRespond.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // optional string value = 2;
  if (_internal_has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.MedibusRequest.DeviceRespond.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional string unit = 3;
  if (_internal_has_unit()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.MedibusRequest.DeviceRespond.unit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unit(), target);
  }

  // optional string description = 4;
  if (_internal_has_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.MedibusRequest.DeviceRespond.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medibus.MedibusRequest.DeviceRespond)
  return target;
}

size_t MedibusRequest_DeviceRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medibus.MedibusRequest.DeviceRespond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional string unit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unit());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MedibusRequest_DeviceRespond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MedibusRequest_DeviceRespond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MedibusRequest_DeviceRespond::GetClassData() const { return &_class_data_; }


void MedibusRequest_DeviceRespond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MedibusRequest_DeviceRespond*>(&to_msg);
  auto& from = static_cast<const MedibusRequest_DeviceRespond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:medibus.MedibusRequest.DeviceRespond)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_unit(from._internal_unit());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_description(from._internal_description());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MedibusRequest_DeviceRespond::CopyFrom(const MedibusRequest_DeviceRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medibus.MedibusRequest.DeviceRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedibusRequest_DeviceRespond::IsInitialized() const {
  return true;
}

void MedibusRequest_DeviceRespond::InternalSwap(MedibusRequest_DeviceRespond* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unit_, lhs_arena,
      &other->_impl_.unit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MedibusRequest_DeviceRespond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_medibus_2eproto_getter, &descriptor_table_medibus_2eproto_once,
      file_level_metadata_medibus_2eproto[2]);
}

// ===================================================================

class MedibusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MedibusRequest>()._impl_._has_bits_);
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MedibusRequest::MedibusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:medibus.MedibusRequest)
}
MedibusRequest::MedibusRequest(const MedibusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MedibusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceresponds_){from._impl_.deviceresponds_}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.sequence_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instance_id()) {
    _this->_impl_.instance_id_.Set(from._internal_instance_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_id_ = from._impl_.sequence_id_;
  // @@protoc_insertion_point(copy_constructor:medibus.MedibusRequest)
}

inline void MedibusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceresponds_){arena}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.sequence_id_){uint64_t{0u}}
  };
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MedibusRequest::~MedibusRequest() {
  // @@protoc_insertion_point(destructor:medibus.MedibusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MedibusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceresponds_.~RepeatedPtrField();
  _impl_.instance_id_.Destroy();
}

void MedibusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MedibusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:medibus.MedibusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceresponds_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.instance_id_.ClearNonDefaultToEmpty();
  }
  _impl_.sequence_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MedibusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.MedibusRequest.instance_id"));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 sequence_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_sequence_id(&has_bits);
          _impl_.sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .medibus.MedibusRequest.DeviceRespond deviceresponds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deviceresponds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MedibusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:medibus.MedibusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string instance_id = 1;
  if (_internal_has_instance_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_id().data(), static_cast<int>(this->_internal_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.MedibusRequest.instance_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_id(), target);
  }

  // optional fixed64 sequence_id = 2;
  if (_internal_has_sequence_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sequence_id(), target);
  }

  // repeated .medibus.MedibusRequest.DeviceRespond deviceresponds = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deviceresponds_size()); i < n; i++) {
    const auto& repfield = this->_internal_deviceresponds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medibus.MedibusRequest)
  return target;
}

size_t MedibusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medibus.MedibusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .medibus.MedibusRequest.DeviceRespond deviceresponds = 3;
  total_size += 1UL * this->_internal_deviceresponds_size();
  for (const auto& msg : this->_impl_.deviceresponds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string instance_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instance_id());
    }

    // optional fixed64 sequence_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MedibusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MedibusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MedibusRequest::GetClassData() const { return &_class_data_; }


void MedibusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MedibusRequest*>(&to_msg);
  auto& from = static_cast<const MedibusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:medibus.MedibusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.deviceresponds_.MergeFrom(from._impl_.deviceresponds_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_instance_id(from._internal_instance_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sequence_id_ = from._impl_.sequence_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MedibusRequest::CopyFrom(const MedibusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medibus.MedibusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedibusRequest::IsInitialized() const {
  return true;
}

void MedibusRequest::InternalSwap(MedibusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.deviceresponds_.InternalSwap(&other->_impl_.deviceresponds_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_id_, lhs_arena,
      &other->_impl_.instance_id_, rhs_arena
  );
  swap(_impl_.sequence_id_, other->_impl_.sequence_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MedibusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_medibus_2eproto_getter, &descriptor_table_medibus_2eproto_once,
      file_level_metadata_medibus_2eproto[3]);
}

// ===================================================================

class MedibusReply::_Internal {
 public:
  using HasBits = decltype(std::declval<MedibusReply>()._impl_._has_bits_);
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MedibusReply::MedibusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:medibus.MedibusReply)
}
MedibusReply::MedibusReply(const MedibusReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MedibusReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.message_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instance_id()) {
    _this->_impl_.instance_id_.Set(from._internal_instance_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:medibus.MedibusReply)
}

inline void MedibusReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.message_){}
  };
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MedibusReply::~MedibusReply() {
  // @@protoc_insertion_point(destructor:medibus.MedibusReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MedibusReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instance_id_.Destroy();
  _impl_.message_.Destroy();
}

void MedibusReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MedibusReply::Clear() {
// @@protoc_insertion_point(message_clear_start:medibus.MedibusReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.instance_id_.ClearNonDefaultToEmpty();
  }
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MedibusReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.MedibusReply.instance_id"));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.MedibusReply.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MedibusReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:medibus.MedibusReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string instance_id = 1;
  if (_internal_has_instance_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_id().data(), static_cast<int>(this->_internal_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.MedibusReply.instance_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_id(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.MedibusReply.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medibus.MedibusReply)
  return target;
}

size_t MedibusReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medibus.MedibusReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string instance_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_id());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MedibusReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MedibusReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MedibusReply::GetClassData() const { return &_class_data_; }


void MedibusReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MedibusReply*>(&to_msg);
  auto& from = static_cast<const MedibusReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:medibus.MedibusReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instance_id()) {
    _this->_internal_set_instance_id(from._internal_instance_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MedibusReply::CopyFrom(const MedibusReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medibus.MedibusReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedibusReply::IsInitialized() const {
  return true;
}

void MedibusReply::InternalSwap(MedibusReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_id_, lhs_arena,
      &other->_impl_.instance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MedibusReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_medibus_2eproto_getter, &descriptor_table_medibus_2eproto_once,
      file_level_metadata_medibus_2eproto[4]);
}

// ===================================================================

class LoopRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LoopRequest>()._impl_._has_bits_);
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::medibus::MedibusRequest& cur_measured_data_cp1(const LoopRequest* msg);
  static void set_has_cur_measured_data_cp1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::medibus::MedibusRequest& cur_low_alarm_limits_cp1(const LoopRequest* msg);
  static void set_has_cur_low_alarm_limits_cp1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::medibus::MedibusRequest& cur_high_alarm_limits_cp1(const LoopRequest* msg);
  static void set_has_cur_high_alarm_limits_cp1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::medibus::MedibusRequest& cur_alarms_cp1(const LoopRequest* msg);
  static void set_has_cur_alarms_cp1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::medibus::MedibusRequest& cur_device_settings(const LoopRequest* msg);
  static void set_has_cur_device_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::medibus::MedibusRequest& text_messages(const LoopRequest* msg);
  static void set_has_text_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::medibus::MedibusRequest& cur_measured_data_cp2(const LoopRequest* msg);
  static void set_has_cur_measured_data_cp2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::medibus::MedibusRequest& cur_low_alarm_limits_cp2(const LoopRequest* msg);
  static void set_has_cur_low_alarm_limits_cp2(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::medibus::MedibusRequest& cur_high_alarm_limits_cp2(const LoopRequest* msg);
  static void set_has_cur_high_alarm_limits_cp2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::medibus::MedibusRequest& cur_alarms_cp2(const LoopRequest* msg);
  static void set_has_cur_alarms_cp2(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::medibus::DeviceIdentificationRequest& device_identification(const LoopRequest* msg);
  static void set_has_device_identification(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::medibus::MedibusRequest& cur_alarms_cp3(const LoopRequest* msg);
  static void set_has_cur_alarms_cp3(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::medibus::MedibusRequest& cur_real_time_vol(const LoopRequest* msg);
  static void set_has_cur_real_time_vol(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::medibus::MedibusRequest& cur_real_time_flow(const LoopRequest* msg);
  static void set_has_cur_real_time_flow(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::medibus::MedibusRequest& cur_real_time_paw(const LoopRequest* msg);
  static void set_has_cur_real_time_paw(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::medibus::MedibusRequest& cur_real_time_co2(const LoopRequest* msg);
  static void set_has_cur_real_time_co2(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::medibus::MedibusRequest& cur_real_time_ptrach(const LoopRequest* msg);
  static void set_has_cur_real_time_ptrach(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_measured_data_cp1(const LoopRequest* msg) {
  return *msg->_impl_.cur_measured_data_cp1_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_low_alarm_limits_cp1(const LoopRequest* msg) {
  return *msg->_impl_.cur_low_alarm_limits_cp1_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_high_alarm_limits_cp1(const LoopRequest* msg) {
  return *msg->_impl_.cur_high_alarm_limits_cp1_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_alarms_cp1(const LoopRequest* msg) {
  return *msg->_impl_.cur_alarms_cp1_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_device_settings(const LoopRequest* msg) {
  return *msg->_impl_.cur_device_settings_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::text_messages(const LoopRequest* msg) {
  return *msg->_impl_.text_messages_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_measured_data_cp2(const LoopRequest* msg) {
  return *msg->_impl_.cur_measured_data_cp2_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_low_alarm_limits_cp2(const LoopRequest* msg) {
  return *msg->_impl_.cur_low_alarm_limits_cp2_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_high_alarm_limits_cp2(const LoopRequest* msg) {
  return *msg->_impl_.cur_high_alarm_limits_cp2_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_alarms_cp2(const LoopRequest* msg) {
  return *msg->_impl_.cur_alarms_cp2_;
}
const ::medibus::DeviceIdentificationRequest&
LoopRequest::_Internal::device_identification(const LoopRequest* msg) {
  return *msg->_impl_.device_identification_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_alarms_cp3(const LoopRequest* msg) {
  return *msg->_impl_.cur_alarms_cp3_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_real_time_vol(const LoopRequest* msg) {
  return *msg->_impl_.cur_real_time_vol_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_real_time_flow(const LoopRequest* msg) {
  return *msg->_impl_.cur_real_time_flow_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_real_time_paw(const LoopRequest* msg) {
  return *msg->_impl_.cur_real_time_paw_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_real_time_co2(const LoopRequest* msg) {
  return *msg->_impl_.cur_real_time_co2_;
}
const ::medibus::MedibusRequest&
LoopRequest::_Internal::cur_real_time_ptrach(const LoopRequest* msg) {
  return *msg->_impl_.cur_real_time_ptrach_;
}
LoopRequest::LoopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:medibus.LoopRequest)
}
LoopRequest::LoopRequest(const LoopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoopRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.cur_measured_data_cp1_){nullptr}
    , decltype(_impl_.cur_low_alarm_limits_cp1_){nullptr}
    , decltype(_impl_.cur_high_alarm_limits_cp1_){nullptr}
    , decltype(_impl_.cur_alarms_cp1_){nullptr}
    , decltype(_impl_.cur_device_settings_){nullptr}
    , decltype(_impl_.text_messages_){nullptr}
    , decltype(_impl_.cur_measured_data_cp2_){nullptr}
    , decltype(_impl_.cur_low_alarm_limits_cp2_){nullptr}
    , decltype(_impl_.cur_high_alarm_limits_cp2_){nullptr}
    , decltype(_impl_.cur_alarms_cp2_){nullptr}
    , decltype(_impl_.device_identification_){nullptr}
    , decltype(_impl_.cur_alarms_cp3_){nullptr}
    , decltype(_impl_.cur_real_time_vol_){nullptr}
    , decltype(_impl_.cur_real_time_flow_){nullptr}
    , decltype(_impl_.cur_real_time_paw_){nullptr}
    , decltype(_impl_.cur_real_time_co2_){nullptr}
    , decltype(_impl_.cur_real_time_ptrach_){nullptr}
    , decltype(_impl_.sequence_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instance_id()) {
    _this->_impl_.instance_id_.Set(from._internal_instance_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_cur_measured_data_cp1()) {
    _this->_impl_.cur_measured_data_cp1_ = new ::medibus::MedibusRequest(*from._impl_.cur_measured_data_cp1_);
  }
  if (from._internal_has_cur_low_alarm_limits_cp1()) {
    _this->_impl_.cur_low_alarm_limits_cp1_ = new ::medibus::MedibusRequest(*from._impl_.cur_low_alarm_limits_cp1_);
  }
  if (from._internal_has_cur_high_alarm_limits_cp1()) {
    _this->_impl_.cur_high_alarm_limits_cp1_ = new ::medibus::MedibusRequest(*from._impl_.cur_high_alarm_limits_cp1_);
  }
  if (from._internal_has_cur_alarms_cp1()) {
    _this->_impl_.cur_alarms_cp1_ = new ::medibus::MedibusRequest(*from._impl_.cur_alarms_cp1_);
  }
  if (from._internal_has_cur_device_settings()) {
    _this->_impl_.cur_device_settings_ = new ::medibus::MedibusRequest(*from._impl_.cur_device_settings_);
  }
  if (from._internal_has_text_messages()) {
    _this->_impl_.text_messages_ = new ::medibus::MedibusRequest(*from._impl_.text_messages_);
  }
  if (from._internal_has_cur_measured_data_cp2()) {
    _this->_impl_.cur_measured_data_cp2_ = new ::medibus::MedibusRequest(*from._impl_.cur_measured_data_cp2_);
  }
  if (from._internal_has_cur_low_alarm_limits_cp2()) {
    _this->_impl_.cur_low_alarm_limits_cp2_ = new ::medibus::MedibusRequest(*from._impl_.cur_low_alarm_limits_cp2_);
  }
  if (from._internal_has_cur_high_alarm_limits_cp2()) {
    _this->_impl_.cur_high_alarm_limits_cp2_ = new ::medibus::MedibusRequest(*from._impl_.cur_high_alarm_limits_cp2_);
  }
  if (from._internal_has_cur_alarms_cp2()) {
    _this->_impl_.cur_alarms_cp2_ = new ::medibus::MedibusRequest(*from._impl_.cur_alarms_cp2_);
  }
  if (from._internal_has_device_identification()) {
    _this->_impl_.device_identification_ = new ::medibus::DeviceIdentificationRequest(*from._impl_.device_identification_);
  }
  if (from._internal_has_cur_alarms_cp3()) {
    _this->_impl_.cur_alarms_cp3_ = new ::medibus::MedibusRequest(*from._impl_.cur_alarms_cp3_);
  }
  if (from._internal_has_cur_real_time_vol()) {
    _this->_impl_.cur_real_time_vol_ = new ::medibus::MedibusRequest(*from._impl_.cur_real_time_vol_);
  }
  if (from._internal_has_cur_real_time_flow()) {
    _this->_impl_.cur_real_time_flow_ = new ::medibus::MedibusRequest(*from._impl_.cur_real_time_flow_);
  }
  if (from._internal_has_cur_real_time_paw()) {
    _this->_impl_.cur_real_time_paw_ = new ::medibus::MedibusRequest(*from._impl_.cur_real_time_paw_);
  }
  if (from._internal_has_cur_real_time_co2()) {
    _this->_impl_.cur_real_time_co2_ = new ::medibus::MedibusRequest(*from._impl_.cur_real_time_co2_);
  }
  if (from._internal_has_cur_real_time_ptrach()) {
    _this->_impl_.cur_real_time_ptrach_ = new ::medibus::MedibusRequest(*from._impl_.cur_real_time_ptrach_);
  }
  _this->_impl_.sequence_id_ = from._impl_.sequence_id_;
  // @@protoc_insertion_point(copy_constructor:medibus.LoopRequest)
}

inline void LoopRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.cur_measured_data_cp1_){nullptr}
    , decltype(_impl_.cur_low_alarm_limits_cp1_){nullptr}
    , decltype(_impl_.cur_high_alarm_limits_cp1_){nullptr}
    , decltype(_impl_.cur_alarms_cp1_){nullptr}
    , decltype(_impl_.cur_device_settings_){nullptr}
    , decltype(_impl_.text_messages_){nullptr}
    , decltype(_impl_.cur_measured_data_cp2_){nullptr}
    , decltype(_impl_.cur_low_alarm_limits_cp2_){nullptr}
    , decltype(_impl_.cur_high_alarm_limits_cp2_){nullptr}
    , decltype(_impl_.cur_alarms_cp2_){nullptr}
    , decltype(_impl_.device_identification_){nullptr}
    , decltype(_impl_.cur_alarms_cp3_){nullptr}
    , decltype(_impl_.cur_real_time_vol_){nullptr}
    , decltype(_impl_.cur_real_time_flow_){nullptr}
    , decltype(_impl_.cur_real_time_paw_){nullptr}
    , decltype(_impl_.cur_real_time_co2_){nullptr}
    , decltype(_impl_.cur_real_time_ptrach_){nullptr}
    , decltype(_impl_.sequence_id_){uint64_t{0u}}
  };
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoopRequest::~LoopRequest() {
  // @@protoc_insertion_point(destructor:medibus.LoopRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instance_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cur_measured_data_cp1_;
  if (this != internal_default_instance()) delete _impl_.cur_low_alarm_limits_cp1_;
  if (this != internal_default_instance()) delete _impl_.cur_high_alarm_limits_cp1_;
  if (this != internal_default_instance()) delete _impl_.cur_alarms_cp1_;
  if (this != internal_default_instance()) delete _impl_.cur_device_settings_;
  if (this != internal_default_instance()) delete _impl_.text_messages_;
  if (this != internal_default_instance()) delete _impl_.cur_measured_data_cp2_;
  if (this != internal_default_instance()) delete _impl_.cur_low_alarm_limits_cp2_;
  if (this != internal_default_instance()) delete _impl_.cur_high_alarm_limits_cp2_;
  if (this != internal_default_instance()) delete _impl_.cur_alarms_cp2_;
  if (this != internal_default_instance()) delete _impl_.device_identification_;
  if (this != internal_default_instance()) delete _impl_.cur_alarms_cp3_;
  if (this != internal_default_instance()) delete _impl_.cur_real_time_vol_;
  if (this != internal_default_instance()) delete _impl_.cur_real_time_flow_;
  if (this != internal_default_instance()) delete _impl_.cur_real_time_paw_;
  if (this != internal_default_instance()) delete _impl_.cur_real_time_co2_;
  if (this != internal_default_instance()) delete _impl_.cur_real_time_ptrach_;
}

void LoopRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:medibus.LoopRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.instance_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cur_measured_data_cp1_ != nullptr);
      _impl_.cur_measured_data_cp1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.cur_low_alarm_limits_cp1_ != nullptr);
      _impl_.cur_low_alarm_limits_cp1_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.cur_high_alarm_limits_cp1_ != nullptr);
      _impl_.cur_high_alarm_limits_cp1_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.cur_alarms_cp1_ != nullptr);
      _impl_.cur_alarms_cp1_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.cur_device_settings_ != nullptr);
      _impl_.cur_device_settings_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.text_messages_ != nullptr);
      _impl_.text_messages_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.cur_measured_data_cp2_ != nullptr);
      _impl_.cur_measured_data_cp2_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.cur_low_alarm_limits_cp2_ != nullptr);
      _impl_.cur_low_alarm_limits_cp2_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.cur_high_alarm_limits_cp2_ != nullptr);
      _impl_.cur_high_alarm_limits_cp2_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.cur_alarms_cp2_ != nullptr);
      _impl_.cur_alarms_cp2_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.device_identification_ != nullptr);
      _impl_.device_identification_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.cur_alarms_cp3_ != nullptr);
      _impl_.cur_alarms_cp3_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.cur_real_time_vol_ != nullptr);
      _impl_.cur_real_time_vol_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.cur_real_time_flow_ != nullptr);
      _impl_.cur_real_time_flow_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.cur_real_time_paw_ != nullptr);
      _impl_.cur_real_time_paw_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.cur_real_time_co2_ != nullptr);
      _impl_.cur_real_time_co2_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.cur_real_time_ptrach_ != nullptr);
      _impl_.cur_real_time_ptrach_->Clear();
    }
  }
  _impl_.sequence_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoopRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "medibus.LoopRequest.instance_id"));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 sequence_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_sequence_id(&has_bits);
          _impl_.sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_measured_data_cp1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_measured_data_cp1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_low_alarm_limits_cp1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_low_alarm_limits_cp1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_high_alarm_limits_cp1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_high_alarm_limits_cp1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_alarms_cp1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_alarms_cp1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_device_settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_device_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest text_messages = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_messages(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_measured_data_cp2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_measured_data_cp2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_low_alarm_limits_cp2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_low_alarm_limits_cp2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_high_alarm_limits_cp2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_high_alarm_limits_cp2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_alarms_cp2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_alarms_cp2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.DeviceIdentificationRequest device_identification = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_identification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_alarms_cp3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_alarms_cp3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_real_time_vol = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_real_time_vol(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_real_time_flow = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_real_time_flow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_real_time_paw = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_real_time_paw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_real_time_co2 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_real_time_co2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .medibus.MedibusRequest cur_real_time_ptrach = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_real_time_ptrach(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoopRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:medibus.LoopRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string instance_id = 1;
  if (_internal_has_instance_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_id().data(), static_cast<int>(this->_internal_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "medibus.LoopRequest.instance_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_id(), target);
  }

  // optional fixed64 sequence_id = 2;
  if (_internal_has_sequence_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sequence_id(), target);
  }

  // optional .medibus.MedibusRequest cur_measured_data_cp1 = 3;
  if (_internal_has_cur_measured_data_cp1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cur_measured_data_cp1(this),
        _Internal::cur_measured_data_cp1(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_low_alarm_limits_cp1 = 4;
  if (_internal_has_cur_low_alarm_limits_cp1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cur_low_alarm_limits_cp1(this),
        _Internal::cur_low_alarm_limits_cp1(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_high_alarm_limits_cp1 = 5;
  if (_internal_has_cur_high_alarm_limits_cp1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cur_high_alarm_limits_cp1(this),
        _Internal::cur_high_alarm_limits_cp1(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_alarms_cp1 = 6;
  if (_internal_has_cur_alarms_cp1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cur_alarms_cp1(this),
        _Internal::cur_alarms_cp1(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_device_settings = 7;
  if (_internal_has_cur_device_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::cur_device_settings(this),
        _Internal::cur_device_settings(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest text_messages = 8;
  if (_internal_has_text_messages()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::text_messages(this),
        _Internal::text_messages(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_measured_data_cp2 = 9;
  if (_internal_has_cur_measured_data_cp2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::cur_measured_data_cp2(this),
        _Internal::cur_measured_data_cp2(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_low_alarm_limits_cp2 = 10;
  if (_internal_has_cur_low_alarm_limits_cp2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::cur_low_alarm_limits_cp2(this),
        _Internal::cur_low_alarm_limits_cp2(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_high_alarm_limits_cp2 = 11;
  if (_internal_has_cur_high_alarm_limits_cp2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::cur_high_alarm_limits_cp2(this),
        _Internal::cur_high_alarm_limits_cp2(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_alarms_cp2 = 12;
  if (_internal_has_cur_alarms_cp2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::cur_alarms_cp2(this),
        _Internal::cur_alarms_cp2(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.DeviceIdentificationRequest device_identification = 13;
  if (_internal_has_device_identification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::device_identification(this),
        _Internal::device_identification(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_alarms_cp3 = 14;
  if (_internal_has_cur_alarms_cp3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::cur_alarms_cp3(this),
        _Internal::cur_alarms_cp3(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_real_time_vol = 15;
  if (_internal_has_cur_real_time_vol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::cur_real_time_vol(this),
        _Internal::cur_real_time_vol(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_real_time_flow = 16;
  if (_internal_has_cur_real_time_flow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::cur_real_time_flow(this),
        _Internal::cur_real_time_flow(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_real_time_paw = 17;
  if (_internal_has_cur_real_time_paw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::cur_real_time_paw(this),
        _Internal::cur_real_time_paw(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_real_time_co2 = 18;
  if (_internal_has_cur_real_time_co2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::cur_real_time_co2(this),
        _Internal::cur_real_time_co2(this).GetCachedSize(), target, stream);
  }

  // optional .medibus.MedibusRequest cur_real_time_ptrach = 19;
  if (_internal_has_cur_real_time_ptrach()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::cur_real_time_ptrach(this),
        _Internal::cur_real_time_ptrach(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medibus.LoopRequest)
  return target;
}

size_t LoopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medibus.LoopRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string instance_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instance_id());
    }

    // optional .medibus.MedibusRequest cur_measured_data_cp1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_measured_data_cp1_);
    }

    // optional .medibus.MedibusRequest cur_low_alarm_limits_cp1 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_low_alarm_limits_cp1_);
    }

    // optional .medibus.MedibusRequest cur_high_alarm_limits_cp1 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_high_alarm_limits_cp1_);
    }

    // optional .medibus.MedibusRequest cur_alarms_cp1 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_alarms_cp1_);
    }

    // optional .medibus.MedibusRequest cur_device_settings = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_device_settings_);
    }

    // optional .medibus.MedibusRequest text_messages = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.text_messages_);
    }

    // optional .medibus.MedibusRequest cur_measured_data_cp2 = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_measured_data_cp2_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .medibus.MedibusRequest cur_low_alarm_limits_cp2 = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_low_alarm_limits_cp2_);
    }

    // optional .medibus.MedibusRequest cur_high_alarm_limits_cp2 = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_high_alarm_limits_cp2_);
    }

    // optional .medibus.MedibusRequest cur_alarms_cp2 = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_alarms_cp2_);
    }

    // optional .medibus.DeviceIdentificationRequest device_identification = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.device_identification_);
    }

    // optional .medibus.MedibusRequest cur_alarms_cp3 = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_alarms_cp3_);
    }

    // optional .medibus.MedibusRequest cur_real_time_vol = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_real_time_vol_);
    }

    // optional .medibus.MedibusRequest cur_real_time_flow = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_real_time_flow_);
    }

    // optional .medibus.MedibusRequest cur_real_time_paw = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_real_time_paw_);
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional .medibus.MedibusRequest cur_real_time_co2 = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_real_time_co2_);
    }

    // optional .medibus.MedibusRequest cur_real_time_ptrach = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cur_real_time_ptrach_);
    }

    // optional fixed64 sequence_id = 2;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoopRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoopRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoopRequest::GetClassData() const { return &_class_data_; }


void LoopRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoopRequest*>(&to_msg);
  auto& from = static_cast<const LoopRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:medibus.LoopRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_instance_id(from._internal_instance_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cur_measured_data_cp1()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_measured_data_cp1());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_cur_low_alarm_limits_cp1()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_low_alarm_limits_cp1());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_cur_high_alarm_limits_cp1()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_high_alarm_limits_cp1());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_cur_alarms_cp1()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_alarms_cp1());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_cur_device_settings()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_device_settings());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_text_messages()->::medibus::MedibusRequest::MergeFrom(
          from._internal_text_messages());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_cur_measured_data_cp2()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_measured_data_cp2());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_cur_low_alarm_limits_cp2()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_low_alarm_limits_cp2());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_cur_high_alarm_limits_cp2()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_high_alarm_limits_cp2());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_cur_alarms_cp2()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_alarms_cp2());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_device_identification()->::medibus::DeviceIdentificationRequest::MergeFrom(
          from._internal_device_identification());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_cur_alarms_cp3()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_alarms_cp3());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_cur_real_time_vol()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_real_time_vol());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_cur_real_time_flow()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_real_time_flow());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_cur_real_time_paw()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_real_time_paw());
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_cur_real_time_co2()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_real_time_co2());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_cur_real_time_ptrach()->::medibus::MedibusRequest::MergeFrom(
          from._internal_cur_real_time_ptrach());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.sequence_id_ = from._impl_.sequence_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoopRequest::CopyFrom(const LoopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medibus.LoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopRequest::IsInitialized() const {
  return true;
}

void LoopRequest::InternalSwap(LoopRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_id_, lhs_arena,
      &other->_impl_.instance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoopRequest, _impl_.sequence_id_)
      + sizeof(LoopRequest::_impl_.sequence_id_)
      - PROTOBUF_FIELD_OFFSET(LoopRequest, _impl_.cur_measured_data_cp1_)>(
          reinterpret_cast<char*>(&_impl_.cur_measured_data_cp1_),
          reinterpret_cast<char*>(&other->_impl_.cur_measured_data_cp1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoopRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_medibus_2eproto_getter, &descriptor_table_medibus_2eproto_once,
      file_level_metadata_medibus_2eproto[5]);
}

// ===================================================================

class DelimitedLoopRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DelimitedLoopRequest>()._impl_._has_bits_);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DelimitedLoopRequest::DelimitedLoopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:medibus.DelimitedLoopRequest)
}
DelimitedLoopRequest::DelimitedLoopRequest(const DelimitedLoopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DelimitedLoopRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:medibus.DelimitedLoopRequest)
}

inline void DelimitedLoopRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DelimitedLoopRequest::~DelimitedLoopRequest() {
  // @@protoc_insertion_point(destructor:medibus.DelimitedLoopRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelimitedLoopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void DelimitedLoopRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelimitedLoopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:medibus.DelimitedLoopRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.msg_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelimitedLoopRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DelimitedLoopRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:medibus.DelimitedLoopRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bytes msg = 1;
  if (_internal_has_msg()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medibus.DelimitedLoopRequest)
  return target;
}

size_t DelimitedLoopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medibus.DelimitedLoopRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes msg = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelimitedLoopRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DelimitedLoopRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelimitedLoopRequest::GetClassData() const { return &_class_data_; }


void DelimitedLoopRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DelimitedLoopRequest*>(&to_msg);
  auto& from = static_cast<const DelimitedLoopRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:medibus.DelimitedLoopRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelimitedLoopRequest::CopyFrom(const DelimitedLoopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medibus.DelimitedLoopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelimitedLoopRequest::IsInitialized() const {
  return true;
}

void DelimitedLoopRequest::InternalSwap(DelimitedLoopRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DelimitedLoopRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_medibus_2eproto_getter, &descriptor_table_medibus_2eproto_once,
      file_level_metadata_medibus_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace medibus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond*
Arena::CreateMaybeMessage< ::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::medibus::DeviceIdentificationRequest_DeviceIdentificationRespond >(arena);
}
template<> PROTOBUF_NOINLINE ::medibus::DeviceIdentificationRequest*
Arena::CreateMaybeMessage< ::medibus::DeviceIdentificationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::medibus::DeviceIdentificationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::medibus::MedibusRequest_DeviceRespond*
Arena::CreateMaybeMessage< ::medibus::MedibusRequest_DeviceRespond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::medibus::MedibusRequest_DeviceRespond >(arena);
}
template<> PROTOBUF_NOINLINE ::medibus::MedibusRequest*
Arena::CreateMaybeMessage< ::medibus::MedibusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::medibus::MedibusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::medibus::MedibusReply*
Arena::CreateMaybeMessage< ::medibus::MedibusReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::medibus::MedibusReply >(arena);
}
template<> PROTOBUF_NOINLINE ::medibus::LoopRequest*
Arena::CreateMaybeMessage< ::medibus::LoopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::medibus::LoopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::medibus::DelimitedLoopRequest*
Arena::CreateMaybeMessage< ::medibus::DelimitedLoopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::medibus::DelimitedLoopRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
