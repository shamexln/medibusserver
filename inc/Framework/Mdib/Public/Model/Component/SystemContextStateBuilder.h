/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Component/SystemContextState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref SystemContextState
 * @ingroup Mdib
 */
class SystemContextStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref SystemContextState
        using BuiltType = SystemContextState;

        /// @brief Builder based on given immutable @ref SystemContextState
        explicit SystemContextStateBuilder(const SystemContextState& systemContextState=SystemContextState());

        /// @brief Builder based on given immutable @ref SystemContextState
        explicit SystemContextStateBuilder(const DFL::NotNull<SharedPtr<SystemContextState>>& systemContextState);

        /// @brief Overwrite all values with given immutable @ref SystemContextState
        SystemContextStateBuilder& operator=(const SystemContextState& systemContextState);

        /// @brief Explicit conversion to immutable @ref SystemContextState
        SystemContextState build() const;

        /// @brief Test whether the builder differs from the immutable @ref SystemContextState
        bool isChanged(const SystemContextState& base) const;

        /// @brief Setter for activationState
        /// @{
        SystemContextStateBuilder& activationState(ComponentActivation activationState);
        /// @}

        /// @brief Setter for extensions
        /// @{
        SystemContextStateBuilder& extensions(const ExtensionTypes& extensions);
        SystemContextStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for activationState
        /// @{
        ComponentActivation& activationState();
        ComponentActivation activationState() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        ComponentActivation m_activationState;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const SystemContextState& lhs, const SystemContextState& rhs);
DFL_MDIB_EXPIMP bool operator==(const SystemContextStateBuilder& lhs, const SystemContextStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const SystemContextStateBuilder& lhs, const SystemContextState& rhs);
bool operator==(const SystemContextState& lhs, const SystemContextStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const SystemContextState& lhs, const SystemContextState& rhs);
bool operator!=(const SystemContextStateBuilder& lhs, const SystemContextStateBuilder& rhs);
bool operator!=(const SystemContextState& lhs, const SystemContextStateBuilder& rhs);
bool operator!=(const SystemContextStateBuilder& lhs, const SystemContextState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref SystemContextState
 * @ingroup Mdib
 */
/// @{
SystemContextStateBuilder getBuilder(const SystemContextState& systemContextState);
SystemContextStateBuilder getBuilder(const DFL::NotNull<SharedPtr<SystemContextState>>& systemContextState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const SystemContextState& lhs, const SystemContextState& rhs);

inline SystemContextStateBuilder::SystemContextStateBuilder(const SystemContextState& systemContextState) :
    m_activationState(systemContextState.activationState()),
    m_extensions(systemContextState.extensions())
{
}

inline SystemContextStateBuilder::SystemContextStateBuilder(const DFL::NotNull<SharedPtr<SystemContextState>>& systemContextState) :
    m_activationState(systemContextState->activationState()),
    m_extensions(systemContextState->extensions())
{
}

inline SystemContextStateBuilder& SystemContextStateBuilder::operator=(const SystemContextState& systemContextState)
{
    m_activationState = systemContextState.activationState();
    m_extensions = systemContextState.extensions();
    return *this;
}

inline SystemContextState SystemContextStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return SystemContextState(m_activationState, m_extensions);
}

inline bool SystemContextStateBuilder::isChanged(const SystemContextState& base) const
{
    return *this != base;
}

inline SystemContextStateBuilder& SystemContextStateBuilder::activationState(ComponentActivation activationState)
{
    m_activationState = activationState;
    return *this;
}

inline ComponentActivation& SystemContextStateBuilder::activationState()
{
    return m_activationState;
}

inline ComponentActivation SystemContextStateBuilder::activationState() const
{
    return m_activationState;
}

inline SystemContextStateBuilder& SystemContextStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline SystemContextStateBuilder& SystemContextStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& SystemContextStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& SystemContextStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const SystemContextState& lhs, const SystemContextStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const SystemContextStateBuilder& lhs, const SystemContextStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SystemContextState& lhs, const SystemContextStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SystemContextStateBuilder& lhs, const SystemContextState& rhs)
{
    return !(lhs == rhs);
}

inline SystemContextStateBuilder getBuilder(const SystemContextState& systemContextState)
{
    return SystemContextStateBuilder(systemContextState);
}

inline SystemContextStateBuilder getBuilder(const DFL::NotNull<SharedPtr<SystemContextState>>& systemContextState)
{
    return SystemContextStateBuilder(systemContextState);
}

}
}
