/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <Framework/Mdib/Public/Model/Component/BatteryState.h>
#include <Framework/Chrono/Public/DurationSerialize.h>
#include <Framework/Mdib/Public/Model/Component/CalibrationInfoSerialize.h>
#include <Framework/Mdib/Public/Model/Component/PhysicalConnectorInfoSerialize.h>
#include <Framework/Mdib/Public/Model/ExtensionTypeSerialize.h>
#include <Framework/Mdib/Public/Model/MeasurementSerialize.h>
#include <Framework/Utils/Public/SerializationHelper.h>

#include <boost/serialization/nvp.hpp>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/version.hpp>
#include <boost/serialization/optional.hpp>
#include <boost/serialization/vector.hpp>

#include <utility>

BOOST_SERIALIZATION_SPLIT_FREE(::DFL::Mdib::BatteryState)

BOOST_CLASS_VERSION(::DFL::Mdib::BatteryState, 0)

BOOST_CLASS_TRACKING(::DFL::Mdib::BatteryState, boost::serialization::track_never)

namespace boost
{
namespace serialization
{
/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void save(Archive& ar, const ::DFL::Mdib::BatteryState& src, const unsigned int /*fileVersion*/)
{
    const auto& activationState = src.activationState();
    ar & make_nvp("ActivationState", activationState);

    const auto& operatingHours = src.operatingHours();
    ar & make_nvp("OperatingHours", operatingHours);

    const auto& operatingCycles = src.operatingCycles();
    ar & make_nvp("OperatingCycles", operatingCycles);

    const auto& calibrationInfo = src.calibrationInfo();
    ar & make_nvp("CalibrationInfo", calibrationInfo);

    const auto& nextCalibrationInfo = src.nextCalibrationInfo();
    ar & make_nvp("NextCalibrationInfo", nextCalibrationInfo);

    const auto& physicalConnector = src.physicalConnector();
    ar & make_nvp("PhysicalConnector", physicalConnector);

    const auto& chargeStatus = src.chargeStatus();
    ar & make_nvp("ChargeStatus", chargeStatus);

    const auto& chargeCycles = src.chargeCycles();
    ar & make_nvp("ChargeCycles", chargeCycles);

    const auto& capacityRemaining = src.capacityRemaining();
    DFL::Serialization::saveNvpOptional(ar, "CapacityRemaining", capacityRemaining);

    const auto& voltage = src.voltage();
    DFL::Serialization::saveNvpOptional(ar, "Voltage", voltage);

    const auto& current = src.current();
    DFL::Serialization::saveNvpOptional(ar, "Current", current);

    const auto& temperature = src.temperature();
    DFL::Serialization::saveNvpOptional(ar, "Temperature", temperature);

    const auto& remainingBatteryTime = src.remainingBatteryTime();
    DFL::Serialization::saveNvpOptional(ar, "RemainingBatteryTime", remainingBatteryTime);

    const auto& extensions = src.extensions();
    ar & make_nvp("Extensions", extensions);
}

/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void load_construct_data(Archive& ar, ::DFL::Mdib::BatteryState* dst, const unsigned int /*version*/)
{
    ::DFL::Mdib::ComponentActivation activationState{};
    ar & make_nvp("ActivationState", activationState);

    boost::optional<::DFL::Chrono::Hours> operatingHours{};
    ar & make_nvp("OperatingHours", operatingHours);

    boost::optional<::DFL::Mdib::OperatingCycles> operatingCycles{};
    ar & make_nvp("OperatingCycles", operatingCycles);

    boost::optional<::DFL::Mdib::CalibrationInfo> calibrationInfo{};
    ar & make_nvp("CalibrationInfo", calibrationInfo);

    boost::optional<::DFL::Mdib::CalibrationInfo> nextCalibrationInfo{};
    ar & make_nvp("NextCalibrationInfo", nextCalibrationInfo);

    boost::optional<::DFL::Mdib::PhysicalConnectorInfo> physicalConnector{};
    ar & make_nvp("PhysicalConnector", physicalConnector);

    boost::optional<::DFL::Mdib::ChargeStatus> chargeStatus{};
    ar & make_nvp("ChargeStatus", chargeStatus);

    boost::optional<::DFL::Mdib::ChargeCycles> chargeCycles{};
    ar & make_nvp("ChargeCycles", chargeCycles);

    boost::optional<::DFL::Mdib::Measurement> capacityRemaining{};
    DFL::Serialization::loadNvpOptional(ar, "CapacityRemaining", capacityRemaining);

    boost::optional<::DFL::Mdib::Measurement> voltage{};
    DFL::Serialization::loadNvpOptional(ar, "Voltage", voltage);

    boost::optional<::DFL::Mdib::Measurement> current{};
    DFL::Serialization::loadNvpOptional(ar, "Current", current);

    boost::optional<::DFL::Mdib::Measurement> temperature{};
    DFL::Serialization::loadNvpOptional(ar, "Temperature", temperature);

    boost::optional<::DFL::Mdib::Measurement> remainingBatteryTime{};
    DFL::Serialization::loadNvpOptional(ar, "RemainingBatteryTime", remainingBatteryTime);

    ::DFL::Mdib::ExtensionTypes extensions{};
    ar & make_nvp("Extensions", extensions);

    ::new(dst) ::DFL::Mdib::BatteryState(
        activationState,
        operatingHours,
        operatingCycles,
        calibrationInfo,
        nextCalibrationInfo,
        physicalConnector,
        chargeStatus,
        chargeCycles,
        capacityRemaining,
        voltage,
        current,
        temperature,
        remainingBatteryTime,
        std::move(extensions));
}

/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void load(Archive& /*ar*/, ::DFL::Mdib::BatteryState& /*dst*/, const unsigned int /*version*/)
{
}

}
}
