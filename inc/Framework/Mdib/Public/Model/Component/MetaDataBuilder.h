/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Component/MetaData.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref MetaData
 * @ingroup Mdib
 */
class MetaDataBuilder
{
    public:
        /// @brief Typedef to the immutable @ref MetaData
        using BuiltType = MetaData;

        /// @brief Builder based on given immutable @ref MetaData
        explicit MetaDataBuilder(const MetaData& metaData=MetaData());

        /// @brief Builder based on given immutable @ref MetaData
        explicit MetaDataBuilder(const DFL::NotNull<SharedPtr<MetaData>>& metaData);

        /// @brief Overwrite all values with given immutable @ref MetaData
        MetaDataBuilder& operator=(const MetaData& metaData);

        /// @brief Explicit conversion to immutable @ref MetaData
        MetaData build() const;

        /// @brief Test whether the builder differs from the immutable @ref MetaData
        bool isChanged(const MetaData& base) const;

        /// @brief Setter for udis
        /// @{
        MetaDataBuilder& udis(const Udis& udis);
        MetaDataBuilder& udis(Udis&& udis);
        /// @}

        /// @brief Setter for lotNumber
        /// @{
        MetaDataBuilder& lotNumber(const Locale::Utf8& lotNumber);
        MetaDataBuilder& lotNumber(Locale::Utf8&& lotNumber);
        /// @}

        /// @brief Setter for manufacturer
        /// @{
        MetaDataBuilder& manufacturer(const LocalizedTexts& manufacturer);
        MetaDataBuilder& manufacturer(LocalizedTexts&& manufacturer);
        /// @}

        /// @brief Setter for manufactureDate
        /// @{
        MetaDataBuilder& manufactureDate(const boost::optional<Timestamp>& manufactureDate);
        MetaDataBuilder& manufactureDate(boost::optional<Timestamp>&& manufactureDate);
        /// @}

        /// @brief Setter for expirationDate
        /// @{
        MetaDataBuilder& expirationDate(const boost::optional<Timestamp>& expirationDate);
        MetaDataBuilder& expirationDate(boost::optional<Timestamp>&& expirationDate);
        /// @}

        /// @brief Setter for modelName
        /// @{
        MetaDataBuilder& modelName(const LocalizedTexts& modelName);
        MetaDataBuilder& modelName(LocalizedTexts&& modelName);
        /// @}

        /// @brief Setter for modelNumber
        /// @{
        MetaDataBuilder& modelNumber(const Locale::Utf8& modelNumber);
        MetaDataBuilder& modelNumber(Locale::Utf8&& modelNumber);
        /// @}

        /// @brief Setter for serialNumbers
        /// @{
        MetaDataBuilder& serialNumbers(const SerialNumbers& serialNumbers);
        MetaDataBuilder& serialNumbers(SerialNumbers&& serialNumbers);
        /// @}

        /// @brief Setter for extensions
        /// @{
        MetaDataBuilder& extensions(const ExtensionTypes& extensions);
        MetaDataBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for udis
        /// @{
        Udis& udis();
        const Udis& udis() const;
        /// @}

        /// @brief Getter for lotNumber
        /// @{
        Locale::Utf8& lotNumber();
        const Locale::Utf8& lotNumber() const;
        /// @}

        /// @brief Getter for manufacturer
        /// @{
        LocalizedTexts& manufacturer();
        const LocalizedTexts& manufacturer() const;
        /// @}

        /// @brief Getter for manufactureDate
        /// @{
        boost::optional<Timestamp>& manufactureDate();
        const boost::optional<Timestamp>& manufactureDate() const;
        /// @}

        /// @brief Getter for expirationDate
        /// @{
        boost::optional<Timestamp>& expirationDate();
        const boost::optional<Timestamp>& expirationDate() const;
        /// @}

        /// @brief Getter for modelName
        /// @{
        LocalizedTexts& modelName();
        const LocalizedTexts& modelName() const;
        /// @}

        /// @brief Getter for modelNumber
        /// @{
        Locale::Utf8& modelNumber();
        const Locale::Utf8& modelNumber() const;
        /// @}

        /// @brief Getter for serialNumbers
        /// @{
        SerialNumbers& serialNumbers();
        const SerialNumbers& serialNumbers() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        Udis m_udis;
        Locale::Utf8 m_lotNumber;
        LocalizedTexts m_manufacturer;
        boost::optional<Timestamp> m_manufactureDate;
        boost::optional<Timestamp> m_expirationDate;
        LocalizedTexts m_modelName;
        Locale::Utf8 m_modelNumber;
        SerialNumbers m_serialNumbers;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const MetaData& lhs, const MetaData& rhs);
DFL_MDIB_EXPIMP bool operator==(const MetaDataBuilder& lhs, const MetaDataBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const MetaDataBuilder& lhs, const MetaData& rhs);
bool operator==(const MetaData& lhs, const MetaDataBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const MetaData& lhs, const MetaData& rhs);
bool operator!=(const MetaDataBuilder& lhs, const MetaDataBuilder& rhs);
bool operator!=(const MetaData& lhs, const MetaDataBuilder& rhs);
bool operator!=(const MetaDataBuilder& lhs, const MetaData& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref MetaData
 * @ingroup Mdib
 */
/// @{
MetaDataBuilder getBuilder(const MetaData& metaData);
MetaDataBuilder getBuilder(const DFL::NotNull<SharedPtr<MetaData>>& metaData);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const MetaData& lhs, const MetaData& rhs);

inline MetaDataBuilder::MetaDataBuilder(const MetaData& metaData) :
    m_udis(metaData.udis()),
    m_lotNumber(metaData.lotNumber()),
    m_manufacturer(metaData.manufacturer()),
    m_manufactureDate(metaData.manufactureDate()),
    m_expirationDate(metaData.expirationDate()),
    m_modelName(metaData.modelName()),
    m_modelNumber(metaData.modelNumber()),
    m_serialNumbers(metaData.serialNumbers()),
    m_extensions(metaData.extensions())
{
}

inline MetaDataBuilder::MetaDataBuilder(const DFL::NotNull<SharedPtr<MetaData>>& metaData) :
    m_udis(metaData->udis()),
    m_lotNumber(metaData->lotNumber()),
    m_manufacturer(metaData->manufacturer()),
    m_manufactureDate(metaData->manufactureDate()),
    m_expirationDate(metaData->expirationDate()),
    m_modelName(metaData->modelName()),
    m_modelNumber(metaData->modelNumber()),
    m_serialNumbers(metaData->serialNumbers()),
    m_extensions(metaData->extensions())
{
}

inline MetaDataBuilder& MetaDataBuilder::operator=(const MetaData& metaData)
{
    m_udis = metaData.udis();
    m_lotNumber = metaData.lotNumber();
    m_manufacturer = metaData.manufacturer();
    m_manufactureDate = metaData.manufactureDate();
    m_expirationDate = metaData.expirationDate();
    m_modelName = metaData.modelName();
    m_modelNumber = metaData.modelNumber();
    m_serialNumbers = metaData.serialNumbers();
    m_extensions = metaData.extensions();
    return *this;
}

inline MetaData MetaDataBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return MetaData(m_udis, m_lotNumber, m_manufacturer, m_manufactureDate, m_expirationDate, m_modelName, m_modelNumber, m_serialNumbers, m_extensions);
}

inline bool MetaDataBuilder::isChanged(const MetaData& base) const
{
    return *this != base;
}

inline MetaDataBuilder& MetaDataBuilder::udis(const Udis& udis)
{
    m_udis = udis;
    return *this;
}

inline MetaDataBuilder& MetaDataBuilder::udis(Udis&& udis)
{
    m_udis = std::move(udis);
    return *this;
}

inline Udis& MetaDataBuilder::udis()
{
    return m_udis;
}

inline const Udis& MetaDataBuilder::udis() const
{
    return m_udis;
}

inline MetaDataBuilder& MetaDataBuilder::lotNumber(const Locale::Utf8& lotNumber)
{
    m_lotNumber = lotNumber;
    return *this;
}

inline MetaDataBuilder& MetaDataBuilder::lotNumber(Locale::Utf8&& lotNumber)
{
    m_lotNumber = std::move(lotNumber);
    return *this;
}

inline Locale::Utf8& MetaDataBuilder::lotNumber()
{
    return m_lotNumber;
}

inline const Locale::Utf8& MetaDataBuilder::lotNumber() const
{
    return m_lotNumber;
}

inline MetaDataBuilder& MetaDataBuilder::manufacturer(const LocalizedTexts& manufacturer)
{
    m_manufacturer = manufacturer;
    return *this;
}

inline MetaDataBuilder& MetaDataBuilder::manufacturer(LocalizedTexts&& manufacturer)
{
    m_manufacturer = std::move(manufacturer);
    return *this;
}

inline LocalizedTexts& MetaDataBuilder::manufacturer()
{
    return m_manufacturer;
}

inline const LocalizedTexts& MetaDataBuilder::manufacturer() const
{
    return m_manufacturer;
}

inline MetaDataBuilder& MetaDataBuilder::manufactureDate(const boost::optional<Timestamp>& manufactureDate)
{
    m_manufactureDate = manufactureDate;
    return *this;
}

inline MetaDataBuilder& MetaDataBuilder::manufactureDate(boost::optional<Timestamp>&& manufactureDate)
{
    m_manufactureDate = std::move(manufactureDate);
    return *this;
}

inline boost::optional<Timestamp>& MetaDataBuilder::manufactureDate()
{
    return m_manufactureDate;
}

inline const boost::optional<Timestamp>& MetaDataBuilder::manufactureDate() const
{
    return m_manufactureDate;
}

inline MetaDataBuilder& MetaDataBuilder::expirationDate(const boost::optional<Timestamp>& expirationDate)
{
    m_expirationDate = expirationDate;
    return *this;
}

inline MetaDataBuilder& MetaDataBuilder::expirationDate(boost::optional<Timestamp>&& expirationDate)
{
    m_expirationDate = std::move(expirationDate);
    return *this;
}

inline boost::optional<Timestamp>& MetaDataBuilder::expirationDate()
{
    return m_expirationDate;
}

inline const boost::optional<Timestamp>& MetaDataBuilder::expirationDate() const
{
    return m_expirationDate;
}

inline MetaDataBuilder& MetaDataBuilder::modelName(const LocalizedTexts& modelName)
{
    m_modelName = modelName;
    return *this;
}

inline MetaDataBuilder& MetaDataBuilder::modelName(LocalizedTexts&& modelName)
{
    m_modelName = std::move(modelName);
    return *this;
}

inline LocalizedTexts& MetaDataBuilder::modelName()
{
    return m_modelName;
}

inline const LocalizedTexts& MetaDataBuilder::modelName() const
{
    return m_modelName;
}

inline MetaDataBuilder& MetaDataBuilder::modelNumber(const Locale::Utf8& modelNumber)
{
    m_modelNumber = modelNumber;
    return *this;
}

inline MetaDataBuilder& MetaDataBuilder::modelNumber(Locale::Utf8&& modelNumber)
{
    m_modelNumber = std::move(modelNumber);
    return *this;
}

inline Locale::Utf8& MetaDataBuilder::modelNumber()
{
    return m_modelNumber;
}

inline const Locale::Utf8& MetaDataBuilder::modelNumber() const
{
    return m_modelNumber;
}

inline MetaDataBuilder& MetaDataBuilder::serialNumbers(const SerialNumbers& serialNumbers)
{
    m_serialNumbers = serialNumbers;
    return *this;
}

inline MetaDataBuilder& MetaDataBuilder::serialNumbers(SerialNumbers&& serialNumbers)
{
    m_serialNumbers = std::move(serialNumbers);
    return *this;
}

inline SerialNumbers& MetaDataBuilder::serialNumbers()
{
    return m_serialNumbers;
}

inline const SerialNumbers& MetaDataBuilder::serialNumbers() const
{
    return m_serialNumbers;
}

inline MetaDataBuilder& MetaDataBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline MetaDataBuilder& MetaDataBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& MetaDataBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& MetaDataBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const MetaData& lhs, const MetaDataBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const MetaDataBuilder& lhs, const MetaDataBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const MetaData& lhs, const MetaDataBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const MetaDataBuilder& lhs, const MetaData& rhs)
{
    return !(lhs == rhs);
}

inline MetaDataBuilder getBuilder(const MetaData& metaData)
{
    return MetaDataBuilder(metaData);
}

inline MetaDataBuilder getBuilder(const DFL::NotNull<SharedPtr<MetaData>>& metaData)
{
    return MetaDataBuilder(metaData);
}

}
}
