/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <Framework/Mdib/Public/Model/Component/CalibrationInfo.h>
#include <Framework/Chrono/Public/SystemTimeSerialize.h>
#include <Framework/Mdib/Public/Model/Component/CalibrationDocumentationSerialize.h>
#include <Framework/Mdib/Public/Model/ExtensionTypeSerialize.h>
#include <Framework/Utils/Public/SerializationHelper.h>

#include <boost/serialization/nvp.hpp>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/version.hpp>
#include <boost/serialization/optional.hpp>
#include <boost/serialization/vector.hpp>

#include <utility>

BOOST_SERIALIZATION_SPLIT_FREE(::DFL::Mdib::CalibrationInfo)

BOOST_CLASS_VERSION(::DFL::Mdib::CalibrationInfo, 0)

BOOST_CLASS_TRACKING(::DFL::Mdib::CalibrationInfo, boost::serialization::track_never)

namespace boost
{
namespace serialization
{
/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void save(Archive& ar, const ::DFL::Mdib::CalibrationInfo& src, const unsigned int /*fileVersion*/)
{
    const auto& componentCalibrationState = src.componentCalibrationState();
    ar & make_nvp("ComponentCalibrationState", componentCalibrationState);

    const auto& type = src.type();
    ar & make_nvp("Type", type);

    const auto& time = src.time();
    ar & make_nvp("Time", time);

    const auto& calibrationDocumentation = src.calibrationDocumentation();
    ar & make_nvp("CalibrationDocumentation", calibrationDocumentation);

    const auto& extensions = src.extensions();
    ar & make_nvp("Extensions", extensions);
}

/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void load(Archive& ar, ::DFL::Mdib::CalibrationInfo& dst, const unsigned int /*version*/)
{
    boost::optional<::DFL::Mdib::CalibrationState> componentCalibrationState{};
    ar & make_nvp("ComponentCalibrationState", componentCalibrationState);

    ::DFL::Mdib::CalibrationType type{};
    ar & make_nvp("Type", type);

    boost::optional<::DFL::Mdib::Timestamp> time{};
    ar & make_nvp("Time", time);

    ::DFL::Mdib::CalibrationDocumentations calibrationDocumentation{};
    ar & make_nvp("CalibrationDocumentation", calibrationDocumentation);

    ::DFL::Mdib::ExtensionTypes extensions{};
    ar & make_nvp("Extensions", extensions);

    dst = ::DFL::Mdib::CalibrationInfo(
        componentCalibrationState,
        type,
        time,
        calibrationDocumentation,
        std::move(extensions));
}

}
}
