/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Component/ClockDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref ClockDescriptor
 * @ingroup Mdib
 */
class ClockDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref ClockDescriptor
        using BuiltType = ClockDescriptor;

        /// @brief Builder based on given immutable @ref ClockDescriptor
        explicit ClockDescriptorBuilder(const ClockDescriptor& clockDescriptor=ClockDescriptor());

        /// @brief Builder based on given immutable @ref ClockDescriptor
        explicit ClockDescriptorBuilder(const DFL::NotNull<SharedPtr<ClockDescriptor>>& clockDescriptor);

        /// @brief Overwrite all values with given immutable @ref ClockDescriptor
        ClockDescriptorBuilder& operator=(const ClockDescriptor& clockDescriptor);

        /// @brief Explicit conversion to immutable @ref ClockDescriptor
        ClockDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref ClockDescriptor
        bool isChanged(const ClockDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        ClockDescriptorBuilder& safetyClassification(SafetyClassification safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        ClockDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        ClockDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for productionSpecifications
        /// @{
        ClockDescriptorBuilder& productionSpecifications(const ProductionSpecifications& productionSpecifications);
        ClockDescriptorBuilder& productionSpecifications(ProductionSpecifications&& productionSpecifications);
        /// @}

        /// @brief Setter for resolution
        /// @{
        ClockDescriptorBuilder& resolution(const boost::optional<Duration>& resolution);
        ClockDescriptorBuilder& resolution(boost::optional<Duration>&& resolution);
        /// @}

        /// @brief Setter for timeProtocol
        /// @{
        ClockDescriptorBuilder& timeProtocol(const CodedValues& timeProtocol);
        ClockDescriptorBuilder& timeProtocol(CodedValues&& timeProtocol);
        /// @}

        /// @brief Setter for extensions
        /// @{
        ClockDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        ClockDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        SafetyClassification& safetyClassification();
        SafetyClassification safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for productionSpecifications
        /// @{
        ProductionSpecifications& productionSpecifications();
        const ProductionSpecifications& productionSpecifications() const;
        /// @}

        /// @brief Getter for resolution
        /// @{
        boost::optional<Duration>& resolution();
        const boost::optional<Duration>& resolution() const;
        /// @}

        /// @brief Getter for timeProtocol
        /// @{
        CodedValues& timeProtocol();
        const CodedValues& timeProtocol() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        SafetyClassification m_safetyClassification;
        boost::optional<CodedValue> m_type;
        ProductionSpecifications m_productionSpecifications;
        boost::optional<Duration> m_resolution;
        CodedValues m_timeProtocol;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const ClockDescriptor& lhs, const ClockDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const ClockDescriptorBuilder& lhs, const ClockDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const ClockDescriptorBuilder& lhs, const ClockDescriptor& rhs);
bool operator==(const ClockDescriptor& lhs, const ClockDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const ClockDescriptor& lhs, const ClockDescriptor& rhs);
bool operator!=(const ClockDescriptorBuilder& lhs, const ClockDescriptorBuilder& rhs);
bool operator!=(const ClockDescriptor& lhs, const ClockDescriptorBuilder& rhs);
bool operator!=(const ClockDescriptorBuilder& lhs, const ClockDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref ClockDescriptor
 * @ingroup Mdib
 */
/// @{
ClockDescriptorBuilder getBuilder(const ClockDescriptor& clockDescriptor);
ClockDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<ClockDescriptor>>& clockDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const ClockDescriptor& lhs, const ClockDescriptor& rhs);

inline ClockDescriptorBuilder::ClockDescriptorBuilder(const ClockDescriptor& clockDescriptor) :
    m_safetyClassification(clockDescriptor.safetyClassification()),
    m_type(clockDescriptor.type()),
    m_productionSpecifications(clockDescriptor.productionSpecifications()),
    m_resolution(clockDescriptor.resolution()),
    m_timeProtocol(clockDescriptor.timeProtocol()),
    m_extensions(clockDescriptor.extensions())
{
}

inline ClockDescriptorBuilder::ClockDescriptorBuilder(const DFL::NotNull<SharedPtr<ClockDescriptor>>& clockDescriptor) :
    m_safetyClassification(clockDescriptor->safetyClassification()),
    m_type(clockDescriptor->type()),
    m_productionSpecifications(clockDescriptor->productionSpecifications()),
    m_resolution(clockDescriptor->resolution()),
    m_timeProtocol(clockDescriptor->timeProtocol()),
    m_extensions(clockDescriptor->extensions())
{
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::operator=(const ClockDescriptor& clockDescriptor)
{
    m_safetyClassification = clockDescriptor.safetyClassification();
    m_type = clockDescriptor.type();
    m_productionSpecifications = clockDescriptor.productionSpecifications();
    m_resolution = clockDescriptor.resolution();
    m_timeProtocol = clockDescriptor.timeProtocol();
    m_extensions = clockDescriptor.extensions();
    return *this;
}

inline ClockDescriptor ClockDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return ClockDescriptor(m_safetyClassification, m_type, m_productionSpecifications, m_resolution, m_timeProtocol, m_extensions);
}

inline bool ClockDescriptorBuilder::isChanged(const ClockDescriptor& base) const
{
    return *this != base;
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::safetyClassification(SafetyClassification safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline SafetyClassification& ClockDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline SafetyClassification ClockDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& ClockDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& ClockDescriptorBuilder::type() const
{
    return m_type;
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::productionSpecifications(const ProductionSpecifications& productionSpecifications)
{
    m_productionSpecifications = productionSpecifications;
    return *this;
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::productionSpecifications(ProductionSpecifications&& productionSpecifications)
{
    m_productionSpecifications = std::move(productionSpecifications);
    return *this;
}

inline ProductionSpecifications& ClockDescriptorBuilder::productionSpecifications()
{
    return m_productionSpecifications;
}

inline const ProductionSpecifications& ClockDescriptorBuilder::productionSpecifications() const
{
    return m_productionSpecifications;
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::resolution(const boost::optional<Duration>& resolution)
{
    m_resolution = resolution;
    return *this;
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::resolution(boost::optional<Duration>&& resolution)
{
    m_resolution = std::move(resolution);
    return *this;
}

inline boost::optional<Duration>& ClockDescriptorBuilder::resolution()
{
    return m_resolution;
}

inline const boost::optional<Duration>& ClockDescriptorBuilder::resolution() const
{
    return m_resolution;
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::timeProtocol(const CodedValues& timeProtocol)
{
    m_timeProtocol = timeProtocol;
    return *this;
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::timeProtocol(CodedValues&& timeProtocol)
{
    m_timeProtocol = std::move(timeProtocol);
    return *this;
}

inline CodedValues& ClockDescriptorBuilder::timeProtocol()
{
    return m_timeProtocol;
}

inline const CodedValues& ClockDescriptorBuilder::timeProtocol() const
{
    return m_timeProtocol;
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline ClockDescriptorBuilder& ClockDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& ClockDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& ClockDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const ClockDescriptor& lhs, const ClockDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const ClockDescriptorBuilder& lhs, const ClockDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const ClockDescriptor& lhs, const ClockDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const ClockDescriptorBuilder& lhs, const ClockDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline ClockDescriptorBuilder getBuilder(const ClockDescriptor& clockDescriptor)
{
    return ClockDescriptorBuilder(clockDescriptor);
}

inline ClockDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<ClockDescriptor>>& clockDescriptor)
{
    return ClockDescriptorBuilder(clockDescriptor);
}

}
}
