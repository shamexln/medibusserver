/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Component/MdsDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref MdsDescriptor
 * @ingroup Mdib
 */
class MdsDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref MdsDescriptor
        using BuiltType = MdsDescriptor;

        /// @brief Builder based on given immutable @ref MdsDescriptor
        explicit MdsDescriptorBuilder(const MdsDescriptor& mdsDescriptor=MdsDescriptor());

        /// @brief Builder based on given immutable @ref MdsDescriptor
        explicit MdsDescriptorBuilder(const DFL::NotNull<SharedPtr<MdsDescriptor>>& mdsDescriptor);

        /// @brief Overwrite all values with given immutable @ref MdsDescriptor
        MdsDescriptorBuilder& operator=(const MdsDescriptor& mdsDescriptor);

        /// @brief Explicit conversion to immutable @ref MdsDescriptor
        MdsDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref MdsDescriptor
        bool isChanged(const MdsDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        MdsDescriptorBuilder& safetyClassification(SafetyClassification safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        MdsDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        MdsDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for productionSpecifications
        /// @{
        MdsDescriptorBuilder& productionSpecifications(const ProductionSpecifications& productionSpecifications);
        MdsDescriptorBuilder& productionSpecifications(ProductionSpecifications&& productionSpecifications);
        /// @}

        /// @brief Setter for metaData
        /// @{
        MdsDescriptorBuilder& metaData(const boost::optional<MetaData>& metaData);
        MdsDescriptorBuilder& metaData(boost::optional<MetaData>&& metaData);
        /// @}

        /// @brief Setter for approvedJurisdictions
        /// @{
        MdsDescriptorBuilder& approvedJurisdictions(const boost::optional<InstanceIdentifiers>& approvedJurisdictions);
        MdsDescriptorBuilder& approvedJurisdictions(boost::optional<InstanceIdentifiers>&& approvedJurisdictions);
        /// @}

        /// @brief Setter for extensions
        /// @{
        MdsDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        MdsDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        SafetyClassification& safetyClassification();
        SafetyClassification safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for productionSpecifications
        /// @{
        ProductionSpecifications& productionSpecifications();
        const ProductionSpecifications& productionSpecifications() const;
        /// @}

        /// @brief Getter for metaData
        /// @{
        boost::optional<MetaData>& metaData();
        const boost::optional<MetaData>& metaData() const;
        /// @}

        /// @brief Getter for approvedJurisdictions
        /// @{
        boost::optional<InstanceIdentifiers>& approvedJurisdictions();
        const boost::optional<InstanceIdentifiers>& approvedJurisdictions() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        SafetyClassification m_safetyClassification;
        boost::optional<CodedValue> m_type;
        ProductionSpecifications m_productionSpecifications;
        boost::optional<MetaData> m_metaData;
        boost::optional<InstanceIdentifiers> m_approvedJurisdictions;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const MdsDescriptor& lhs, const MdsDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const MdsDescriptorBuilder& lhs, const MdsDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const MdsDescriptorBuilder& lhs, const MdsDescriptor& rhs);
bool operator==(const MdsDescriptor& lhs, const MdsDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const MdsDescriptor& lhs, const MdsDescriptor& rhs);
bool operator!=(const MdsDescriptorBuilder& lhs, const MdsDescriptorBuilder& rhs);
bool operator!=(const MdsDescriptor& lhs, const MdsDescriptorBuilder& rhs);
bool operator!=(const MdsDescriptorBuilder& lhs, const MdsDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref MdsDescriptor
 * @ingroup Mdib
 */
/// @{
MdsDescriptorBuilder getBuilder(const MdsDescriptor& mdsDescriptor);
MdsDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<MdsDescriptor>>& mdsDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const MdsDescriptor& lhs, const MdsDescriptor& rhs);

inline MdsDescriptorBuilder::MdsDescriptorBuilder(const MdsDescriptor& mdsDescriptor) :
    m_safetyClassification(mdsDescriptor.safetyClassification()),
    m_type(mdsDescriptor.type()),
    m_productionSpecifications(mdsDescriptor.productionSpecifications()),
    m_metaData(mdsDescriptor.metaData()),
    m_approvedJurisdictions(mdsDescriptor.approvedJurisdictions()),
    m_extensions(mdsDescriptor.extensions())
{
}

inline MdsDescriptorBuilder::MdsDescriptorBuilder(const DFL::NotNull<SharedPtr<MdsDescriptor>>& mdsDescriptor) :
    m_safetyClassification(mdsDescriptor->safetyClassification()),
    m_type(mdsDescriptor->type()),
    m_productionSpecifications(mdsDescriptor->productionSpecifications()),
    m_metaData(mdsDescriptor->metaData()),
    m_approvedJurisdictions(mdsDescriptor->approvedJurisdictions()),
    m_extensions(mdsDescriptor->extensions())
{
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::operator=(const MdsDescriptor& mdsDescriptor)
{
    m_safetyClassification = mdsDescriptor.safetyClassification();
    m_type = mdsDescriptor.type();
    m_productionSpecifications = mdsDescriptor.productionSpecifications();
    m_metaData = mdsDescriptor.metaData();
    m_approvedJurisdictions = mdsDescriptor.approvedJurisdictions();
    m_extensions = mdsDescriptor.extensions();
    return *this;
}

inline MdsDescriptor MdsDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return MdsDescriptor(m_safetyClassification, m_type, m_productionSpecifications, m_metaData, m_approvedJurisdictions, m_extensions);
}

inline bool MdsDescriptorBuilder::isChanged(const MdsDescriptor& base) const
{
    return *this != base;
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::safetyClassification(SafetyClassification safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline SafetyClassification& MdsDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline SafetyClassification MdsDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& MdsDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& MdsDescriptorBuilder::type() const
{
    return m_type;
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::productionSpecifications(const ProductionSpecifications& productionSpecifications)
{
    m_productionSpecifications = productionSpecifications;
    return *this;
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::productionSpecifications(ProductionSpecifications&& productionSpecifications)
{
    m_productionSpecifications = std::move(productionSpecifications);
    return *this;
}

inline ProductionSpecifications& MdsDescriptorBuilder::productionSpecifications()
{
    return m_productionSpecifications;
}

inline const ProductionSpecifications& MdsDescriptorBuilder::productionSpecifications() const
{
    return m_productionSpecifications;
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::metaData(const boost::optional<MetaData>& metaData)
{
    m_metaData = metaData;
    return *this;
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::metaData(boost::optional<MetaData>&& metaData)
{
    m_metaData = std::move(metaData);
    return *this;
}

inline boost::optional<MetaData>& MdsDescriptorBuilder::metaData()
{
    return m_metaData;
}

inline const boost::optional<MetaData>& MdsDescriptorBuilder::metaData() const
{
    return m_metaData;
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::approvedJurisdictions(const boost::optional<InstanceIdentifiers>& approvedJurisdictions)
{
    m_approvedJurisdictions = approvedJurisdictions;
    return *this;
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::approvedJurisdictions(boost::optional<InstanceIdentifiers>&& approvedJurisdictions)
{
    m_approvedJurisdictions = std::move(approvedJurisdictions);
    return *this;
}

inline boost::optional<InstanceIdentifiers>& MdsDescriptorBuilder::approvedJurisdictions()
{
    return m_approvedJurisdictions;
}

inline const boost::optional<InstanceIdentifiers>& MdsDescriptorBuilder::approvedJurisdictions() const
{
    return m_approvedJurisdictions;
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline MdsDescriptorBuilder& MdsDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& MdsDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& MdsDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const MdsDescriptor& lhs, const MdsDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const MdsDescriptorBuilder& lhs, const MdsDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const MdsDescriptor& lhs, const MdsDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const MdsDescriptorBuilder& lhs, const MdsDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline MdsDescriptorBuilder getBuilder(const MdsDescriptor& mdsDescriptor)
{
    return MdsDescriptorBuilder(mdsDescriptor);
}

inline MdsDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<MdsDescriptor>>& mdsDescriptor)
{
    return MdsDescriptorBuilder(mdsDescriptor);
}

}
}
