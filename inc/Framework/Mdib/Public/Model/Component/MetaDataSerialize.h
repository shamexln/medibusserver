/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <Framework/Mdib/Public/Model/Component/MetaData.h>
#include <Framework/Chrono/Public/SystemTimeSerialize.h>
#include <Framework/Mdib/Public/Model/Component/UdiSerialize.h>
#include <Framework/Mdib/Public/Model/ExtensionTypeSerialize.h>
#include <Framework/Mdib/Public/Model/LocalizedTextSerialize.h>
#include <Framework/Utils/Public/SerializationHelper.h>
#include <Framework/Utils/Public/Utf8Serialize.h>

#include <boost/serialization/nvp.hpp>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/version.hpp>
#include <boost/serialization/optional.hpp>
#include <boost/serialization/vector.hpp>

#include <utility>

BOOST_SERIALIZATION_SPLIT_FREE(::DFL::Mdib::MetaData)

BOOST_CLASS_VERSION(::DFL::Mdib::MetaData, 0)

BOOST_CLASS_TRACKING(::DFL::Mdib::MetaData, boost::serialization::track_never)

namespace boost
{
namespace serialization
{
/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void save(Archive& ar, const ::DFL::Mdib::MetaData& src, const unsigned int /*fileVersion*/)
{
    const auto& udis = src.udis();
    ar & make_nvp("Udis", udis);

    const auto& lotNumber = src.lotNumber();
    ar & make_nvp("LotNumber", lotNumber);

    const auto& manufacturer = src.manufacturer();
    ar & make_nvp("Manufacturer", manufacturer);

    const auto& manufactureDate = src.manufactureDate();
    ar & make_nvp("ManufactureDate", manufactureDate);

    const auto& expirationDate = src.expirationDate();
    ar & make_nvp("ExpirationDate", expirationDate);

    const auto& modelName = src.modelName();
    ar & make_nvp("ModelName", modelName);

    const auto& modelNumber = src.modelNumber();
    ar & make_nvp("ModelNumber", modelNumber);

    const auto& serialNumbers = src.serialNumbers();
    ar & make_nvp("SerialNumbers", serialNumbers);

    const auto& extensions = src.extensions();
    ar & make_nvp("Extensions", extensions);
}

/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void load(Archive& ar, ::DFL::Mdib::MetaData& dst, const unsigned int /*version*/)
{
    ::DFL::Mdib::Udis udis{};
    ar & make_nvp("Udis", udis);

    ::DFL::Locale::Utf8 lotNumber{};
    ar & make_nvp("LotNumber", lotNumber);

    ::DFL::Mdib::LocalizedTexts manufacturer{};
    ar & make_nvp("Manufacturer", manufacturer);

    boost::optional<::DFL::Mdib::Timestamp> manufactureDate{};
    ar & make_nvp("ManufactureDate", manufactureDate);

    boost::optional<::DFL::Mdib::Timestamp> expirationDate{};
    ar & make_nvp("ExpirationDate", expirationDate);

    ::DFL::Mdib::LocalizedTexts modelName{};
    ar & make_nvp("ModelName", modelName);

    ::DFL::Locale::Utf8 modelNumber{};
    ar & make_nvp("ModelNumber", modelNumber);

    ::DFL::Mdib::SerialNumbers serialNumbers{};
    ar & make_nvp("SerialNumbers", serialNumbers);

    ::DFL::Mdib::ExtensionTypes extensions{};
    ar & make_nvp("Extensions", extensions);

    dst = ::DFL::Mdib::MetaData(
        udis,
        lotNumber,
        manufacturer,
        manufactureDate,
        expirationDate,
        modelName,
        modelNumber,
        serialNumbers,
        std::move(extensions));
}

}
}
