/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Component/SystemContextDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref SystemContextDescriptor
 * @ingroup Mdib
 */
class SystemContextDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref SystemContextDescriptor
        using BuiltType = SystemContextDescriptor;

        /// @brief Builder based on given immutable @ref SystemContextDescriptor
        explicit SystemContextDescriptorBuilder(const SystemContextDescriptor& systemContextDescriptor=SystemContextDescriptor());

        /// @brief Builder based on given immutable @ref SystemContextDescriptor
        explicit SystemContextDescriptorBuilder(const DFL::NotNull<SharedPtr<SystemContextDescriptor>>& systemContextDescriptor);

        /// @brief Overwrite all values with given immutable @ref SystemContextDescriptor
        SystemContextDescriptorBuilder& operator=(const SystemContextDescriptor& systemContextDescriptor);

        /// @brief Explicit conversion to immutable @ref SystemContextDescriptor
        SystemContextDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref SystemContextDescriptor
        bool isChanged(const SystemContextDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        SystemContextDescriptorBuilder& safetyClassification(SafetyClassification safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        SystemContextDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        SystemContextDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for productionSpecifications
        /// @{
        SystemContextDescriptorBuilder& productionSpecifications(const ProductionSpecifications& productionSpecifications);
        SystemContextDescriptorBuilder& productionSpecifications(ProductionSpecifications&& productionSpecifications);
        /// @}

        /// @brief Setter for extensions
        /// @{
        SystemContextDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        SystemContextDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        SafetyClassification& safetyClassification();
        SafetyClassification safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for productionSpecifications
        /// @{
        ProductionSpecifications& productionSpecifications();
        const ProductionSpecifications& productionSpecifications() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        SafetyClassification m_safetyClassification;
        boost::optional<CodedValue> m_type;
        ProductionSpecifications m_productionSpecifications;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const SystemContextDescriptor& lhs, const SystemContextDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const SystemContextDescriptorBuilder& lhs, const SystemContextDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const SystemContextDescriptorBuilder& lhs, const SystemContextDescriptor& rhs);
bool operator==(const SystemContextDescriptor& lhs, const SystemContextDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const SystemContextDescriptor& lhs, const SystemContextDescriptor& rhs);
bool operator!=(const SystemContextDescriptorBuilder& lhs, const SystemContextDescriptorBuilder& rhs);
bool operator!=(const SystemContextDescriptor& lhs, const SystemContextDescriptorBuilder& rhs);
bool operator!=(const SystemContextDescriptorBuilder& lhs, const SystemContextDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref SystemContextDescriptor
 * @ingroup Mdib
 */
/// @{
SystemContextDescriptorBuilder getBuilder(const SystemContextDescriptor& systemContextDescriptor);
SystemContextDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<SystemContextDescriptor>>& systemContextDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const SystemContextDescriptor& lhs, const SystemContextDescriptor& rhs);

inline SystemContextDescriptorBuilder::SystemContextDescriptorBuilder(const SystemContextDescriptor& systemContextDescriptor) :
    m_safetyClassification(systemContextDescriptor.safetyClassification()),
    m_type(systemContextDescriptor.type()),
    m_productionSpecifications(systemContextDescriptor.productionSpecifications()),
    m_extensions(systemContextDescriptor.extensions())
{
}

inline SystemContextDescriptorBuilder::SystemContextDescriptorBuilder(const DFL::NotNull<SharedPtr<SystemContextDescriptor>>& systemContextDescriptor) :
    m_safetyClassification(systemContextDescriptor->safetyClassification()),
    m_type(systemContextDescriptor->type()),
    m_productionSpecifications(systemContextDescriptor->productionSpecifications()),
    m_extensions(systemContextDescriptor->extensions())
{
}

inline SystemContextDescriptorBuilder& SystemContextDescriptorBuilder::operator=(const SystemContextDescriptor& systemContextDescriptor)
{
    m_safetyClassification = systemContextDescriptor.safetyClassification();
    m_type = systemContextDescriptor.type();
    m_productionSpecifications = systemContextDescriptor.productionSpecifications();
    m_extensions = systemContextDescriptor.extensions();
    return *this;
}

inline SystemContextDescriptor SystemContextDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return SystemContextDescriptor(m_safetyClassification, m_type, m_productionSpecifications, m_extensions);
}

inline bool SystemContextDescriptorBuilder::isChanged(const SystemContextDescriptor& base) const
{
    return *this != base;
}

inline SystemContextDescriptorBuilder& SystemContextDescriptorBuilder::safetyClassification(SafetyClassification safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline SafetyClassification& SystemContextDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline SafetyClassification SystemContextDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline SystemContextDescriptorBuilder& SystemContextDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline SystemContextDescriptorBuilder& SystemContextDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& SystemContextDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& SystemContextDescriptorBuilder::type() const
{
    return m_type;
}

inline SystemContextDescriptorBuilder& SystemContextDescriptorBuilder::productionSpecifications(const ProductionSpecifications& productionSpecifications)
{
    m_productionSpecifications = productionSpecifications;
    return *this;
}

inline SystemContextDescriptorBuilder& SystemContextDescriptorBuilder::productionSpecifications(ProductionSpecifications&& productionSpecifications)
{
    m_productionSpecifications = std::move(productionSpecifications);
    return *this;
}

inline ProductionSpecifications& SystemContextDescriptorBuilder::productionSpecifications()
{
    return m_productionSpecifications;
}

inline const ProductionSpecifications& SystemContextDescriptorBuilder::productionSpecifications() const
{
    return m_productionSpecifications;
}

inline SystemContextDescriptorBuilder& SystemContextDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline SystemContextDescriptorBuilder& SystemContextDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& SystemContextDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& SystemContextDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const SystemContextDescriptor& lhs, const SystemContextDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const SystemContextDescriptorBuilder& lhs, const SystemContextDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SystemContextDescriptor& lhs, const SystemContextDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SystemContextDescriptorBuilder& lhs, const SystemContextDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline SystemContextDescriptorBuilder getBuilder(const SystemContextDescriptor& systemContextDescriptor)
{
    return SystemContextDescriptorBuilder(systemContextDescriptor);
}

inline SystemContextDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<SystemContextDescriptor>>& systemContextDescriptor)
{
    return SystemContextDescriptorBuilder(systemContextDescriptor);
}

}
}
