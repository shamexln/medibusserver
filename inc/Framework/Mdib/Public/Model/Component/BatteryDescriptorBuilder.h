/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Component/BatteryDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref BatteryDescriptor
 * @ingroup Mdib
 */
class BatteryDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref BatteryDescriptor
        using BuiltType = BatteryDescriptor;

        /// @brief Builder based on given immutable @ref BatteryDescriptor
        explicit BatteryDescriptorBuilder(const BatteryDescriptor& batteryDescriptor=BatteryDescriptor());

        /// @brief Builder based on given immutable @ref BatteryDescriptor
        explicit BatteryDescriptorBuilder(const DFL::NotNull<SharedPtr<BatteryDescriptor>>& batteryDescriptor);

        /// @brief Overwrite all values with given immutable @ref BatteryDescriptor
        BatteryDescriptorBuilder& operator=(const BatteryDescriptor& batteryDescriptor);

        /// @brief Explicit conversion to immutable @ref BatteryDescriptor
        BatteryDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref BatteryDescriptor
        bool isChanged(const BatteryDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        BatteryDescriptorBuilder& safetyClassification(SafetyClassification safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        BatteryDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        BatteryDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for productionSpecifications
        /// @{
        BatteryDescriptorBuilder& productionSpecifications(const ProductionSpecifications& productionSpecifications);
        BatteryDescriptorBuilder& productionSpecifications(ProductionSpecifications&& productionSpecifications);
        /// @}

        /// @brief Setter for capacityFullCharge
        /// @{
        BatteryDescriptorBuilder& capacityFullCharge(const boost::optional<Measurement>& capacityFullCharge);
        BatteryDescriptorBuilder& capacityFullCharge(boost::optional<Measurement>&& capacityFullCharge);
        /// @}

        /// @brief Setter for capacitySpecified
        /// @{
        BatteryDescriptorBuilder& capacitySpecified(const boost::optional<Measurement>& capacitySpecified);
        BatteryDescriptorBuilder& capacitySpecified(boost::optional<Measurement>&& capacitySpecified);
        /// @}

        /// @brief Setter for voltageSpecified
        /// @{
        BatteryDescriptorBuilder& voltageSpecified(const boost::optional<Measurement>& voltageSpecified);
        BatteryDescriptorBuilder& voltageSpecified(boost::optional<Measurement>&& voltageSpecified);
        /// @}

        /// @brief Setter for extensions
        /// @{
        BatteryDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        BatteryDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        SafetyClassification& safetyClassification();
        SafetyClassification safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for productionSpecifications
        /// @{
        ProductionSpecifications& productionSpecifications();
        const ProductionSpecifications& productionSpecifications() const;
        /// @}

        /// @brief Getter for capacityFullCharge
        /// @{
        boost::optional<Measurement>& capacityFullCharge();
        const boost::optional<Measurement>& capacityFullCharge() const;
        /// @}

        /// @brief Getter for capacitySpecified
        /// @{
        boost::optional<Measurement>& capacitySpecified();
        const boost::optional<Measurement>& capacitySpecified() const;
        /// @}

        /// @brief Getter for voltageSpecified
        /// @{
        boost::optional<Measurement>& voltageSpecified();
        const boost::optional<Measurement>& voltageSpecified() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        SafetyClassification m_safetyClassification;
        boost::optional<CodedValue> m_type;
        ProductionSpecifications m_productionSpecifications;
        boost::optional<Measurement> m_capacityFullCharge;
        boost::optional<Measurement> m_capacitySpecified;
        boost::optional<Measurement> m_voltageSpecified;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const BatteryDescriptor& lhs, const BatteryDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const BatteryDescriptorBuilder& lhs, const BatteryDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const BatteryDescriptorBuilder& lhs, const BatteryDescriptor& rhs);
bool operator==(const BatteryDescriptor& lhs, const BatteryDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const BatteryDescriptor& lhs, const BatteryDescriptor& rhs);
bool operator!=(const BatteryDescriptorBuilder& lhs, const BatteryDescriptorBuilder& rhs);
bool operator!=(const BatteryDescriptor& lhs, const BatteryDescriptorBuilder& rhs);
bool operator!=(const BatteryDescriptorBuilder& lhs, const BatteryDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref BatteryDescriptor
 * @ingroup Mdib
 */
/// @{
BatteryDescriptorBuilder getBuilder(const BatteryDescriptor& batteryDescriptor);
BatteryDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<BatteryDescriptor>>& batteryDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const BatteryDescriptor& lhs, const BatteryDescriptor& rhs);

inline BatteryDescriptorBuilder::BatteryDescriptorBuilder(const BatteryDescriptor& batteryDescriptor) :
    m_safetyClassification(batteryDescriptor.safetyClassification()),
    m_type(batteryDescriptor.type()),
    m_productionSpecifications(batteryDescriptor.productionSpecifications()),
    m_capacityFullCharge(batteryDescriptor.capacityFullCharge()),
    m_capacitySpecified(batteryDescriptor.capacitySpecified()),
    m_voltageSpecified(batteryDescriptor.voltageSpecified()),
    m_extensions(batteryDescriptor.extensions())
{
}

inline BatteryDescriptorBuilder::BatteryDescriptorBuilder(const DFL::NotNull<SharedPtr<BatteryDescriptor>>& batteryDescriptor) :
    m_safetyClassification(batteryDescriptor->safetyClassification()),
    m_type(batteryDescriptor->type()),
    m_productionSpecifications(batteryDescriptor->productionSpecifications()),
    m_capacityFullCharge(batteryDescriptor->capacityFullCharge()),
    m_capacitySpecified(batteryDescriptor->capacitySpecified()),
    m_voltageSpecified(batteryDescriptor->voltageSpecified()),
    m_extensions(batteryDescriptor->extensions())
{
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::operator=(const BatteryDescriptor& batteryDescriptor)
{
    m_safetyClassification = batteryDescriptor.safetyClassification();
    m_type = batteryDescriptor.type();
    m_productionSpecifications = batteryDescriptor.productionSpecifications();
    m_capacityFullCharge = batteryDescriptor.capacityFullCharge();
    m_capacitySpecified = batteryDescriptor.capacitySpecified();
    m_voltageSpecified = batteryDescriptor.voltageSpecified();
    m_extensions = batteryDescriptor.extensions();
    return *this;
}

inline BatteryDescriptor BatteryDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return BatteryDescriptor(m_safetyClassification, m_type, m_productionSpecifications, m_capacityFullCharge, m_capacitySpecified, m_voltageSpecified, m_extensions);
}

inline bool BatteryDescriptorBuilder::isChanged(const BatteryDescriptor& base) const
{
    return *this != base;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::safetyClassification(SafetyClassification safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline SafetyClassification& BatteryDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline SafetyClassification BatteryDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& BatteryDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& BatteryDescriptorBuilder::type() const
{
    return m_type;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::productionSpecifications(const ProductionSpecifications& productionSpecifications)
{
    m_productionSpecifications = productionSpecifications;
    return *this;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::productionSpecifications(ProductionSpecifications&& productionSpecifications)
{
    m_productionSpecifications = std::move(productionSpecifications);
    return *this;
}

inline ProductionSpecifications& BatteryDescriptorBuilder::productionSpecifications()
{
    return m_productionSpecifications;
}

inline const ProductionSpecifications& BatteryDescriptorBuilder::productionSpecifications() const
{
    return m_productionSpecifications;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::capacityFullCharge(const boost::optional<Measurement>& capacityFullCharge)
{
    m_capacityFullCharge = capacityFullCharge;
    return *this;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::capacityFullCharge(boost::optional<Measurement>&& capacityFullCharge)
{
    m_capacityFullCharge = std::move(capacityFullCharge);
    return *this;
}

inline boost::optional<Measurement>& BatteryDescriptorBuilder::capacityFullCharge()
{
    return m_capacityFullCharge;
}

inline const boost::optional<Measurement>& BatteryDescriptorBuilder::capacityFullCharge() const
{
    return m_capacityFullCharge;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::capacitySpecified(const boost::optional<Measurement>& capacitySpecified)
{
    m_capacitySpecified = capacitySpecified;
    return *this;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::capacitySpecified(boost::optional<Measurement>&& capacitySpecified)
{
    m_capacitySpecified = std::move(capacitySpecified);
    return *this;
}

inline boost::optional<Measurement>& BatteryDescriptorBuilder::capacitySpecified()
{
    return m_capacitySpecified;
}

inline const boost::optional<Measurement>& BatteryDescriptorBuilder::capacitySpecified() const
{
    return m_capacitySpecified;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::voltageSpecified(const boost::optional<Measurement>& voltageSpecified)
{
    m_voltageSpecified = voltageSpecified;
    return *this;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::voltageSpecified(boost::optional<Measurement>&& voltageSpecified)
{
    m_voltageSpecified = std::move(voltageSpecified);
    return *this;
}

inline boost::optional<Measurement>& BatteryDescriptorBuilder::voltageSpecified()
{
    return m_voltageSpecified;
}

inline const boost::optional<Measurement>& BatteryDescriptorBuilder::voltageSpecified() const
{
    return m_voltageSpecified;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline BatteryDescriptorBuilder& BatteryDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& BatteryDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& BatteryDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const BatteryDescriptor& lhs, const BatteryDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const BatteryDescriptorBuilder& lhs, const BatteryDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const BatteryDescriptor& lhs, const BatteryDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const BatteryDescriptorBuilder& lhs, const BatteryDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline BatteryDescriptorBuilder getBuilder(const BatteryDescriptor& batteryDescriptor)
{
    return BatteryDescriptorBuilder(batteryDescriptor);
}

inline BatteryDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<BatteryDescriptor>>& batteryDescriptor)
{
    return BatteryDescriptorBuilder(batteryDescriptor);
}

}
}
