/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Alert/AlertConditionDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref AlertConditionDescriptor
 * @ingroup Mdib
 */
class AlertConditionDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref AlertConditionDescriptor
        using BuiltType = AlertConditionDescriptor;

        /// @brief Builder based on given immutable @ref AlertConditionDescriptor
        explicit AlertConditionDescriptorBuilder(const AlertConditionDescriptor& alertConditionDescriptor=AlertConditionDescriptor());

        /// @brief Builder based on given immutable @ref AlertConditionDescriptor
        explicit AlertConditionDescriptorBuilder(const DFL::NotNull<SharedPtr<AlertConditionDescriptor>>& alertConditionDescriptor);

        /// @brief Overwrite all values with given immutable @ref AlertConditionDescriptor
        AlertConditionDescriptorBuilder& operator=(const AlertConditionDescriptor& alertConditionDescriptor);

        /// @brief Explicit conversion to immutable @ref AlertConditionDescriptor
        AlertConditionDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref AlertConditionDescriptor
        bool isChanged(const AlertConditionDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        AlertConditionDescriptorBuilder& safetyClassification(SafetyClassification safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        AlertConditionDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        AlertConditionDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for kind
        /// @{
        AlertConditionDescriptorBuilder& kind(AlertConditionKind kind);
        /// @}

        /// @brief Setter for priority
        /// @{
        AlertConditionDescriptorBuilder& priority(AlertConditionPriority priority);
        /// @}

        /// @brief Setter for defaultConditionGenerationDelay
        /// @{
        AlertConditionDescriptorBuilder& defaultConditionGenerationDelay(Duration defaultConditionGenerationDelay);
        /// @}

        /// @brief Setter for canEscalate
        /// @{
        AlertConditionDescriptorBuilder& canEscalate(boost::optional<AlertConditionPriority> canEscalate);
        /// @}

        /// @brief Setter for canDeescalate
        /// @{
        AlertConditionDescriptorBuilder& canDeescalate(boost::optional<AlertConditionPriority> canDeescalate);
        /// @}

        /// @brief Setter for sources
        /// @{
        AlertConditionDescriptorBuilder& sources(const Handles& sources);
        AlertConditionDescriptorBuilder& sources(Handles&& sources);
        /// @}

        /// @brief Setter for causeInfos
        /// @{
        AlertConditionDescriptorBuilder& causeInfos(const CauseInfos& causeInfos);
        AlertConditionDescriptorBuilder& causeInfos(CauseInfos&& causeInfos);
        /// @}

        /// @brief Setter for extensions
        /// @{
        AlertConditionDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        AlertConditionDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        SafetyClassification& safetyClassification();
        SafetyClassification safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for kind
        /// @{
        AlertConditionKind& kind();
        AlertConditionKind kind() const;
        /// @}

        /// @brief Getter for priority
        /// @{
        AlertConditionPriority& priority();
        AlertConditionPriority priority() const;
        /// @}

        /// @brief Getter for defaultConditionGenerationDelay
        /// @{
        Duration& defaultConditionGenerationDelay();
        Duration defaultConditionGenerationDelay() const;
        /// @}

        /// @brief Getter for canEscalate
        /// @{
        boost::optional<AlertConditionPriority>& canEscalate();
        boost::optional<AlertConditionPriority> canEscalate() const;
        /// @}

        /// @brief Getter for canDeescalate
        /// @{
        boost::optional<AlertConditionPriority>& canDeescalate();
        boost::optional<AlertConditionPriority> canDeescalate() const;
        /// @}

        /// @brief Getter for sources
        /// @{
        Handles& sources();
        const Handles& sources() const;
        /// @}

        /// @brief Getter for causeInfos
        /// @{
        CauseInfos& causeInfos();
        const CauseInfos& causeInfos() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        SafetyClassification m_safetyClassification;
        boost::optional<CodedValue> m_type;
        AlertConditionKind m_kind;
        AlertConditionPriority m_priority;
        Duration m_defaultConditionGenerationDelay;
        boost::optional<AlertConditionPriority> m_canEscalate;
        boost::optional<AlertConditionPriority> m_canDeescalate;
        Handles m_sources;
        CauseInfos m_causeInfos;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const AlertConditionDescriptor& lhs, const AlertConditionDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const AlertConditionDescriptorBuilder& lhs, const AlertConditionDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const AlertConditionDescriptorBuilder& lhs, const AlertConditionDescriptor& rhs);
bool operator==(const AlertConditionDescriptor& lhs, const AlertConditionDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const AlertConditionDescriptor& lhs, const AlertConditionDescriptor& rhs);
bool operator!=(const AlertConditionDescriptorBuilder& lhs, const AlertConditionDescriptorBuilder& rhs);
bool operator!=(const AlertConditionDescriptor& lhs, const AlertConditionDescriptorBuilder& rhs);
bool operator!=(const AlertConditionDescriptorBuilder& lhs, const AlertConditionDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref AlertConditionDescriptor
 * @ingroup Mdib
 */
/// @{
AlertConditionDescriptorBuilder getBuilder(const AlertConditionDescriptor& alertConditionDescriptor);
AlertConditionDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<AlertConditionDescriptor>>& alertConditionDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const AlertConditionDescriptor& lhs, const AlertConditionDescriptor& rhs);

inline AlertConditionDescriptorBuilder::AlertConditionDescriptorBuilder(const AlertConditionDescriptor& alertConditionDescriptor) :
    m_safetyClassification(alertConditionDescriptor.safetyClassification()),
    m_type(alertConditionDescriptor.type()),
    m_kind(alertConditionDescriptor.kind()),
    m_priority(alertConditionDescriptor.priority()),
    m_defaultConditionGenerationDelay(alertConditionDescriptor.defaultConditionGenerationDelay()),
    m_canEscalate(alertConditionDescriptor.canEscalate()),
    m_canDeescalate(alertConditionDescriptor.canDeescalate()),
    m_sources(alertConditionDescriptor.sources()),
    m_causeInfos(alertConditionDescriptor.causeInfos()),
    m_extensions(alertConditionDescriptor.extensions())
{
}

inline AlertConditionDescriptorBuilder::AlertConditionDescriptorBuilder(const DFL::NotNull<SharedPtr<AlertConditionDescriptor>>& alertConditionDescriptor) :
    m_safetyClassification(alertConditionDescriptor->safetyClassification()),
    m_type(alertConditionDescriptor->type()),
    m_kind(alertConditionDescriptor->kind()),
    m_priority(alertConditionDescriptor->priority()),
    m_defaultConditionGenerationDelay(alertConditionDescriptor->defaultConditionGenerationDelay()),
    m_canEscalate(alertConditionDescriptor->canEscalate()),
    m_canDeescalate(alertConditionDescriptor->canDeescalate()),
    m_sources(alertConditionDescriptor->sources()),
    m_causeInfos(alertConditionDescriptor->causeInfos()),
    m_extensions(alertConditionDescriptor->extensions())
{
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::operator=(const AlertConditionDescriptor& alertConditionDescriptor)
{
    m_safetyClassification = alertConditionDescriptor.safetyClassification();
    m_type = alertConditionDescriptor.type();
    m_kind = alertConditionDescriptor.kind();
    m_priority = alertConditionDescriptor.priority();
    m_defaultConditionGenerationDelay = alertConditionDescriptor.defaultConditionGenerationDelay();
    m_canEscalate = alertConditionDescriptor.canEscalate();
    m_canDeescalate = alertConditionDescriptor.canDeescalate();
    m_sources = alertConditionDescriptor.sources();
    m_causeInfos = alertConditionDescriptor.causeInfos();
    m_extensions = alertConditionDescriptor.extensions();
    return *this;
}

inline AlertConditionDescriptor AlertConditionDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return AlertConditionDescriptor(m_safetyClassification, m_type, m_kind, m_priority, m_defaultConditionGenerationDelay, m_canEscalate, m_canDeescalate, m_sources, m_causeInfos, m_extensions);
}

inline bool AlertConditionDescriptorBuilder::isChanged(const AlertConditionDescriptor& base) const
{
    return *this != base;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::safetyClassification(SafetyClassification safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline SafetyClassification& AlertConditionDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline SafetyClassification AlertConditionDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& AlertConditionDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& AlertConditionDescriptorBuilder::type() const
{
    return m_type;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::kind(AlertConditionKind kind)
{
    m_kind = kind;
    return *this;
}

inline AlertConditionKind& AlertConditionDescriptorBuilder::kind()
{
    return m_kind;
}

inline AlertConditionKind AlertConditionDescriptorBuilder::kind() const
{
    return m_kind;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::priority(AlertConditionPriority priority)
{
    m_priority = priority;
    return *this;
}

inline AlertConditionPriority& AlertConditionDescriptorBuilder::priority()
{
    return m_priority;
}

inline AlertConditionPriority AlertConditionDescriptorBuilder::priority() const
{
    return m_priority;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::defaultConditionGenerationDelay(Duration defaultConditionGenerationDelay)
{
    m_defaultConditionGenerationDelay = defaultConditionGenerationDelay;
    return *this;
}

inline Duration& AlertConditionDescriptorBuilder::defaultConditionGenerationDelay()
{
    return m_defaultConditionGenerationDelay;
}

inline Duration AlertConditionDescriptorBuilder::defaultConditionGenerationDelay() const
{
    return m_defaultConditionGenerationDelay;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::canEscalate(boost::optional<AlertConditionPriority> canEscalate)
{
    m_canEscalate = canEscalate;
    return *this;
}

inline boost::optional<AlertConditionPriority>& AlertConditionDescriptorBuilder::canEscalate()
{
    return m_canEscalate;
}

inline boost::optional<AlertConditionPriority> AlertConditionDescriptorBuilder::canEscalate() const
{
    return m_canEscalate;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::canDeescalate(boost::optional<AlertConditionPriority> canDeescalate)
{
    m_canDeescalate = canDeescalate;
    return *this;
}

inline boost::optional<AlertConditionPriority>& AlertConditionDescriptorBuilder::canDeescalate()
{
    return m_canDeescalate;
}

inline boost::optional<AlertConditionPriority> AlertConditionDescriptorBuilder::canDeescalate() const
{
    return m_canDeescalate;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::sources(const Handles& sources)
{
    m_sources = sources;
    return *this;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::sources(Handles&& sources)
{
    m_sources = std::move(sources);
    return *this;
}

inline Handles& AlertConditionDescriptorBuilder::sources()
{
    return m_sources;
}

inline const Handles& AlertConditionDescriptorBuilder::sources() const
{
    return m_sources;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::causeInfos(const CauseInfos& causeInfos)
{
    m_causeInfos = causeInfos;
    return *this;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::causeInfos(CauseInfos&& causeInfos)
{
    m_causeInfos = std::move(causeInfos);
    return *this;
}

inline CauseInfos& AlertConditionDescriptorBuilder::causeInfos()
{
    return m_causeInfos;
}

inline const CauseInfos& AlertConditionDescriptorBuilder::causeInfos() const
{
    return m_causeInfos;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline AlertConditionDescriptorBuilder& AlertConditionDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& AlertConditionDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& AlertConditionDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const AlertConditionDescriptor& lhs, const AlertConditionDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const AlertConditionDescriptorBuilder& lhs, const AlertConditionDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const AlertConditionDescriptor& lhs, const AlertConditionDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const AlertConditionDescriptorBuilder& lhs, const AlertConditionDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline AlertConditionDescriptorBuilder getBuilder(const AlertConditionDescriptor& alertConditionDescriptor)
{
    return AlertConditionDescriptorBuilder(alertConditionDescriptor);
}

inline AlertConditionDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<AlertConditionDescriptor>>& alertConditionDescriptor)
{
    return AlertConditionDescriptorBuilder(alertConditionDescriptor);
}

}
}
