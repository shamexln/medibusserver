/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Alert/AlertSignalDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref AlertSignalDescriptor
 * @ingroup Mdib
 */
class AlertSignalDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref AlertSignalDescriptor
        using BuiltType = AlertSignalDescriptor;

        /// @brief Builder based on given immutable @ref AlertSignalDescriptor
        explicit AlertSignalDescriptorBuilder(const AlertSignalDescriptor& alertSignalDescriptor=AlertSignalDescriptor());

        /// @brief Builder based on given immutable @ref AlertSignalDescriptor
        explicit AlertSignalDescriptorBuilder(const DFL::NotNull<SharedPtr<AlertSignalDescriptor>>& alertSignalDescriptor);

        /// @brief Overwrite all values with given immutable @ref AlertSignalDescriptor
        AlertSignalDescriptorBuilder& operator=(const AlertSignalDescriptor& alertSignalDescriptor);

        /// @brief Explicit conversion to immutable @ref AlertSignalDescriptor
        AlertSignalDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref AlertSignalDescriptor
        bool isChanged(const AlertSignalDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        AlertSignalDescriptorBuilder& safetyClassification(SafetyClassification safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        AlertSignalDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        AlertSignalDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for conditionSignaledHandle
        /// @{
        AlertSignalDescriptorBuilder& conditionSignaledHandle(const Handle& conditionSignaledHandle);
        AlertSignalDescriptorBuilder& conditionSignaledHandle(Handle&& conditionSignaledHandle);
        /// @}

        /// @brief Setter for manifestation
        /// @{
        AlertSignalDescriptorBuilder& manifestation(AlertSignalManifestation manifestation);
        /// @}

        /// @brief Setter for latching
        /// @{
        AlertSignalDescriptorBuilder& latching(Latching latching);
        /// @}

        /// @brief Setter for defaultSignalGenerationDelay
        /// @{
        AlertSignalDescriptorBuilder& defaultSignalGenerationDelay(Duration defaultSignalGenerationDelay);
        /// @}

        /// @brief Setter for minSignalGenerationDelay
        /// @{
        AlertSignalDescriptorBuilder& minSignalGenerationDelay(const boost::optional<Duration>& minSignalGenerationDelay);
        AlertSignalDescriptorBuilder& minSignalGenerationDelay(boost::optional<Duration>&& minSignalGenerationDelay);
        /// @}

        /// @brief Setter for maxSignalGenerationDelay
        /// @{
        AlertSignalDescriptorBuilder& maxSignalGenerationDelay(const boost::optional<Duration>& maxSignalGenerationDelay);
        AlertSignalDescriptorBuilder& maxSignalGenerationDelay(boost::optional<Duration>&& maxSignalGenerationDelay);
        /// @}

        /// @brief Setter for signalDelegationSupport
        /// @{
        AlertSignalDescriptorBuilder& signalDelegationSupport(SignalDelegation signalDelegationSupport);
        /// @}

        /// @brief Setter for acknowledgmentSupport
        /// @{
        AlertSignalDescriptorBuilder& acknowledgmentSupport(AcknowledgmentSupport acknowledgmentSupport);
        /// @}

        /// @brief Setter for acknowledgeTimeout
        /// @{
        AlertSignalDescriptorBuilder& acknowledgeTimeout(const boost::optional<Duration>& acknowledgeTimeout);
        AlertSignalDescriptorBuilder& acknowledgeTimeout(boost::optional<Duration>&& acknowledgeTimeout);
        /// @}

        /// @brief Setter for extensions
        /// @{
        AlertSignalDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        AlertSignalDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        SafetyClassification& safetyClassification();
        SafetyClassification safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for conditionSignaledHandle
        /// @{
        Handle& conditionSignaledHandle();
        const Handle& conditionSignaledHandle() const;
        /// @}

        /// @brief Getter for manifestation
        /// @{
        AlertSignalManifestation& manifestation();
        AlertSignalManifestation manifestation() const;
        /// @}

        /// @brief Getter for latching
        /// @{
        Latching& latching();
        Latching latching() const;
        /// @}

        /// @brief Getter for defaultSignalGenerationDelay
        /// @{
        Duration& defaultSignalGenerationDelay();
        Duration defaultSignalGenerationDelay() const;
        /// @}

        /// @brief Getter for minSignalGenerationDelay
        /// @{
        boost::optional<Duration>& minSignalGenerationDelay();
        const boost::optional<Duration>& minSignalGenerationDelay() const;
        /// @}

        /// @brief Getter for maxSignalGenerationDelay
        /// @{
        boost::optional<Duration>& maxSignalGenerationDelay();
        const boost::optional<Duration>& maxSignalGenerationDelay() const;
        /// @}

        /// @brief Getter for signalDelegationSupport
        /// @{
        SignalDelegation& signalDelegationSupport();
        SignalDelegation signalDelegationSupport() const;
        /// @}

        /// @brief Getter for acknowledgmentSupport
        /// @{
        AcknowledgmentSupport& acknowledgmentSupport();
        AcknowledgmentSupport acknowledgmentSupport() const;
        /// @}

        /// @brief Getter for acknowledgeTimeout
        /// @{
        boost::optional<Duration>& acknowledgeTimeout();
        const boost::optional<Duration>& acknowledgeTimeout() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        SafetyClassification m_safetyClassification;
        boost::optional<CodedValue> m_type;
        Handle m_conditionSignaledHandle;
        AlertSignalManifestation m_manifestation;
        Latching m_latching;
        Duration m_defaultSignalGenerationDelay;
        boost::optional<Duration> m_minSignalGenerationDelay;
        boost::optional<Duration> m_maxSignalGenerationDelay;
        SignalDelegation m_signalDelegationSupport;
        AcknowledgmentSupport m_acknowledgmentSupport;
        boost::optional<Duration> m_acknowledgeTimeout;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const AlertSignalDescriptor& lhs, const AlertSignalDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const AlertSignalDescriptorBuilder& lhs, const AlertSignalDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const AlertSignalDescriptorBuilder& lhs, const AlertSignalDescriptor& rhs);
bool operator==(const AlertSignalDescriptor& lhs, const AlertSignalDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const AlertSignalDescriptor& lhs, const AlertSignalDescriptor& rhs);
bool operator!=(const AlertSignalDescriptorBuilder& lhs, const AlertSignalDescriptorBuilder& rhs);
bool operator!=(const AlertSignalDescriptor& lhs, const AlertSignalDescriptorBuilder& rhs);
bool operator!=(const AlertSignalDescriptorBuilder& lhs, const AlertSignalDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref AlertSignalDescriptor
 * @ingroup Mdib
 */
/// @{
AlertSignalDescriptorBuilder getBuilder(const AlertSignalDescriptor& alertSignalDescriptor);
AlertSignalDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<AlertSignalDescriptor>>& alertSignalDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const AlertSignalDescriptor& lhs, const AlertSignalDescriptor& rhs);

inline AlertSignalDescriptorBuilder::AlertSignalDescriptorBuilder(const AlertSignalDescriptor& alertSignalDescriptor) :
    m_safetyClassification(alertSignalDescriptor.safetyClassification()),
    m_type(alertSignalDescriptor.type()),
    m_conditionSignaledHandle(alertSignalDescriptor.conditionSignaledHandle()),
    m_manifestation(alertSignalDescriptor.manifestation()),
    m_latching(alertSignalDescriptor.latching()),
    m_defaultSignalGenerationDelay(alertSignalDescriptor.defaultSignalGenerationDelay()),
    m_minSignalGenerationDelay(alertSignalDescriptor.minSignalGenerationDelay()),
    m_maxSignalGenerationDelay(alertSignalDescriptor.maxSignalGenerationDelay()),
    m_signalDelegationSupport(alertSignalDescriptor.signalDelegationSupport()),
    m_acknowledgmentSupport(alertSignalDescriptor.acknowledgmentSupport()),
    m_acknowledgeTimeout(alertSignalDescriptor.acknowledgeTimeout()),
    m_extensions(alertSignalDescriptor.extensions())
{
}

inline AlertSignalDescriptorBuilder::AlertSignalDescriptorBuilder(const DFL::NotNull<SharedPtr<AlertSignalDescriptor>>& alertSignalDescriptor) :
    m_safetyClassification(alertSignalDescriptor->safetyClassification()),
    m_type(alertSignalDescriptor->type()),
    m_conditionSignaledHandle(alertSignalDescriptor->conditionSignaledHandle()),
    m_manifestation(alertSignalDescriptor->manifestation()),
    m_latching(alertSignalDescriptor->latching()),
    m_defaultSignalGenerationDelay(alertSignalDescriptor->defaultSignalGenerationDelay()),
    m_minSignalGenerationDelay(alertSignalDescriptor->minSignalGenerationDelay()),
    m_maxSignalGenerationDelay(alertSignalDescriptor->maxSignalGenerationDelay()),
    m_signalDelegationSupport(alertSignalDescriptor->signalDelegationSupport()),
    m_acknowledgmentSupport(alertSignalDescriptor->acknowledgmentSupport()),
    m_acknowledgeTimeout(alertSignalDescriptor->acknowledgeTimeout()),
    m_extensions(alertSignalDescriptor->extensions())
{
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::operator=(const AlertSignalDescriptor& alertSignalDescriptor)
{
    m_safetyClassification = alertSignalDescriptor.safetyClassification();
    m_type = alertSignalDescriptor.type();
    m_conditionSignaledHandle = alertSignalDescriptor.conditionSignaledHandle();
    m_manifestation = alertSignalDescriptor.manifestation();
    m_latching = alertSignalDescriptor.latching();
    m_defaultSignalGenerationDelay = alertSignalDescriptor.defaultSignalGenerationDelay();
    m_minSignalGenerationDelay = alertSignalDescriptor.minSignalGenerationDelay();
    m_maxSignalGenerationDelay = alertSignalDescriptor.maxSignalGenerationDelay();
    m_signalDelegationSupport = alertSignalDescriptor.signalDelegationSupport();
    m_acknowledgmentSupport = alertSignalDescriptor.acknowledgmentSupport();
    m_acknowledgeTimeout = alertSignalDescriptor.acknowledgeTimeout();
    m_extensions = alertSignalDescriptor.extensions();
    return *this;
}

inline AlertSignalDescriptor AlertSignalDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return AlertSignalDescriptor(m_safetyClassification, m_type, m_conditionSignaledHandle, m_manifestation, m_latching, m_defaultSignalGenerationDelay, m_minSignalGenerationDelay, m_maxSignalGenerationDelay, m_signalDelegationSupport, m_acknowledgmentSupport, m_acknowledgeTimeout, m_extensions);
}

inline bool AlertSignalDescriptorBuilder::isChanged(const AlertSignalDescriptor& base) const
{
    return *this != base;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::safetyClassification(SafetyClassification safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline SafetyClassification& AlertSignalDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline SafetyClassification AlertSignalDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& AlertSignalDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& AlertSignalDescriptorBuilder::type() const
{
    return m_type;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::conditionSignaledHandle(const Handle& conditionSignaledHandle)
{
    m_conditionSignaledHandle = conditionSignaledHandle;
    return *this;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::conditionSignaledHandle(Handle&& conditionSignaledHandle)
{
    m_conditionSignaledHandle = std::move(conditionSignaledHandle);
    return *this;
}

inline Handle& AlertSignalDescriptorBuilder::conditionSignaledHandle()
{
    return m_conditionSignaledHandle;
}

inline const Handle& AlertSignalDescriptorBuilder::conditionSignaledHandle() const
{
    return m_conditionSignaledHandle;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::manifestation(AlertSignalManifestation manifestation)
{
    m_manifestation = manifestation;
    return *this;
}

inline AlertSignalManifestation& AlertSignalDescriptorBuilder::manifestation()
{
    return m_manifestation;
}

inline AlertSignalManifestation AlertSignalDescriptorBuilder::manifestation() const
{
    return m_manifestation;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::latching(Latching latching)
{
    m_latching = latching;
    return *this;
}

inline Latching& AlertSignalDescriptorBuilder::latching()
{
    return m_latching;
}

inline Latching AlertSignalDescriptorBuilder::latching() const
{
    return m_latching;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::defaultSignalGenerationDelay(Duration defaultSignalGenerationDelay)
{
    m_defaultSignalGenerationDelay = defaultSignalGenerationDelay;
    return *this;
}

inline Duration& AlertSignalDescriptorBuilder::defaultSignalGenerationDelay()
{
    return m_defaultSignalGenerationDelay;
}

inline Duration AlertSignalDescriptorBuilder::defaultSignalGenerationDelay() const
{
    return m_defaultSignalGenerationDelay;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::minSignalGenerationDelay(const boost::optional<Duration>& minSignalGenerationDelay)
{
    m_minSignalGenerationDelay = minSignalGenerationDelay;
    return *this;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::minSignalGenerationDelay(boost::optional<Duration>&& minSignalGenerationDelay)
{
    m_minSignalGenerationDelay = std::move(minSignalGenerationDelay);
    return *this;
}

inline boost::optional<Duration>& AlertSignalDescriptorBuilder::minSignalGenerationDelay()
{
    return m_minSignalGenerationDelay;
}

inline const boost::optional<Duration>& AlertSignalDescriptorBuilder::minSignalGenerationDelay() const
{
    return m_minSignalGenerationDelay;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::maxSignalGenerationDelay(const boost::optional<Duration>& maxSignalGenerationDelay)
{
    m_maxSignalGenerationDelay = maxSignalGenerationDelay;
    return *this;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::maxSignalGenerationDelay(boost::optional<Duration>&& maxSignalGenerationDelay)
{
    m_maxSignalGenerationDelay = std::move(maxSignalGenerationDelay);
    return *this;
}

inline boost::optional<Duration>& AlertSignalDescriptorBuilder::maxSignalGenerationDelay()
{
    return m_maxSignalGenerationDelay;
}

inline const boost::optional<Duration>& AlertSignalDescriptorBuilder::maxSignalGenerationDelay() const
{
    return m_maxSignalGenerationDelay;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::signalDelegationSupport(SignalDelegation signalDelegationSupport)
{
    m_signalDelegationSupport = signalDelegationSupport;
    return *this;
}

inline SignalDelegation& AlertSignalDescriptorBuilder::signalDelegationSupport()
{
    return m_signalDelegationSupport;
}

inline SignalDelegation AlertSignalDescriptorBuilder::signalDelegationSupport() const
{
    return m_signalDelegationSupport;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::acknowledgmentSupport(AcknowledgmentSupport acknowledgmentSupport)
{
    m_acknowledgmentSupport = acknowledgmentSupport;
    return *this;
}

inline AcknowledgmentSupport& AlertSignalDescriptorBuilder::acknowledgmentSupport()
{
    return m_acknowledgmentSupport;
}

inline AcknowledgmentSupport AlertSignalDescriptorBuilder::acknowledgmentSupport() const
{
    return m_acknowledgmentSupport;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::acknowledgeTimeout(const boost::optional<Duration>& acknowledgeTimeout)
{
    m_acknowledgeTimeout = acknowledgeTimeout;
    return *this;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::acknowledgeTimeout(boost::optional<Duration>&& acknowledgeTimeout)
{
    m_acknowledgeTimeout = std::move(acknowledgeTimeout);
    return *this;
}

inline boost::optional<Duration>& AlertSignalDescriptorBuilder::acknowledgeTimeout()
{
    return m_acknowledgeTimeout;
}

inline const boost::optional<Duration>& AlertSignalDescriptorBuilder::acknowledgeTimeout() const
{
    return m_acknowledgeTimeout;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline AlertSignalDescriptorBuilder& AlertSignalDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& AlertSignalDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& AlertSignalDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const AlertSignalDescriptor& lhs, const AlertSignalDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const AlertSignalDescriptorBuilder& lhs, const AlertSignalDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const AlertSignalDescriptor& lhs, const AlertSignalDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const AlertSignalDescriptorBuilder& lhs, const AlertSignalDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline AlertSignalDescriptorBuilder getBuilder(const AlertSignalDescriptor& alertSignalDescriptor)
{
    return AlertSignalDescriptorBuilder(alertSignalDescriptor);
}

inline AlertSignalDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<AlertSignalDescriptor>>& alertSignalDescriptor)
{
    return AlertSignalDescriptorBuilder(alertSignalDescriptor);
}

}
}
