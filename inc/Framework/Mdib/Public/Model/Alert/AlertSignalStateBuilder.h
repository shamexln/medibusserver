/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Alert/AlertSignalState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref AlertSignalState
 * @ingroup Mdib
 */
class AlertSignalStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref AlertSignalState
        using BuiltType = AlertSignalState;

        /// @brief Builder based on given immutable @ref AlertSignalState
        explicit AlertSignalStateBuilder(const AlertSignalState& alertSignalState=AlertSignalState());

        /// @brief Builder based on given immutable @ref AlertSignalState
        explicit AlertSignalStateBuilder(const DFL::NotNull<SharedPtr<AlertSignalState>>& alertSignalState);

        /// @brief Overwrite all values with given immutable @ref AlertSignalState
        AlertSignalStateBuilder& operator=(const AlertSignalState& alertSignalState);

        /// @brief Explicit conversion to immutable @ref AlertSignalState
        AlertSignalState build() const;

        /// @brief Test whether the builder differs from the immutable @ref AlertSignalState
        bool isChanged(const AlertSignalState& base) const;

        /// @brief Setter for activationState
        /// @{
        AlertSignalStateBuilder& activationState(AlertActivation activationState);
        /// @}

        /// @brief Setter for actualSignalGenerationDelay
        /// @{
        AlertSignalStateBuilder& actualSignalGenerationDelay(const boost::optional<Duration>& actualSignalGenerationDelay);
        AlertSignalStateBuilder& actualSignalGenerationDelay(boost::optional<Duration>&& actualSignalGenerationDelay);
        /// @}

        /// @brief Setter for presence
        /// @{
        AlertSignalStateBuilder& presence(AlertSignalPresence presence);
        /// @}

        /// @brief Setter for location
        /// @{
        AlertSignalStateBuilder& location(AlertSignalPrimaryLocation location);
        /// @}

        /// @brief Setter for slot
        /// @{
        AlertSignalStateBuilder& slot(const boost::optional<Slot>& slot);
        AlertSignalStateBuilder& slot(boost::optional<Slot>&& slot);
        /// @}

        /// @brief Setter for extensions
        /// @{
        AlertSignalStateBuilder& extensions(const ExtensionTypes& extensions);
        AlertSignalStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for activationState
        /// @{
        AlertActivation& activationState();
        AlertActivation activationState() const;
        /// @}

        /// @brief Getter for actualSignalGenerationDelay
        /// @{
        boost::optional<Duration>& actualSignalGenerationDelay();
        const boost::optional<Duration>& actualSignalGenerationDelay() const;
        /// @}

        /// @brief Getter for presence
        /// @{
        AlertSignalPresence& presence();
        AlertSignalPresence presence() const;
        /// @}

        /// @brief Getter for location
        /// @{
        AlertSignalPrimaryLocation& location();
        AlertSignalPrimaryLocation location() const;
        /// @}

        /// @brief Getter for slot
        /// @{
        boost::optional<Slot>& slot();
        const boost::optional<Slot>& slot() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        AlertActivation m_activationState;
        boost::optional<Duration> m_actualSignalGenerationDelay;
        AlertSignalPresence m_presence;
        AlertSignalPrimaryLocation m_location;
        boost::optional<Slot> m_slot;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const AlertSignalState& lhs, const AlertSignalState& rhs);
DFL_MDIB_EXPIMP bool operator==(const AlertSignalStateBuilder& lhs, const AlertSignalStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const AlertSignalStateBuilder& lhs, const AlertSignalState& rhs);
bool operator==(const AlertSignalState& lhs, const AlertSignalStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const AlertSignalState& lhs, const AlertSignalState& rhs);
bool operator!=(const AlertSignalStateBuilder& lhs, const AlertSignalStateBuilder& rhs);
bool operator!=(const AlertSignalState& lhs, const AlertSignalStateBuilder& rhs);
bool operator!=(const AlertSignalStateBuilder& lhs, const AlertSignalState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref AlertSignalState
 * @ingroup Mdib
 */
/// @{
AlertSignalStateBuilder getBuilder(const AlertSignalState& alertSignalState);
AlertSignalStateBuilder getBuilder(const DFL::NotNull<SharedPtr<AlertSignalState>>& alertSignalState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const AlertSignalState& lhs, const AlertSignalState& rhs);

inline AlertSignalStateBuilder::AlertSignalStateBuilder(const AlertSignalState& alertSignalState) :
    m_activationState(alertSignalState.activationState()),
    m_actualSignalGenerationDelay(alertSignalState.actualSignalGenerationDelay()),
    m_presence(alertSignalState.presence()),
    m_location(alertSignalState.location()),
    m_slot(alertSignalState.slot()),
    m_extensions(alertSignalState.extensions())
{
}

inline AlertSignalStateBuilder::AlertSignalStateBuilder(const DFL::NotNull<SharedPtr<AlertSignalState>>& alertSignalState) :
    m_activationState(alertSignalState->activationState()),
    m_actualSignalGenerationDelay(alertSignalState->actualSignalGenerationDelay()),
    m_presence(alertSignalState->presence()),
    m_location(alertSignalState->location()),
    m_slot(alertSignalState->slot()),
    m_extensions(alertSignalState->extensions())
{
}

inline AlertSignalStateBuilder& AlertSignalStateBuilder::operator=(const AlertSignalState& alertSignalState)
{
    m_activationState = alertSignalState.activationState();
    m_actualSignalGenerationDelay = alertSignalState.actualSignalGenerationDelay();
    m_presence = alertSignalState.presence();
    m_location = alertSignalState.location();
    m_slot = alertSignalState.slot();
    m_extensions = alertSignalState.extensions();
    return *this;
}

inline AlertSignalState AlertSignalStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return AlertSignalState(m_activationState, m_actualSignalGenerationDelay, m_presence, m_location, m_slot, m_extensions);
}

inline bool AlertSignalStateBuilder::isChanged(const AlertSignalState& base) const
{
    return *this != base;
}

inline AlertSignalStateBuilder& AlertSignalStateBuilder::activationState(AlertActivation activationState)
{
    m_activationState = activationState;
    return *this;
}

inline AlertActivation& AlertSignalStateBuilder::activationState()
{
    return m_activationState;
}

inline AlertActivation AlertSignalStateBuilder::activationState() const
{
    return m_activationState;
}

inline AlertSignalStateBuilder& AlertSignalStateBuilder::actualSignalGenerationDelay(const boost::optional<Duration>& actualSignalGenerationDelay)
{
    m_actualSignalGenerationDelay = actualSignalGenerationDelay;
    return *this;
}

inline AlertSignalStateBuilder& AlertSignalStateBuilder::actualSignalGenerationDelay(boost::optional<Duration>&& actualSignalGenerationDelay)
{
    m_actualSignalGenerationDelay = std::move(actualSignalGenerationDelay);
    return *this;
}

inline boost::optional<Duration>& AlertSignalStateBuilder::actualSignalGenerationDelay()
{
    return m_actualSignalGenerationDelay;
}

inline const boost::optional<Duration>& AlertSignalStateBuilder::actualSignalGenerationDelay() const
{
    return m_actualSignalGenerationDelay;
}

inline AlertSignalStateBuilder& AlertSignalStateBuilder::presence(AlertSignalPresence presence)
{
    m_presence = presence;
    return *this;
}

inline AlertSignalPresence& AlertSignalStateBuilder::presence()
{
    return m_presence;
}

inline AlertSignalPresence AlertSignalStateBuilder::presence() const
{
    return m_presence;
}

inline AlertSignalStateBuilder& AlertSignalStateBuilder::location(AlertSignalPrimaryLocation location)
{
    m_location = location;
    return *this;
}

inline AlertSignalPrimaryLocation& AlertSignalStateBuilder::location()
{
    return m_location;
}

inline AlertSignalPrimaryLocation AlertSignalStateBuilder::location() const
{
    return m_location;
}

inline AlertSignalStateBuilder& AlertSignalStateBuilder::slot(const boost::optional<Slot>& slot)
{
    m_slot = slot;
    return *this;
}

inline AlertSignalStateBuilder& AlertSignalStateBuilder::slot(boost::optional<Slot>&& slot)
{
    m_slot = std::move(slot);
    return *this;
}

inline boost::optional<Slot>& AlertSignalStateBuilder::slot()
{
    return m_slot;
}

inline const boost::optional<Slot>& AlertSignalStateBuilder::slot() const
{
    return m_slot;
}

inline AlertSignalStateBuilder& AlertSignalStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline AlertSignalStateBuilder& AlertSignalStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& AlertSignalStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& AlertSignalStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const AlertSignalState& lhs, const AlertSignalStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const AlertSignalStateBuilder& lhs, const AlertSignalStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const AlertSignalState& lhs, const AlertSignalStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const AlertSignalStateBuilder& lhs, const AlertSignalState& rhs)
{
    return !(lhs == rhs);
}

inline AlertSignalStateBuilder getBuilder(const AlertSignalState& alertSignalState)
{
    return AlertSignalStateBuilder(alertSignalState);
}

inline AlertSignalStateBuilder getBuilder(const DFL::NotNull<SharedPtr<AlertSignalState>>& alertSignalState)
{
    return AlertSignalStateBuilder(alertSignalState);
}

}
}
