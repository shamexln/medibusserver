/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Alert/AlertSystemState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref AlertSystemState
 * @ingroup Mdib
 */
class AlertSystemStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref AlertSystemState
        using BuiltType = AlertSystemState;

        /// @brief Builder based on given immutable @ref AlertSystemState
        explicit AlertSystemStateBuilder(const AlertSystemState& alertSystemState=AlertSystemState());

        /// @brief Builder based on given immutable @ref AlertSystemState
        explicit AlertSystemStateBuilder(const DFL::NotNull<SharedPtr<AlertSystemState>>& alertSystemState);

        /// @brief Overwrite all values with given immutable @ref AlertSystemState
        AlertSystemStateBuilder& operator=(const AlertSystemState& alertSystemState);

        /// @brief Explicit conversion to immutable @ref AlertSystemState
        AlertSystemState build() const;

        /// @brief Test whether the builder differs from the immutable @ref AlertSystemState
        bool isChanged(const AlertSystemState& base) const;

        /// @brief Setter for activationState
        /// @{
        AlertSystemStateBuilder& activationState(AlertActivation activationState);
        /// @}

        /// @brief Setter for lastSelfCheck
        /// @{
        AlertSystemStateBuilder& lastSelfCheck(const boost::optional<Timestamp>& lastSelfCheck);
        AlertSystemStateBuilder& lastSelfCheck(boost::optional<Timestamp>&& lastSelfCheck);
        /// @}

        /// @brief Setter for selfCheckCount
        /// @{
        AlertSystemStateBuilder& selfCheckCount(const boost::optional<SelfCheckCount>& selfCheckCount);
        AlertSystemStateBuilder& selfCheckCount(boost::optional<SelfCheckCount>&& selfCheckCount);
        /// @}

        /// @brief Setter for presentPhysiologicalAlarmConditions
        /// @{
        AlertSystemStateBuilder& presentPhysiologicalAlarmConditions(const HandleSet& presentPhysiologicalAlarmConditions);
        AlertSystemStateBuilder& presentPhysiologicalAlarmConditions(HandleSet&& presentPhysiologicalAlarmConditions);
        /// @}

        /// @brief Setter for presentTechnicalAlarmConditions
        /// @{
        AlertSystemStateBuilder& presentTechnicalAlarmConditions(const HandleSet& presentTechnicalAlarmConditions);
        AlertSystemStateBuilder& presentTechnicalAlarmConditions(HandleSet&& presentTechnicalAlarmConditions);
        /// @}

        /// @brief Setter for extensions
        /// @{
        AlertSystemStateBuilder& extensions(const ExtensionTypes& extensions);
        AlertSystemStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for activationState
        /// @{
        AlertActivation& activationState();
        AlertActivation activationState() const;
        /// @}

        /// @brief Getter for lastSelfCheck
        /// @{
        boost::optional<Timestamp>& lastSelfCheck();
        const boost::optional<Timestamp>& lastSelfCheck() const;
        /// @}

        /// @brief Getter for selfCheckCount
        /// @{
        boost::optional<SelfCheckCount>& selfCheckCount();
        const boost::optional<SelfCheckCount>& selfCheckCount() const;
        /// @}

        /// @brief Getter for presentPhysiologicalAlarmConditions
        /// @{
        HandleSet& presentPhysiologicalAlarmConditions();
        const HandleSet& presentPhysiologicalAlarmConditions() const;
        /// @}

        /// @brief Getter for presentTechnicalAlarmConditions
        /// @{
        HandleSet& presentTechnicalAlarmConditions();
        const HandleSet& presentTechnicalAlarmConditions() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        AlertActivation m_activationState;
        boost::optional<Timestamp> m_lastSelfCheck;
        boost::optional<SelfCheckCount> m_selfCheckCount;
        HandleSet m_presentPhysiologicalAlarmConditions;
        HandleSet m_presentTechnicalAlarmConditions;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const AlertSystemState& lhs, const AlertSystemState& rhs);
DFL_MDIB_EXPIMP bool operator==(const AlertSystemStateBuilder& lhs, const AlertSystemStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const AlertSystemStateBuilder& lhs, const AlertSystemState& rhs);
bool operator==(const AlertSystemState& lhs, const AlertSystemStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const AlertSystemState& lhs, const AlertSystemState& rhs);
bool operator!=(const AlertSystemStateBuilder& lhs, const AlertSystemStateBuilder& rhs);
bool operator!=(const AlertSystemState& lhs, const AlertSystemStateBuilder& rhs);
bool operator!=(const AlertSystemStateBuilder& lhs, const AlertSystemState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref AlertSystemState
 * @ingroup Mdib
 */
/// @{
AlertSystemStateBuilder getBuilder(const AlertSystemState& alertSystemState);
AlertSystemStateBuilder getBuilder(const DFL::NotNull<SharedPtr<AlertSystemState>>& alertSystemState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const AlertSystemState& lhs, const AlertSystemState& rhs);

inline AlertSystemStateBuilder::AlertSystemStateBuilder(const AlertSystemState& alertSystemState) :
    m_activationState(alertSystemState.activationState()),
    m_lastSelfCheck(alertSystemState.lastSelfCheck()),
    m_selfCheckCount(alertSystemState.selfCheckCount()),
    m_presentPhysiologicalAlarmConditions(alertSystemState.presentPhysiologicalAlarmConditions()),
    m_presentTechnicalAlarmConditions(alertSystemState.presentTechnicalAlarmConditions()),
    m_extensions(alertSystemState.extensions())
{
}

inline AlertSystemStateBuilder::AlertSystemStateBuilder(const DFL::NotNull<SharedPtr<AlertSystemState>>& alertSystemState) :
    m_activationState(alertSystemState->activationState()),
    m_lastSelfCheck(alertSystemState->lastSelfCheck()),
    m_selfCheckCount(alertSystemState->selfCheckCount()),
    m_presentPhysiologicalAlarmConditions(alertSystemState->presentPhysiologicalAlarmConditions()),
    m_presentTechnicalAlarmConditions(alertSystemState->presentTechnicalAlarmConditions()),
    m_extensions(alertSystemState->extensions())
{
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::operator=(const AlertSystemState& alertSystemState)
{
    m_activationState = alertSystemState.activationState();
    m_lastSelfCheck = alertSystemState.lastSelfCheck();
    m_selfCheckCount = alertSystemState.selfCheckCount();
    m_presentPhysiologicalAlarmConditions = alertSystemState.presentPhysiologicalAlarmConditions();
    m_presentTechnicalAlarmConditions = alertSystemState.presentTechnicalAlarmConditions();
    m_extensions = alertSystemState.extensions();
    return *this;
}

inline AlertSystemState AlertSystemStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return AlertSystemState(m_activationState, m_lastSelfCheck, m_selfCheckCount, m_presentPhysiologicalAlarmConditions, m_presentTechnicalAlarmConditions, m_extensions);
}

inline bool AlertSystemStateBuilder::isChanged(const AlertSystemState& base) const
{
    return *this != base;
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::activationState(AlertActivation activationState)
{
    m_activationState = activationState;
    return *this;
}

inline AlertActivation& AlertSystemStateBuilder::activationState()
{
    return m_activationState;
}

inline AlertActivation AlertSystemStateBuilder::activationState() const
{
    return m_activationState;
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::lastSelfCheck(const boost::optional<Timestamp>& lastSelfCheck)
{
    m_lastSelfCheck = lastSelfCheck;
    return *this;
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::lastSelfCheck(boost::optional<Timestamp>&& lastSelfCheck)
{
    m_lastSelfCheck = std::move(lastSelfCheck);
    return *this;
}

inline boost::optional<Timestamp>& AlertSystemStateBuilder::lastSelfCheck()
{
    return m_lastSelfCheck;
}

inline const boost::optional<Timestamp>& AlertSystemStateBuilder::lastSelfCheck() const
{
    return m_lastSelfCheck;
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::selfCheckCount(const boost::optional<SelfCheckCount>& selfCheckCount)
{
    m_selfCheckCount = selfCheckCount;
    return *this;
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::selfCheckCount(boost::optional<SelfCheckCount>&& selfCheckCount)
{
    m_selfCheckCount = std::move(selfCheckCount);
    return *this;
}

inline boost::optional<SelfCheckCount>& AlertSystemStateBuilder::selfCheckCount()
{
    return m_selfCheckCount;
}

inline const boost::optional<SelfCheckCount>& AlertSystemStateBuilder::selfCheckCount() const
{
    return m_selfCheckCount;
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::presentPhysiologicalAlarmConditions(const HandleSet& presentPhysiologicalAlarmConditions)
{
    m_presentPhysiologicalAlarmConditions = presentPhysiologicalAlarmConditions;
    return *this;
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::presentPhysiologicalAlarmConditions(HandleSet&& presentPhysiologicalAlarmConditions)
{
    m_presentPhysiologicalAlarmConditions = std::move(presentPhysiologicalAlarmConditions);
    return *this;
}

inline HandleSet& AlertSystemStateBuilder::presentPhysiologicalAlarmConditions()
{
    return m_presentPhysiologicalAlarmConditions;
}

inline const HandleSet& AlertSystemStateBuilder::presentPhysiologicalAlarmConditions() const
{
    return m_presentPhysiologicalAlarmConditions;
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::presentTechnicalAlarmConditions(const HandleSet& presentTechnicalAlarmConditions)
{
    m_presentTechnicalAlarmConditions = presentTechnicalAlarmConditions;
    return *this;
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::presentTechnicalAlarmConditions(HandleSet&& presentTechnicalAlarmConditions)
{
    m_presentTechnicalAlarmConditions = std::move(presentTechnicalAlarmConditions);
    return *this;
}

inline HandleSet& AlertSystemStateBuilder::presentTechnicalAlarmConditions()
{
    return m_presentTechnicalAlarmConditions;
}

inline const HandleSet& AlertSystemStateBuilder::presentTechnicalAlarmConditions() const
{
    return m_presentTechnicalAlarmConditions;
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline AlertSystemStateBuilder& AlertSystemStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& AlertSystemStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& AlertSystemStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const AlertSystemState& lhs, const AlertSystemStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const AlertSystemStateBuilder& lhs, const AlertSystemStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const AlertSystemState& lhs, const AlertSystemStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const AlertSystemStateBuilder& lhs, const AlertSystemState& rhs)
{
    return !(lhs == rhs);
}

inline AlertSystemStateBuilder getBuilder(const AlertSystemState& alertSystemState)
{
    return AlertSystemStateBuilder(alertSystemState);
}

inline AlertSystemStateBuilder getBuilder(const DFL::NotNull<SharedPtr<AlertSystemState>>& alertSystemState)
{
    return AlertSystemStateBuilder(alertSystemState);
}

}
}
