#pragma once

#include <Framework/Mdib/Private/MdibEntity.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Mdib/Private/Utils/MdsVmdTypes.h>
#include <Framework/Mdib/Public/Model/Alert/AlertSignalDescriptorBuilder.h>
#include <Framework/Mdib/Public/Model/Alert/AlertSignalStateBuilder.h>

namespace DFL
{
namespace Mdib
{
class MdsAlertSignal;
class MdsAlertSystem;
class VmdAlertSignal;
class VmdAlertSystem;

/**
 * @brief Type safe handle for \ref MdsAlertSignal.
 * @ingroup Mdib
 */
using MdsAlertSignalHandle = BasicHandle<MdsAlertSignal>;
/**
 * @brief Type safe handle for \ref VmdAlertSignal.
 * @ingroup Mdib
 */
using VmdAlertSignalHandle = BasicHandle<VmdAlertSignal>;

/**
 * @brief Description of all alert signals that may be generated by the surrounding \ref AlertSystem as a
 * consequence of a detected \ref AlertCondition.
 * @ingroup Mdib
 */
template<class T_Entity, class T_Parent>
class AlertSignal: public Impl::MdibEntity<T_Entity, AlertSignalDescriptorBuilder, AlertSignalStateBuilder, T_Parent>
{
    DFL_MDIB_IMMUTABLE(AlertSignal)
    protected:
        /**
         * @brief Constructor.
         */
        AlertSignal(const BasicHandle<T_Entity>& handle,
                    const DFL::NotNull<AlertSignalDescriptorSharedPtr>& descriptor,
                    VersionCounter descriptorVersion,
                    const DFL::NotNull<AlertSignalStateSharedPtr>& state,
                    VersionCounter stateVersion,
                    const BasicHandle<T_Parent>& parent);
};

/**
 * @brief Definition of an \ref AlertSignal that has an \ref MdsAlertSystem as parent.
 */
class MdsAlertSignal: public AlertSignal<MdsAlertSignal, MdsAlertSystem>
{
    DFL_MDIB_IMMUTABLE(MdsAlertSignal)
    public:
        /**
         * @brief Constructor.
         */
        MdsAlertSignal(const MdsAlertSignalHandle& handle,
                       const DFL::NotNull<AlertSignalDescriptorSharedPtr>& descriptor,
                       VersionCounter descriptorVersion,
                       const DFL::NotNull<AlertSignalStateSharedPtr>& state,
                       VersionCounter stateVersion,
                       const BasicHandle<MdsAlertSystem>& parent);
};

/**
 * @brief Definition of an \ref AlertSignal that has a \ref VmdAlertSystem as parent.
 */
class VmdAlertSignal: public AlertSignal<VmdAlertSignal, VmdAlertSystem>
{
    DFL_MDIB_IMMUTABLE(VmdAlertSignal)
    public:
        /**
         * @brief Constructor.
         */
        VmdAlertSignal(const VmdAlertSignalHandle& handle,
                       const DFL::NotNull<AlertSignalDescriptorSharedPtr>& descriptor,
                       VersionCounter descriptorVersion,
                       const DFL::NotNull<AlertSignalStateSharedPtr>& state,
                       VersionCounter stateVersion,
                       const BasicHandle<VmdAlertSystem>& parent);
};

/**
 * @brief Type information of \ref AlertSignal
 */
DFL_MDIB_MDSVMD_TYPES(AlertSignal)


template<class T_Entity, class T_Parent>
inline AlertSignal<T_Entity, T_Parent>::AlertSignal(const BasicHandle<T_Entity>& handle,
                                                    const DFL::NotNull<AlertSignalDescriptorSharedPtr>& descriptor,
                                                    VersionCounter descriptorVersion,
                                                    const DFL::NotNull<AlertSignalStateSharedPtr>& state,
                                                    VersionCounter stateVersion,
                                                    const BasicHandle<T_Parent>& parent) :
        Impl::MdibEntity<T_Entity, AlertSignalDescriptorBuilder, AlertSignalStateBuilder, T_Parent>(handle, descriptor, descriptorVersion, state, stateVersion, parent)
{
}

inline MdsAlertSignal::MdsAlertSignal(const MdsAlertSignalHandle& handle,
                                      const DFL::NotNull<AlertSignalDescriptorSharedPtr>& descriptor,
                                      VersionCounter descriptorVersion,
                                      const DFL::NotNull<AlertSignalStateSharedPtr>& state,
                                      VersionCounter stateVersion,
                                      const BasicHandle<MdsAlertSystem>& parent):
        AlertSignal(handle, descriptor, descriptorVersion, state, stateVersion, parent)
{
}

inline VmdAlertSignal::VmdAlertSignal(const VmdAlertSignalHandle& handle,
                                      const DFL::NotNull<AlertSignalDescriptorSharedPtr>& descriptor,
                                      VersionCounter descriptorVersion,
                                      const DFL::NotNull<AlertSignalStateSharedPtr>& state,
                                      VersionCounter stateVersion,
                                      const BasicHandle<VmdAlertSystem>& parent):
        AlertSignal(handle, descriptor, descriptorVersion, state, stateVersion, parent)
{
}

/**
 * @brief Definition of shared pointer type \ref MdsAlertSignalSharedPtr for entity \ref MdsAlertSignal.
 */
using MdsAlertSignalSharedPtr = SharedPtr<MdsAlertSignal>;

/**
 * @brief Definition of shared pointer type \ref VmdAlertSignalSharedPtr for entity \ref VmdAlertSignal.
 */
using VmdAlertSignalSharedPtr = SharedPtr<VmdAlertSignal>;

} /* namespace Mdib */
} /* namespace DFL */
