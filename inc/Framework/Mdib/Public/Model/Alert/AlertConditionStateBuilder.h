/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Alert/AlertConditionState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref AlertConditionState
 * @ingroup Mdib
 */
class AlertConditionStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref AlertConditionState
        using BuiltType = AlertConditionState;

        /// @brief Builder based on given immutable @ref AlertConditionState
        explicit AlertConditionStateBuilder(const AlertConditionState& alertConditionState=AlertConditionState());

        /// @brief Builder based on given immutable @ref AlertConditionState
        explicit AlertConditionStateBuilder(const DFL::NotNull<SharedPtr<AlertConditionState>>& alertConditionState);

        /// @brief Overwrite all values with given immutable @ref AlertConditionState
        AlertConditionStateBuilder& operator=(const AlertConditionState& alertConditionState);

        /// @brief Explicit conversion to immutable @ref AlertConditionState
        AlertConditionState build() const;

        /// @brief Test whether the builder differs from the immutable @ref AlertConditionState
        bool isChanged(const AlertConditionState& base) const;

        /// @brief Setter for activationState
        /// @{
        AlertConditionStateBuilder& activationState(AlertActivation activationState);
        /// @}

        /// @brief Setter for actualConditionGenerationDelay
        /// @{
        AlertConditionStateBuilder& actualConditionGenerationDelay(const boost::optional<Duration>& actualConditionGenerationDelay);
        AlertConditionStateBuilder& actualConditionGenerationDelay(boost::optional<Duration>&& actualConditionGenerationDelay);
        /// @}

        /// @brief Setter for actualPriority
        /// @{
        AlertConditionStateBuilder& actualPriority(boost::optional<AlertConditionPriority> actualPriority);
        /// @}

        /// @brief Setter for rank
        /// @{
        AlertConditionStateBuilder& rank(const boost::optional<Rank>& rank);
        AlertConditionStateBuilder& rank(boost::optional<Rank>&& rank);
        /// @}

        /// @brief Setter for presence
        /// @{
        AlertConditionStateBuilder& presence(AlertConditionPresence presence);
        /// @}

        /// @brief Setter for determinationTime
        /// @{
        AlertConditionStateBuilder& determinationTime(const boost::optional<Timestamp>& determinationTime);
        AlertConditionStateBuilder& determinationTime(boost::optional<Timestamp>&& determinationTime);
        /// @}

        /// @brief Setter for extensions
        /// @{
        AlertConditionStateBuilder& extensions(const ExtensionTypes& extensions);
        AlertConditionStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for activationState
        /// @{
        AlertActivation& activationState();
        AlertActivation activationState() const;
        /// @}

        /// @brief Getter for actualConditionGenerationDelay
        /// @{
        boost::optional<Duration>& actualConditionGenerationDelay();
        const boost::optional<Duration>& actualConditionGenerationDelay() const;
        /// @}

        /// @brief Getter for actualPriority
        /// @{
        boost::optional<AlertConditionPriority>& actualPriority();
        boost::optional<AlertConditionPriority> actualPriority() const;
        /// @}

        /// @brief Getter for rank
        /// @{
        boost::optional<Rank>& rank();
        const boost::optional<Rank>& rank() const;
        /// @}

        /// @brief Getter for presence
        /// @{
        AlertConditionPresence& presence();
        AlertConditionPresence presence() const;
        /// @}

        /// @brief Getter for determinationTime
        /// @{
        boost::optional<Timestamp>& determinationTime();
        const boost::optional<Timestamp>& determinationTime() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        AlertActivation m_activationState;
        boost::optional<Duration> m_actualConditionGenerationDelay;
        boost::optional<AlertConditionPriority> m_actualPriority;
        boost::optional<Rank> m_rank;
        AlertConditionPresence m_presence;
        boost::optional<Timestamp> m_determinationTime;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const AlertConditionState& lhs, const AlertConditionState& rhs);
DFL_MDIB_EXPIMP bool operator==(const AlertConditionStateBuilder& lhs, const AlertConditionStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const AlertConditionStateBuilder& lhs, const AlertConditionState& rhs);
bool operator==(const AlertConditionState& lhs, const AlertConditionStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const AlertConditionState& lhs, const AlertConditionState& rhs);
bool operator!=(const AlertConditionStateBuilder& lhs, const AlertConditionStateBuilder& rhs);
bool operator!=(const AlertConditionState& lhs, const AlertConditionStateBuilder& rhs);
bool operator!=(const AlertConditionStateBuilder& lhs, const AlertConditionState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref AlertConditionState
 * @ingroup Mdib
 */
/// @{
AlertConditionStateBuilder getBuilder(const AlertConditionState& alertConditionState);
AlertConditionStateBuilder getBuilder(const DFL::NotNull<SharedPtr<AlertConditionState>>& alertConditionState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const AlertConditionState& lhs, const AlertConditionState& rhs);

inline AlertConditionStateBuilder::AlertConditionStateBuilder(const AlertConditionState& alertConditionState) :
    m_activationState(alertConditionState.activationState()),
    m_actualConditionGenerationDelay(alertConditionState.actualConditionGenerationDelay()),
    m_actualPriority(alertConditionState.actualPriority()),
    m_rank(alertConditionState.rank()),
    m_presence(alertConditionState.presence()),
    m_determinationTime(alertConditionState.determinationTime()),
    m_extensions(alertConditionState.extensions())
{
}

inline AlertConditionStateBuilder::AlertConditionStateBuilder(const DFL::NotNull<SharedPtr<AlertConditionState>>& alertConditionState) :
    m_activationState(alertConditionState->activationState()),
    m_actualConditionGenerationDelay(alertConditionState->actualConditionGenerationDelay()),
    m_actualPriority(alertConditionState->actualPriority()),
    m_rank(alertConditionState->rank()),
    m_presence(alertConditionState->presence()),
    m_determinationTime(alertConditionState->determinationTime()),
    m_extensions(alertConditionState->extensions())
{
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::operator=(const AlertConditionState& alertConditionState)
{
    m_activationState = alertConditionState.activationState();
    m_actualConditionGenerationDelay = alertConditionState.actualConditionGenerationDelay();
    m_actualPriority = alertConditionState.actualPriority();
    m_rank = alertConditionState.rank();
    m_presence = alertConditionState.presence();
    m_determinationTime = alertConditionState.determinationTime();
    m_extensions = alertConditionState.extensions();
    return *this;
}

inline AlertConditionState AlertConditionStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return AlertConditionState(m_activationState, m_actualConditionGenerationDelay, m_actualPriority, m_rank, m_presence, m_determinationTime, m_extensions);
}

inline bool AlertConditionStateBuilder::isChanged(const AlertConditionState& base) const
{
    return *this != base;
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::activationState(AlertActivation activationState)
{
    m_activationState = activationState;
    return *this;
}

inline AlertActivation& AlertConditionStateBuilder::activationState()
{
    return m_activationState;
}

inline AlertActivation AlertConditionStateBuilder::activationState() const
{
    return m_activationState;
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::actualConditionGenerationDelay(const boost::optional<Duration>& actualConditionGenerationDelay)
{
    m_actualConditionGenerationDelay = actualConditionGenerationDelay;
    return *this;
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::actualConditionGenerationDelay(boost::optional<Duration>&& actualConditionGenerationDelay)
{
    m_actualConditionGenerationDelay = std::move(actualConditionGenerationDelay);
    return *this;
}

inline boost::optional<Duration>& AlertConditionStateBuilder::actualConditionGenerationDelay()
{
    return m_actualConditionGenerationDelay;
}

inline const boost::optional<Duration>& AlertConditionStateBuilder::actualConditionGenerationDelay() const
{
    return m_actualConditionGenerationDelay;
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::actualPriority(boost::optional<AlertConditionPriority> actualPriority)
{
    m_actualPriority = actualPriority;
    return *this;
}

inline boost::optional<AlertConditionPriority>& AlertConditionStateBuilder::actualPriority()
{
    return m_actualPriority;
}

inline boost::optional<AlertConditionPriority> AlertConditionStateBuilder::actualPriority() const
{
    return m_actualPriority;
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::rank(const boost::optional<Rank>& rank)
{
    m_rank = rank;
    return *this;
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::rank(boost::optional<Rank>&& rank)
{
    m_rank = std::move(rank);
    return *this;
}

inline boost::optional<Rank>& AlertConditionStateBuilder::rank()
{
    return m_rank;
}

inline const boost::optional<Rank>& AlertConditionStateBuilder::rank() const
{
    return m_rank;
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::presence(AlertConditionPresence presence)
{
    m_presence = presence;
    return *this;
}

inline AlertConditionPresence& AlertConditionStateBuilder::presence()
{
    return m_presence;
}

inline AlertConditionPresence AlertConditionStateBuilder::presence() const
{
    return m_presence;
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::determinationTime(const boost::optional<Timestamp>& determinationTime)
{
    m_determinationTime = determinationTime;
    return *this;
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::determinationTime(boost::optional<Timestamp>&& determinationTime)
{
    m_determinationTime = std::move(determinationTime);
    return *this;
}

inline boost::optional<Timestamp>& AlertConditionStateBuilder::determinationTime()
{
    return m_determinationTime;
}

inline const boost::optional<Timestamp>& AlertConditionStateBuilder::determinationTime() const
{
    return m_determinationTime;
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline AlertConditionStateBuilder& AlertConditionStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& AlertConditionStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& AlertConditionStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const AlertConditionState& lhs, const AlertConditionStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const AlertConditionStateBuilder& lhs, const AlertConditionStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const AlertConditionState& lhs, const AlertConditionStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const AlertConditionStateBuilder& lhs, const AlertConditionState& rhs)
{
    return !(lhs == rhs);
}

inline AlertConditionStateBuilder getBuilder(const AlertConditionState& alertConditionState)
{
    return AlertConditionStateBuilder(alertConditionState);
}

inline AlertConditionStateBuilder getBuilder(const DFL::NotNull<SharedPtr<AlertConditionState>>& alertConditionState)
{
    return AlertConditionStateBuilder(alertConditionState);
}

}
}
