#pragma once

#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Mdib/Public/Model/AbstractDescriptor.h>
#include <Framework/Mdib/Public/Model/Alert/AlertSignalManifestation.h>
#include <Framework/Mdib/Public/Model/Duration.h>
#include <Framework/Mdib/Public/Model/Handle.h>
#include <Framework/Mdib/Public/Model/SafetyClassification.h>
#include <Framework/Utils/Public/EnumClass.h>
#include <memory>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Boolean to differentiate between latching and non-latching.
 * @ingroup Mdib
 */
enum class Latching
{
    LatchingSignal, ///< Latching signal
    NonLatchingSignal ///< Non latching signal
};
DFL_ENUM_CLASS_STREAM_OPERATOR(Latching, (LatchingSignal)(NonLatchingSignal))

/**
 * @brief Boolean for signal delegation support.
 * @ingroup Mdib
 */
enum class SignalDelegation
{
    Supported, ///< Supported
    NotSupported ///< Not supported
};
DFL_ENUM_CLASS_STREAM_OPERATOR(SignalDelegation, (Supported)(NotSupported))

/**
 * @brief Boolean for acknowledgment support.
 * @ingroup Mdib
 */
enum class AcknowledgmentSupport
{
    Supported, ///< Supported
    NotSupported ///< Not supported
};
DFL_ENUM_CLASS_STREAM_OPERATOR(AcknowledgmentSupport, (Supported)(NotSupported))

/**
 * @brief   Defines the dynamic part of an alert signal.
 * @details An alert signal contains information about the way an alert condition (see
 *          \ref AlertCondition) is communicated to a human. It is generated by an alert system
 *          (see \ref AlertSystem) to indicate the presence or occurrence of an alert condition.
 * @ingroup Mdib
 */
class AlertSignalDescriptor: public AbstractDescriptor
{
    DFL_MDIB_IMMUTABLE(AlertSignalDescriptor)

    public:
        /**
         * @brief Default constructor.
         * @details Defaults
         *
         * - \ref AlertSignalDescriptor::conditionSignaledHandle() "Condition signaled handle" to \ref Handle::Handle() "invalid handle"
         * - \ref AlertSignalDescriptor::manifestation() "Manifestation" to \ref AlertSignalManifestation::Other "other"
         * - \ref AlertSignalDescriptor::latching() "Latching" to \ref Latching::NonLatchingSignal "non-latching signal"
         * - \ref AlertSignalDescriptor::defaultSignalGenerationDelay() "Default signal generation delay" to 0 seconds
         * - \ref AlertSignalDescriptor::minSignalGenerationDelay() "Minimum signal generation delay" to none
         * - \ref AlertSignalDescriptor::maxSignalGenerationDelay() "Maximum signal generation delay" to none
         * - \ref AlertSignalDescriptor::signalDelegationSupport() "Signal delegation support" to \ref SignalDelegation::NotSupported "not supported"
         * - \ref AlertSignalDescriptor::acknowledgmentSupport() "Acknowledgment support" to to \ref AcknowledgmentSupport::NotSupported "not supported"
         * - \ref AlertSignalDescriptor::acknowledgeTimeout() "Acknowledge timeout" to none
         *
         * \note Also applies defaults from \ref AbstractDescriptor.
         */
        AlertSignalDescriptor() = default;

        /**
         * @brief Full constructor.
         */
        AlertSignalDescriptor(SafetyClassification safetyClassification,
                              boost::optional<CodedValue>&& type,
                              Handle conditionSignaledHandle,
                              AlertSignalManifestation manifestation,
                              Latching latching,
                              const Duration& defaultSignalGenerationDelay,
                              boost::optional<Duration> minSignalGenerationDelay,
                              boost::optional<Duration> maxSignalGenerationDelay,
                              SignalDelegation signalDelegationSupport,
                              AcknowledgmentSupport acknowledgmentSupport,
                              boost::optional<Duration> acknowledgeTimeout,
                              ExtensionTypes extensions = ExtensionTypes{ });

        /**
         * @brief Full constructor.
         */
        AlertSignalDescriptor(SafetyClassification safetyClassification,
                              const boost::optional<CodedValue>& type,
                              Handle conditionSignaledHandle,
                              AlertSignalManifestation manifestation,
                              Latching latching,
                              const Duration& defaultSignalGenerationDelay,
                              boost::optional<Duration> minSignalGenerationDelay,
                              boost::optional<Duration> maxSignalGenerationDelay,
                              SignalDelegation signalDelegationSupport,
                              AcknowledgmentSupport acknowledgmentSupport,
                              boost::optional<Duration> acknowledgeTimeout,
                              ExtensionTypes extensions = ExtensionTypes{ });

        /**
         * @brief The handle of the condition that wakes up the signal.
         */
        const Handle& conditionSignaledHandle() const;

        /**
         * @brief   Alert signal manifestation.
         * @details The manifestation determines how an alert signal can be perceived (see \ref AlertSignalManifestation)
         */
        AlertSignalManifestation manifestation() const;

        /**
         * @brief   Flag to access if a signal is latching or not.
         * @details An alert signal is latching if it outlives its triggering alert condition until it is stopped by
         *          deliberate action.
         */
        Latching latching() const;

        /**
         * @brief   The default signal generation delay is a period from the onset of an alert condition to the
         *          generation of the alert signal.
         */
        const Duration& defaultSignalGenerationDelay() const;

        /**
         * @brief   Optional minimum delay of \ref AlertSignalState::actualSignalGenerationDelay.
         */
        const boost::optional<Duration>& minSignalGenerationDelay() const;

        /**
         * @brief   Optional maximum delay of \ref AlertSignalState::actualSignalGenerationDelay.
         */
        const boost::optional<Duration>& maxSignalGenerationDelay() const;

        /**
         * @brief   Return whether the alert signal supports delegation.
         * @details Signal supports delegation means that an alert signal can be generated on another device as
         *          primary alert signal.
         */
        SignalDelegation signalDelegationSupport() const;

        /**
         * @brief   Indicate if the alert signal supports acknowledgment.
         */
        AcknowledgmentSupport acknowledgmentSupport() const;

        /**
         * @brief   Indicates the acknowledgment timeout if the signal supports acknowledgment.
         * @details This value is only operative if AlertSignalDescriptor::acknowledgementSupport()
         *          returns \c true. The acknowledgment timeout is given as a duration or is set to \c boost::none
         *          if the duration is infinite.
         */
        const boost::optional<Duration>& acknowledgeTimeout() const;

    private:
        Handle m_conditionSignaledHandle{};
        AlertSignalManifestation m_manifestation{AlertSignalManifestation::Other};
        Latching m_latching{Latching::NonLatchingSignal};
        Duration m_defaultSignalGenerationDelay{DFL::Chrono::Seconds(0)};
        boost::optional<Duration> m_minSignalGenerationDelay{};
        boost::optional<Duration> m_maxSignalGenerationDelay{};
        SignalDelegation m_signalDelegationSupport{SignalDelegation::NotSupported};
        AcknowledgmentSupport m_acknowledgmentSupport{AcknowledgmentSupport::NotSupported};
        boost::optional<Duration> m_acknowledgeTimeout{};
};

inline AlertSignalDescriptor::AlertSignalDescriptor(SafetyClassification safetyClassification,
                                                    boost::optional<CodedValue>&& type,
                                                    Handle conditionSignaledHandle,
                                                    AlertSignalManifestation manifestation,
                                                    Latching latching,
                                                    const Duration& defaultSignalGenerationDelay,
                                                    boost::optional<Duration> minSignalGenerationDelay,
                                                    boost::optional<Duration> maxSignalGenerationDelay,
                                                    SignalDelegation signalDelegationSupport,
                                                    AcknowledgmentSupport acknowledgmentSupport,
                                                    boost::optional<Duration> acknowledgeTimeout,
                                                    ExtensionTypes extensions) :
        AbstractDescriptor(safetyClassification, std::move(type), std::move(extensions)),
        m_conditionSignaledHandle(std::move(conditionSignaledHandle)),
        m_manifestation(manifestation),
        m_latching(latching),
        m_defaultSignalGenerationDelay(defaultSignalGenerationDelay),
        m_minSignalGenerationDelay(std::move(minSignalGenerationDelay)),
        m_maxSignalGenerationDelay(std::move(maxSignalGenerationDelay)),
        m_signalDelegationSupport(signalDelegationSupport),
        m_acknowledgmentSupport(acknowledgmentSupport),
        m_acknowledgeTimeout(std::move(acknowledgeTimeout))
{
}

inline AlertSignalDescriptor::AlertSignalDescriptor(SafetyClassification safetyClassification,
                                                    const boost::optional<CodedValue>& type,
                                                    Handle conditionSignaledHandle,
                                                    AlertSignalManifestation manifestation,
                                                    Latching latching,
                                                    const Duration& defaultSignalGenerationDelay,
                                                    boost::optional<Duration> minSignalGenerationDelay,
                                                    boost::optional<Duration> maxSignalGenerationDelay,
                                                    SignalDelegation signalDelegationSupport,
                                                    AcknowledgmentSupport acknowledgmentSupport,
                                                    boost::optional<Duration> acknowledgeTimeout,
                                                    ExtensionTypes extensions) :
        AbstractDescriptor(safetyClassification, type, std::move(extensions)),
        m_conditionSignaledHandle(std::move(conditionSignaledHandle)),
        m_manifestation(manifestation),
        m_latching(latching),
        m_defaultSignalGenerationDelay(defaultSignalGenerationDelay),
        m_minSignalGenerationDelay(std::move(minSignalGenerationDelay)),
        m_maxSignalGenerationDelay(std::move(maxSignalGenerationDelay)),
        m_signalDelegationSupport(signalDelegationSupport),
        m_acknowledgmentSupport(acknowledgmentSupport),
        m_acknowledgeTimeout(std::move(acknowledgeTimeout))
{
}

inline const Handle& AlertSignalDescriptor::conditionSignaledHandle() const
{
    return m_conditionSignaledHandle;
}

inline AlertSignalManifestation AlertSignalDescriptor::manifestation() const
{
    return m_manifestation;
}

inline Latching AlertSignalDescriptor::latching() const
{
    return m_latching;
}

inline const Duration& AlertSignalDescriptor::defaultSignalGenerationDelay() const
{
    return m_defaultSignalGenerationDelay;
}

inline const boost::optional<Duration>& AlertSignalDescriptor::minSignalGenerationDelay() const
{
    return m_minSignalGenerationDelay;
}

inline const boost::optional<Duration>& AlertSignalDescriptor::maxSignalGenerationDelay() const
{
    return m_maxSignalGenerationDelay;
}

inline SignalDelegation AlertSignalDescriptor::signalDelegationSupport() const
{
    return m_signalDelegationSupport;
}

inline AcknowledgmentSupport AlertSignalDescriptor::acknowledgmentSupport() const
{
    return m_acknowledgmentSupport;
}

inline const boost::optional<Duration>& AlertSignalDescriptor::acknowledgeTimeout() const
{
    return m_acknowledgeTimeout;
}

/**
 * @brief Definition of shared pointer type \ref AlertSignalDescriptorSharedPtr for descriptor \ref AlertSignalDescriptor.
 * @ingroup Mdib
 */
using AlertSignalDescriptorSharedPtr = SharedPtr<AlertSignalDescriptor>;


} /* namespace Mdib */
} /* namespace DFL */
