/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <Framework/Mdib/Public/Model/Metric/SampleArrayValue.h>
#include <Framework/Chrono/Public/SystemTimeSerialize.h>
#include <Framework/Mdib/Public/Model/ExtensionTypeSerialize.h>
#include <Framework/Mdib/Public/Model/Metric/AnnotationSerialize.h>
#include <Framework/Mdib/Public/Model/Metric/MetricQualitySerialize.h>
#include <Framework/Mdib/Public/Model/Metric/SampleSerialize.h>
#include <Framework/Utils/Public/SerializationHelper.h>

#include <boost/serialization/nvp.hpp>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/version.hpp>
#include <boost/serialization/optional.hpp>
#include <boost/serialization/vector.hpp>

#include <utility>

BOOST_SERIALIZATION_SPLIT_FREE(::DFL::Mdib::SampleArrayValue)

BOOST_CLASS_VERSION(::DFL::Mdib::SampleArrayValue, 0)

BOOST_CLASS_TRACKING(::DFL::Mdib::SampleArrayValue, boost::serialization::track_never)

namespace boost
{
namespace serialization
{
/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void save(Archive& ar, const ::DFL::Mdib::SampleArrayValue& src, const unsigned int /*fileVersion*/)
{
    const auto& metricQuality = src.metricQuality();
    ar & make_nvp("MetricQuality", metricQuality);

    const auto& annotations = src.annotations();
    ar & make_nvp("Annotations", annotations);

    const auto& startTime = src.startTime();
    ar & make_nvp("StartTime", startTime);

    const auto& stopTime = src.stopTime();
    ar & make_nvp("StopTime", stopTime);

    const auto& determinationTime = src.determinationTime();
    ar & make_nvp("DeterminationTime", determinationTime);

    const auto& samples = src.samples();
    ar & make_nvp("Samples", samples);

    const auto& extensions = src.extensions();
    ar & make_nvp("Extensions", extensions);
}

/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void load(Archive& ar, ::DFL::Mdib::SampleArrayValue& dst, const unsigned int /*version*/)
{
    ::DFL::Mdib::MetricQuality metricQuality{};
    ar & make_nvp("MetricQuality", metricQuality);

    ::DFL::Mdib::Annotations annotations{};
    ar & make_nvp("Annotations", annotations);

    boost::optional<::DFL::Mdib::Timestamp> startTime{};
    ar & make_nvp("StartTime", startTime);

    boost::optional<::DFL::Mdib::Timestamp> stopTime{};
    ar & make_nvp("StopTime", stopTime);

    boost::optional<::DFL::Mdib::Timestamp> determinationTime{};
    ar & make_nvp("DeterminationTime", determinationTime);

    ::DFL::Mdib::Samples samples{};
    ar & make_nvp("Samples", samples);

    ::DFL::Mdib::ExtensionTypes extensions{};
    ar & make_nvp("Extensions", extensions);

    dst = ::DFL::Mdib::SampleArrayValue(
        std::move(metricQuality),
        std::move(annotations),
        std::move(startTime),
        std::move(stopTime),
        std::move(determinationTime),
        std::move(samples),
        std::move(extensions));
}

}
}
