#pragma once

#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Public/Model/Decimal.h>
#include <Framework/Mdib/Public/Model/Metric/GenerationMode.h>
#include <Framework/Mdib/Public/Model/Metric/MeasurementValidity.h>
#include <Framework/Mdib/Private/HasExtensions.h>

#include <Framework/Utils/Public/StrongTypedef.h>
#include <Framework/Utils/Public/SkillBoostSerializable.h>

namespace DFL
{
namespace Mdib
{
namespace Impl
{
struct QualityIndicatorTag;
}

/**
 * @brief Indicates the quality of a determined value, where 0 means lowest quality and 1 means high quality w.r.t. to the validity level.
 * @details
 * Valid value range is \c [0, 1] with
 *
 * - 0: The minimal value that indicates that a signal has the worst quality.
 * - 1: The maximal value that indicates that a signal has the best quality.
 * @ingroup Mdib
 */
using QualityIndicator = DFL::StrongTypedef<Decimal, Impl::QualityIndicatorTag, DFL::Skill::TotallyOrdered, DFL::Skill::Streamable, DFL::Skill::BoostSerializable>;

/**
 * @brief The quality state of the determined value of a metric.
 * @ingroup Mdib
 */
class MetricQuality: public Impl::HasExtensions
{
    public:
        /**
         * @brief Default constructor.
         * @details Defaults
         *
         * - \ref MetricQuality::validity() "Validity" to \ref MeasurementValidity::NotAvailable "NA"
         * - \ref MetricQuality::mode() "Mode" to \ref GenerationMode::Real
         * - \ref MetricQuality::qualityIndicator() to \c 1
         */
        MetricQuality() = default;

        /**
         * @brief Constructor with validity for \ref GenerationMode::Real "real generation mode" and \ref MetricQuality::qualityIndicator() "quality" 1.
         */
        explicit MetricQuality(MeasurementValidity validity);

        /**
         * @brief Full constructor.
         */
        MetricQuality(MeasurementValidity validity,
                      GenerationMode mode,
                      QualityIndicator qualityIndicator,
                      ExtensionTypes extensions = ExtensionTypes{ });

        /**
         * @brief Defines the validity of a metric as defined in \ref MeasurementValidity.
         * @details While the validity is \ref MeasurementValidity::MeasurementOngoing or \ref MeasurementValidity::NotAvailable,
         * the enclosing metric value shall not possess a determined value.
         *
         * \note In case of other values the enclosing metric is allowed to possess a determined value.
         */
        MeasurementValidity validity() const;

        /**
         * @brief Describes whether data is generated by a real metric source or is part of any test or demo data.
         */
        GenerationMode mode() const;

        /**
         * @brief The minimal value that indicates that the signal has the worst quality.
         */
        QualityIndicator qualityIndicator() const;

    private:
        MeasurementValidity m_validity{MeasurementValidity::NotAvailable};
        GenerationMode m_mode{GenerationMode::Real};
        QualityIndicator m_qualityIndicator{Decimal{1}};
};

/**
 * @brief Equal compare of \ref MetricQuality.
 * @param lhs left value for comparison.
 * @param rhs right value for comparison.
 * @return \c true in case all value are equal.
 */
DFL_MDIB_EXPIMP bool operator==(const MetricQuality& lhs, const MetricQuality& rhs);

/**
 * @brief Not equal compare of \ref MetricQuality.
 * @param lhs left value for comparison.
 * @param rhs right value for comparison.
 * @return \c true in case all value are not equal.
 */
DFL_MDIB_EXPIMP bool operator!=(const MetricQuality& lhs, const MetricQuality& rhs);

inline MetricQuality::MetricQuality(MeasurementValidity validity, GenerationMode mode, QualityIndicator qualityIndicator, ExtensionTypes extensions) :
        Impl::HasExtensions(std::move(extensions)),
        m_validity(validity),
        m_mode(mode),
        m_qualityIndicator(qualityIndicator)
{
}

inline MetricQuality::MetricQuality(MeasurementValidity validity) :
        m_validity(validity)
{
}

inline MeasurementValidity MetricQuality::validity() const
{
    return m_validity;
}

inline GenerationMode MetricQuality::mode() const
{
    return m_mode;
}

inline QualityIndicator MetricQuality::qualityIndicator() const
{
    return m_qualityIndicator;
}

} /* namespace Mdib */
} /* namespace DFL */
