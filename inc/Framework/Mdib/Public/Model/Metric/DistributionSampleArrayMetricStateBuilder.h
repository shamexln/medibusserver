/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Metric/DistributionSampleArrayMetricState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref DistributionSampleArrayMetricState
 * @ingroup Mdib
 */
class DistributionSampleArrayMetricStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref DistributionSampleArrayMetricState
        using BuiltType = DistributionSampleArrayMetricState;

        /// @brief Builder based on given immutable @ref DistributionSampleArrayMetricState
        explicit DistributionSampleArrayMetricStateBuilder(const DistributionSampleArrayMetricState& distributionSampleArrayMetricState=DistributionSampleArrayMetricState());

        /// @brief Builder based on given immutable @ref DistributionSampleArrayMetricState
        explicit DistributionSampleArrayMetricStateBuilder(const DFL::NotNull<SharedPtr<DistributionSampleArrayMetricState>>& distributionSampleArrayMetricState);

        /// @brief Overwrite all values with given immutable @ref DistributionSampleArrayMetricState
        DistributionSampleArrayMetricStateBuilder& operator=(const DistributionSampleArrayMetricState& distributionSampleArrayMetricState);

        /// @brief Explicit conversion to immutable @ref DistributionSampleArrayMetricState
        DistributionSampleArrayMetricState build() const;

        /// @brief Test whether the builder differs from the immutable @ref DistributionSampleArrayMetricState
        bool isChanged(const DistributionSampleArrayMetricState& base) const;

        /// @brief Setter for activationState
        /// @{
        DistributionSampleArrayMetricStateBuilder& activationState(ComponentActivation activationState);
        /// @}

        /// @brief Setter for activeDeterminationPeriod
        /// @{
        DistributionSampleArrayMetricStateBuilder& activeDeterminationPeriod(const boost::optional<Duration>& activeDeterminationPeriod);
        DistributionSampleArrayMetricStateBuilder& activeDeterminationPeriod(boost::optional<Duration>&& activeDeterminationPeriod);
        /// @}

        /// @brief Setter for lifeTimePeriod
        /// @{
        DistributionSampleArrayMetricStateBuilder& lifeTimePeriod(const boost::optional<Duration>& lifeTimePeriod);
        DistributionSampleArrayMetricStateBuilder& lifeTimePeriod(boost::optional<Duration>&& lifeTimePeriod);
        /// @}

        /// @brief Setter for bodySites
        /// @{
        DistributionSampleArrayMetricStateBuilder& bodySites(const BodySites& bodySites);
        DistributionSampleArrayMetricStateBuilder& bodySites(BodySites&& bodySites);
        /// @}

        /// @brief Setter for physicalConnector
        /// @{
        DistributionSampleArrayMetricStateBuilder& physicalConnector(const boost::optional<PhysicalConnectorInfo>& physicalConnector);
        DistributionSampleArrayMetricStateBuilder& physicalConnector(boost::optional<PhysicalConnectorInfo>&& physicalConnector);
        /// @}

        /// @brief Setter for metricValue
        /// @{
        DistributionSampleArrayMetricStateBuilder& metricValue(const boost::optional<SampleArrayValue>& metricValue);
        DistributionSampleArrayMetricStateBuilder& metricValue(boost::optional<SampleArrayValue>&& metricValue);
        /// @}

        /// @brief Setter for physiologicalRanges
        /// @{
        DistributionSampleArrayMetricStateBuilder& physiologicalRanges(const Ranges& physiologicalRanges);
        DistributionSampleArrayMetricStateBuilder& physiologicalRanges(Ranges&& physiologicalRanges);
        /// @}

        /// @brief Setter for extensions
        /// @{
        DistributionSampleArrayMetricStateBuilder& extensions(const ExtensionTypes& extensions);
        DistributionSampleArrayMetricStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for activationState
        /// @{
        ComponentActivation& activationState();
        ComponentActivation activationState() const;
        /// @}

        /// @brief Getter for activeDeterminationPeriod
        /// @{
        boost::optional<Duration>& activeDeterminationPeriod();
        const boost::optional<Duration>& activeDeterminationPeriod() const;
        /// @}

        /// @brief Getter for lifeTimePeriod
        /// @{
        boost::optional<Duration>& lifeTimePeriod();
        const boost::optional<Duration>& lifeTimePeriod() const;
        /// @}

        /// @brief Getter for bodySites
        /// @{
        BodySites& bodySites();
        const BodySites& bodySites() const;
        /// @}

        /// @brief Getter for physicalConnector
        /// @{
        boost::optional<PhysicalConnectorInfo>& physicalConnector();
        const boost::optional<PhysicalConnectorInfo>& physicalConnector() const;
        /// @}

        /// @brief Getter for metricValue
        /// @{
        boost::optional<SampleArrayValue>& metricValue();
        const boost::optional<SampleArrayValue>& metricValue() const;
        /// @}

        /// @brief Getter for physiologicalRanges
        /// @{
        Ranges& physiologicalRanges();
        const Ranges& physiologicalRanges() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        ComponentActivation m_activationState;
        boost::optional<Duration> m_activeDeterminationPeriod;
        boost::optional<Duration> m_lifeTimePeriod;
        BodySites m_bodySites;
        boost::optional<PhysicalConnectorInfo> m_physicalConnector;
        boost::optional<SampleArrayValue> m_metricValue;
        Ranges m_physiologicalRanges;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const DistributionSampleArrayMetricState& lhs, const DistributionSampleArrayMetricState& rhs);
DFL_MDIB_EXPIMP bool operator==(const DistributionSampleArrayMetricStateBuilder& lhs, const DistributionSampleArrayMetricStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const DistributionSampleArrayMetricStateBuilder& lhs, const DistributionSampleArrayMetricState& rhs);
bool operator==(const DistributionSampleArrayMetricState& lhs, const DistributionSampleArrayMetricStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const DistributionSampleArrayMetricState& lhs, const DistributionSampleArrayMetricState& rhs);
bool operator!=(const DistributionSampleArrayMetricStateBuilder& lhs, const DistributionSampleArrayMetricStateBuilder& rhs);
bool operator!=(const DistributionSampleArrayMetricState& lhs, const DistributionSampleArrayMetricStateBuilder& rhs);
bool operator!=(const DistributionSampleArrayMetricStateBuilder& lhs, const DistributionSampleArrayMetricState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref DistributionSampleArrayMetricState
 * @ingroup Mdib
 */
/// @{
DistributionSampleArrayMetricStateBuilder getBuilder(const DistributionSampleArrayMetricState& distributionSampleArrayMetricState);
DistributionSampleArrayMetricStateBuilder getBuilder(const DFL::NotNull<SharedPtr<DistributionSampleArrayMetricState>>& distributionSampleArrayMetricState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const DistributionSampleArrayMetricState& lhs, const DistributionSampleArrayMetricState& rhs);

inline DistributionSampleArrayMetricStateBuilder::DistributionSampleArrayMetricStateBuilder(const DistributionSampleArrayMetricState& distributionSampleArrayMetricState) :
    m_activationState(distributionSampleArrayMetricState.activationState()),
    m_activeDeterminationPeriod(distributionSampleArrayMetricState.activeDeterminationPeriod()),
    m_lifeTimePeriod(distributionSampleArrayMetricState.lifeTimePeriod()),
    m_bodySites(distributionSampleArrayMetricState.bodySites()),
    m_physicalConnector(distributionSampleArrayMetricState.physicalConnector()),
    m_metricValue(distributionSampleArrayMetricState.metricValue()),
    m_physiologicalRanges(distributionSampleArrayMetricState.physiologicalRanges()),
    m_extensions(distributionSampleArrayMetricState.extensions())
{
}

inline DistributionSampleArrayMetricStateBuilder::DistributionSampleArrayMetricStateBuilder(const DFL::NotNull<SharedPtr<DistributionSampleArrayMetricState>>& distributionSampleArrayMetricState) :
    m_activationState(distributionSampleArrayMetricState->activationState()),
    m_activeDeterminationPeriod(distributionSampleArrayMetricState->activeDeterminationPeriod()),
    m_lifeTimePeriod(distributionSampleArrayMetricState->lifeTimePeriod()),
    m_bodySites(distributionSampleArrayMetricState->bodySites()),
    m_physicalConnector(distributionSampleArrayMetricState->physicalConnector()),
    m_metricValue(distributionSampleArrayMetricState->metricValue()),
    m_physiologicalRanges(distributionSampleArrayMetricState->physiologicalRanges()),
    m_extensions(distributionSampleArrayMetricState->extensions())
{
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::operator=(const DistributionSampleArrayMetricState& distributionSampleArrayMetricState)
{
    m_activationState = distributionSampleArrayMetricState.activationState();
    m_activeDeterminationPeriod = distributionSampleArrayMetricState.activeDeterminationPeriod();
    m_lifeTimePeriod = distributionSampleArrayMetricState.lifeTimePeriod();
    m_bodySites = distributionSampleArrayMetricState.bodySites();
    m_physicalConnector = distributionSampleArrayMetricState.physicalConnector();
    m_metricValue = distributionSampleArrayMetricState.metricValue();
    m_physiologicalRanges = distributionSampleArrayMetricState.physiologicalRanges();
    m_extensions = distributionSampleArrayMetricState.extensions();
    return *this;
}

inline DistributionSampleArrayMetricState DistributionSampleArrayMetricStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return DistributionSampleArrayMetricState(m_activationState, m_activeDeterminationPeriod, m_lifeTimePeriod, m_bodySites, m_physicalConnector, m_metricValue, m_physiologicalRanges, m_extensions);
}

inline bool DistributionSampleArrayMetricStateBuilder::isChanged(const DistributionSampleArrayMetricState& base) const
{
    return *this != base;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::activationState(ComponentActivation activationState)
{
    m_activationState = activationState;
    return *this;
}

inline ComponentActivation& DistributionSampleArrayMetricStateBuilder::activationState()
{
    return m_activationState;
}

inline ComponentActivation DistributionSampleArrayMetricStateBuilder::activationState() const
{
    return m_activationState;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::activeDeterminationPeriod(const boost::optional<Duration>& activeDeterminationPeriod)
{
    m_activeDeterminationPeriod = activeDeterminationPeriod;
    return *this;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::activeDeterminationPeriod(boost::optional<Duration>&& activeDeterminationPeriod)
{
    m_activeDeterminationPeriod = std::move(activeDeterminationPeriod);
    return *this;
}

inline boost::optional<Duration>& DistributionSampleArrayMetricStateBuilder::activeDeterminationPeriod()
{
    return m_activeDeterminationPeriod;
}

inline const boost::optional<Duration>& DistributionSampleArrayMetricStateBuilder::activeDeterminationPeriod() const
{
    return m_activeDeterminationPeriod;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::lifeTimePeriod(const boost::optional<Duration>& lifeTimePeriod)
{
    m_lifeTimePeriod = lifeTimePeriod;
    return *this;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::lifeTimePeriod(boost::optional<Duration>&& lifeTimePeriod)
{
    m_lifeTimePeriod = std::move(lifeTimePeriod);
    return *this;
}

inline boost::optional<Duration>& DistributionSampleArrayMetricStateBuilder::lifeTimePeriod()
{
    return m_lifeTimePeriod;
}

inline const boost::optional<Duration>& DistributionSampleArrayMetricStateBuilder::lifeTimePeriod() const
{
    return m_lifeTimePeriod;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::bodySites(const BodySites& bodySites)
{
    m_bodySites = bodySites;
    return *this;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::bodySites(BodySites&& bodySites)
{
    m_bodySites = std::move(bodySites);
    return *this;
}

inline BodySites& DistributionSampleArrayMetricStateBuilder::bodySites()
{
    return m_bodySites;
}

inline const BodySites& DistributionSampleArrayMetricStateBuilder::bodySites() const
{
    return m_bodySites;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::physicalConnector(const boost::optional<PhysicalConnectorInfo>& physicalConnector)
{
    m_physicalConnector = physicalConnector;
    return *this;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::physicalConnector(boost::optional<PhysicalConnectorInfo>&& physicalConnector)
{
    m_physicalConnector = std::move(physicalConnector);
    return *this;
}

inline boost::optional<PhysicalConnectorInfo>& DistributionSampleArrayMetricStateBuilder::physicalConnector()
{
    return m_physicalConnector;
}

inline const boost::optional<PhysicalConnectorInfo>& DistributionSampleArrayMetricStateBuilder::physicalConnector() const
{
    return m_physicalConnector;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::metricValue(const boost::optional<SampleArrayValue>& metricValue)
{
    m_metricValue = metricValue;
    return *this;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::metricValue(boost::optional<SampleArrayValue>&& metricValue)
{
    m_metricValue = std::move(metricValue);
    return *this;
}

inline boost::optional<SampleArrayValue>& DistributionSampleArrayMetricStateBuilder::metricValue()
{
    return m_metricValue;
}

inline const boost::optional<SampleArrayValue>& DistributionSampleArrayMetricStateBuilder::metricValue() const
{
    return m_metricValue;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::physiologicalRanges(const Ranges& physiologicalRanges)
{
    m_physiologicalRanges = physiologicalRanges;
    return *this;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::physiologicalRanges(Ranges&& physiologicalRanges)
{
    m_physiologicalRanges = std::move(physiologicalRanges);
    return *this;
}

inline Ranges& DistributionSampleArrayMetricStateBuilder::physiologicalRanges()
{
    return m_physiologicalRanges;
}

inline const Ranges& DistributionSampleArrayMetricStateBuilder::physiologicalRanges() const
{
    return m_physiologicalRanges;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline DistributionSampleArrayMetricStateBuilder& DistributionSampleArrayMetricStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& DistributionSampleArrayMetricStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& DistributionSampleArrayMetricStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const DistributionSampleArrayMetricState& lhs, const DistributionSampleArrayMetricStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const DistributionSampleArrayMetricStateBuilder& lhs, const DistributionSampleArrayMetricStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const DistributionSampleArrayMetricState& lhs, const DistributionSampleArrayMetricStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const DistributionSampleArrayMetricStateBuilder& lhs, const DistributionSampleArrayMetricState& rhs)
{
    return !(lhs == rhs);
}

inline DistributionSampleArrayMetricStateBuilder getBuilder(const DistributionSampleArrayMetricState& distributionSampleArrayMetricState)
{
    return DistributionSampleArrayMetricStateBuilder(distributionSampleArrayMetricState);
}

inline DistributionSampleArrayMetricStateBuilder getBuilder(const DFL::NotNull<SharedPtr<DistributionSampleArrayMetricState>>& distributionSampleArrayMetricState)
{
    return DistributionSampleArrayMetricStateBuilder(distributionSampleArrayMetricState);
}

}
}
