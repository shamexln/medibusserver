/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Metric/StringMetricValue.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref StringMetricValue
 * @ingroup Mdib
 */
class StringMetricValueBuilder
{
    public:
        /// @brief Typedef to the immutable @ref StringMetricValue
        using BuiltType = StringMetricValue;

        /// @brief Builder based on given immutable @ref StringMetricValue
        explicit StringMetricValueBuilder(const StringMetricValue& stringMetricValue=StringMetricValue());

        /// @brief Builder based on given immutable @ref StringMetricValue
        explicit StringMetricValueBuilder(const DFL::NotNull<SharedPtr<StringMetricValue>>& stringMetricValue);

        /// @brief Overwrite all values with given immutable @ref StringMetricValue
        StringMetricValueBuilder& operator=(const StringMetricValue& stringMetricValue);

        /// @brief Explicit conversion to immutable @ref StringMetricValue
        StringMetricValue build() const;

        /// @brief Test whether the builder differs from the immutable @ref StringMetricValue
        bool isChanged(const StringMetricValue& base) const;

        /// @brief Setter for metricQuality
        /// @{
        StringMetricValueBuilder& metricQuality(const MetricQuality& metricQuality);
        StringMetricValueBuilder& metricQuality(MetricQuality&& metricQuality);
        /// @}

        /// @brief Setter for annotations
        /// @{
        StringMetricValueBuilder& annotations(const Annotations& annotations);
        StringMetricValueBuilder& annotations(Annotations&& annotations);
        /// @}

        /// @brief Setter for startTime
        /// @{
        StringMetricValueBuilder& startTime(const boost::optional<Timestamp>& startTime);
        StringMetricValueBuilder& startTime(boost::optional<Timestamp>&& startTime);
        /// @}

        /// @brief Setter for stopTime
        /// @{
        StringMetricValueBuilder& stopTime(const boost::optional<Timestamp>& stopTime);
        StringMetricValueBuilder& stopTime(boost::optional<Timestamp>&& stopTime);
        /// @}

        /// @brief Setter for determinationTime
        /// @{
        StringMetricValueBuilder& determinationTime(const boost::optional<Timestamp>& determinationTime);
        StringMetricValueBuilder& determinationTime(boost::optional<Timestamp>&& determinationTime);
        /// @}

        /// @brief Setter for value
        /// @{
        StringMetricValueBuilder& value(const boost::optional<Locale::Utf8>& value);
        StringMetricValueBuilder& value(boost::optional<Locale::Utf8>&& value);
        /// @}

        /// @brief Setter for extensions
        /// @{
        StringMetricValueBuilder& extensions(const ExtensionTypes& extensions);
        StringMetricValueBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for metricQuality
        /// @{
        MetricQuality& metricQuality();
        const MetricQuality& metricQuality() const;
        /// @}

        /// @brief Getter for annotations
        /// @{
        Annotations& annotations();
        const Annotations& annotations() const;
        /// @}

        /// @brief Getter for startTime
        /// @{
        boost::optional<Timestamp>& startTime();
        const boost::optional<Timestamp>& startTime() const;
        /// @}

        /// @brief Getter for stopTime
        /// @{
        boost::optional<Timestamp>& stopTime();
        const boost::optional<Timestamp>& stopTime() const;
        /// @}

        /// @brief Getter for determinationTime
        /// @{
        boost::optional<Timestamp>& determinationTime();
        const boost::optional<Timestamp>& determinationTime() const;
        /// @}

        /// @brief Getter for value
        /// @{
        boost::optional<Locale::Utf8>& value();
        const boost::optional<Locale::Utf8>& value() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        MetricQuality m_metricQuality;
        Annotations m_annotations;
        boost::optional<Timestamp> m_startTime;
        boost::optional<Timestamp> m_stopTime;
        boost::optional<Timestamp> m_determinationTime;
        boost::optional<Locale::Utf8> m_value;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const StringMetricValue& lhs, const StringMetricValue& rhs);
DFL_MDIB_EXPIMP bool operator==(const StringMetricValueBuilder& lhs, const StringMetricValueBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const StringMetricValueBuilder& lhs, const StringMetricValue& rhs);
bool operator==(const StringMetricValue& lhs, const StringMetricValueBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const StringMetricValue& lhs, const StringMetricValue& rhs);
bool operator!=(const StringMetricValueBuilder& lhs, const StringMetricValueBuilder& rhs);
bool operator!=(const StringMetricValue& lhs, const StringMetricValueBuilder& rhs);
bool operator!=(const StringMetricValueBuilder& lhs, const StringMetricValue& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref StringMetricValue
 * @ingroup Mdib
 */
/// @{
StringMetricValueBuilder getBuilder(const StringMetricValue& stringMetricValue);
StringMetricValueBuilder getBuilder(const DFL::NotNull<SharedPtr<StringMetricValue>>& stringMetricValue);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const StringMetricValue& lhs, const StringMetricValue& rhs);

inline StringMetricValueBuilder::StringMetricValueBuilder(const StringMetricValue& stringMetricValue) :
    m_metricQuality(stringMetricValue.metricQuality()),
    m_annotations(stringMetricValue.annotations()),
    m_startTime(stringMetricValue.startTime()),
    m_stopTime(stringMetricValue.stopTime()),
    m_determinationTime(stringMetricValue.determinationTime()),
    m_value(stringMetricValue.value()),
    m_extensions(stringMetricValue.extensions())
{
}

inline StringMetricValueBuilder::StringMetricValueBuilder(const DFL::NotNull<SharedPtr<StringMetricValue>>& stringMetricValue) :
    m_metricQuality(stringMetricValue->metricQuality()),
    m_annotations(stringMetricValue->annotations()),
    m_startTime(stringMetricValue->startTime()),
    m_stopTime(stringMetricValue->stopTime()),
    m_determinationTime(stringMetricValue->determinationTime()),
    m_value(stringMetricValue->value()),
    m_extensions(stringMetricValue->extensions())
{
}

inline StringMetricValueBuilder& StringMetricValueBuilder::operator=(const StringMetricValue& stringMetricValue)
{
    m_metricQuality = stringMetricValue.metricQuality();
    m_annotations = stringMetricValue.annotations();
    m_startTime = stringMetricValue.startTime();
    m_stopTime = stringMetricValue.stopTime();
    m_determinationTime = stringMetricValue.determinationTime();
    m_value = stringMetricValue.value();
    m_extensions = stringMetricValue.extensions();
    return *this;
}

inline StringMetricValue StringMetricValueBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return StringMetricValue(m_metricQuality, m_annotations, m_startTime, m_stopTime, m_determinationTime, m_value, m_extensions);
}

inline bool StringMetricValueBuilder::isChanged(const StringMetricValue& base) const
{
    return *this != base;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::metricQuality(const MetricQuality& metricQuality)
{
    m_metricQuality = metricQuality;
    return *this;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::metricQuality(MetricQuality&& metricQuality)
{
    m_metricQuality = std::move(metricQuality);
    return *this;
}

inline MetricQuality& StringMetricValueBuilder::metricQuality()
{
    return m_metricQuality;
}

inline const MetricQuality& StringMetricValueBuilder::metricQuality() const
{
    return m_metricQuality;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::annotations(const Annotations& annotations)
{
    m_annotations = annotations;
    return *this;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::annotations(Annotations&& annotations)
{
    m_annotations = std::move(annotations);
    return *this;
}

inline Annotations& StringMetricValueBuilder::annotations()
{
    return m_annotations;
}

inline const Annotations& StringMetricValueBuilder::annotations() const
{
    return m_annotations;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::startTime(const boost::optional<Timestamp>& startTime)
{
    m_startTime = startTime;
    return *this;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::startTime(boost::optional<Timestamp>&& startTime)
{
    m_startTime = std::move(startTime);
    return *this;
}

inline boost::optional<Timestamp>& StringMetricValueBuilder::startTime()
{
    return m_startTime;
}

inline const boost::optional<Timestamp>& StringMetricValueBuilder::startTime() const
{
    return m_startTime;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::stopTime(const boost::optional<Timestamp>& stopTime)
{
    m_stopTime = stopTime;
    return *this;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::stopTime(boost::optional<Timestamp>&& stopTime)
{
    m_stopTime = std::move(stopTime);
    return *this;
}

inline boost::optional<Timestamp>& StringMetricValueBuilder::stopTime()
{
    return m_stopTime;
}

inline const boost::optional<Timestamp>& StringMetricValueBuilder::stopTime() const
{
    return m_stopTime;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::determinationTime(const boost::optional<Timestamp>& determinationTime)
{
    m_determinationTime = determinationTime;
    return *this;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::determinationTime(boost::optional<Timestamp>&& determinationTime)
{
    m_determinationTime = std::move(determinationTime);
    return *this;
}

inline boost::optional<Timestamp>& StringMetricValueBuilder::determinationTime()
{
    return m_determinationTime;
}

inline const boost::optional<Timestamp>& StringMetricValueBuilder::determinationTime() const
{
    return m_determinationTime;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::value(const boost::optional<Locale::Utf8>& value)
{
    m_value = value;
    return *this;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::value(boost::optional<Locale::Utf8>&& value)
{
    m_value = std::move(value);
    return *this;
}

inline boost::optional<Locale::Utf8>& StringMetricValueBuilder::value()
{
    return m_value;
}

inline const boost::optional<Locale::Utf8>& StringMetricValueBuilder::value() const
{
    return m_value;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline StringMetricValueBuilder& StringMetricValueBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& StringMetricValueBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& StringMetricValueBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const StringMetricValue& lhs, const StringMetricValueBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const StringMetricValueBuilder& lhs, const StringMetricValueBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const StringMetricValue& lhs, const StringMetricValueBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const StringMetricValueBuilder& lhs, const StringMetricValue& rhs)
{
    return !(lhs == rhs);
}

inline StringMetricValueBuilder getBuilder(const StringMetricValue& stringMetricValue)
{
    return StringMetricValueBuilder(stringMetricValue);
}

inline StringMetricValueBuilder getBuilder(const DFL::NotNull<SharedPtr<StringMetricValue>>& stringMetricValue)
{
    return StringMetricValueBuilder(stringMetricValue);
}

}
}
