/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Metric/EnumStringMetricState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref EnumStringMetricState
 * @ingroup Mdib
 */
class EnumStringMetricStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref EnumStringMetricState
        using BuiltType = EnumStringMetricState;

        /// @brief Builder based on given immutable @ref EnumStringMetricState
        explicit EnumStringMetricStateBuilder(const EnumStringMetricState& enumStringMetricState=EnumStringMetricState());

        /// @brief Builder based on given immutable @ref EnumStringMetricState
        explicit EnumStringMetricStateBuilder(const DFL::NotNull<SharedPtr<EnumStringMetricState>>& enumStringMetricState);

        /// @brief Overwrite all values with given immutable @ref EnumStringMetricState
        EnumStringMetricStateBuilder& operator=(const EnumStringMetricState& enumStringMetricState);

        /// @brief Explicit conversion to immutable @ref EnumStringMetricState
        EnumStringMetricState build() const;

        /// @brief Test whether the builder differs from the immutable @ref EnumStringMetricState
        bool isChanged(const EnumStringMetricState& base) const;

        /// @brief Setter for activationState
        /// @{
        EnumStringMetricStateBuilder& activationState(ComponentActivation activationState);
        /// @}

        /// @brief Setter for activeDeterminationPeriod
        /// @{
        EnumStringMetricStateBuilder& activeDeterminationPeriod(const boost::optional<Duration>& activeDeterminationPeriod);
        EnumStringMetricStateBuilder& activeDeterminationPeriod(boost::optional<Duration>&& activeDeterminationPeriod);
        /// @}

        /// @brief Setter for lifeTimePeriod
        /// @{
        EnumStringMetricStateBuilder& lifeTimePeriod(const boost::optional<Duration>& lifeTimePeriod);
        EnumStringMetricStateBuilder& lifeTimePeriod(boost::optional<Duration>&& lifeTimePeriod);
        /// @}

        /// @brief Setter for bodySites
        /// @{
        EnumStringMetricStateBuilder& bodySites(const BodySites& bodySites);
        EnumStringMetricStateBuilder& bodySites(BodySites&& bodySites);
        /// @}

        /// @brief Setter for physicalConnector
        /// @{
        EnumStringMetricStateBuilder& physicalConnector(const boost::optional<PhysicalConnectorInfo>& physicalConnector);
        EnumStringMetricStateBuilder& physicalConnector(boost::optional<PhysicalConnectorInfo>&& physicalConnector);
        /// @}

        /// @brief Setter for metricValue
        /// @{
        EnumStringMetricStateBuilder& metricValue(const boost::optional<StringMetricValue>& metricValue);
        EnumStringMetricStateBuilder& metricValue(boost::optional<StringMetricValue>&& metricValue);
        /// @}

        /// @brief Setter for extensions
        /// @{
        EnumStringMetricStateBuilder& extensions(const ExtensionTypes& extensions);
        EnumStringMetricStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for activationState
        /// @{
        ComponentActivation& activationState();
        ComponentActivation activationState() const;
        /// @}

        /// @brief Getter for activeDeterminationPeriod
        /// @{
        boost::optional<Duration>& activeDeterminationPeriod();
        const boost::optional<Duration>& activeDeterminationPeriod() const;
        /// @}

        /// @brief Getter for lifeTimePeriod
        /// @{
        boost::optional<Duration>& lifeTimePeriod();
        const boost::optional<Duration>& lifeTimePeriod() const;
        /// @}

        /// @brief Getter for bodySites
        /// @{
        BodySites& bodySites();
        const BodySites& bodySites() const;
        /// @}

        /// @brief Getter for physicalConnector
        /// @{
        boost::optional<PhysicalConnectorInfo>& physicalConnector();
        const boost::optional<PhysicalConnectorInfo>& physicalConnector() const;
        /// @}

        /// @brief Getter for metricValue
        /// @{
        boost::optional<StringMetricValue>& metricValue();
        const boost::optional<StringMetricValue>& metricValue() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        ComponentActivation m_activationState;
        boost::optional<Duration> m_activeDeterminationPeriod;
        boost::optional<Duration> m_lifeTimePeriod;
        BodySites m_bodySites;
        boost::optional<PhysicalConnectorInfo> m_physicalConnector;
        boost::optional<StringMetricValue> m_metricValue;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const EnumStringMetricState& lhs, const EnumStringMetricState& rhs);
DFL_MDIB_EXPIMP bool operator==(const EnumStringMetricStateBuilder& lhs, const EnumStringMetricStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const EnumStringMetricStateBuilder& lhs, const EnumStringMetricState& rhs);
bool operator==(const EnumStringMetricState& lhs, const EnumStringMetricStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const EnumStringMetricState& lhs, const EnumStringMetricState& rhs);
bool operator!=(const EnumStringMetricStateBuilder& lhs, const EnumStringMetricStateBuilder& rhs);
bool operator!=(const EnumStringMetricState& lhs, const EnumStringMetricStateBuilder& rhs);
bool operator!=(const EnumStringMetricStateBuilder& lhs, const EnumStringMetricState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref EnumStringMetricState
 * @ingroup Mdib
 */
/// @{
EnumStringMetricStateBuilder getBuilder(const EnumStringMetricState& enumStringMetricState);
EnumStringMetricStateBuilder getBuilder(const DFL::NotNull<SharedPtr<EnumStringMetricState>>& enumStringMetricState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const EnumStringMetricState& lhs, const EnumStringMetricState& rhs);

inline EnumStringMetricStateBuilder::EnumStringMetricStateBuilder(const EnumStringMetricState& enumStringMetricState) :
    m_activationState(enumStringMetricState.activationState()),
    m_activeDeterminationPeriod(enumStringMetricState.activeDeterminationPeriod()),
    m_lifeTimePeriod(enumStringMetricState.lifeTimePeriod()),
    m_bodySites(enumStringMetricState.bodySites()),
    m_physicalConnector(enumStringMetricState.physicalConnector()),
    m_metricValue(enumStringMetricState.metricValue()),
    m_extensions(enumStringMetricState.extensions())
{
}

inline EnumStringMetricStateBuilder::EnumStringMetricStateBuilder(const DFL::NotNull<SharedPtr<EnumStringMetricState>>& enumStringMetricState) :
    m_activationState(enumStringMetricState->activationState()),
    m_activeDeterminationPeriod(enumStringMetricState->activeDeterminationPeriod()),
    m_lifeTimePeriod(enumStringMetricState->lifeTimePeriod()),
    m_bodySites(enumStringMetricState->bodySites()),
    m_physicalConnector(enumStringMetricState->physicalConnector()),
    m_metricValue(enumStringMetricState->metricValue()),
    m_extensions(enumStringMetricState->extensions())
{
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::operator=(const EnumStringMetricState& enumStringMetricState)
{
    m_activationState = enumStringMetricState.activationState();
    m_activeDeterminationPeriod = enumStringMetricState.activeDeterminationPeriod();
    m_lifeTimePeriod = enumStringMetricState.lifeTimePeriod();
    m_bodySites = enumStringMetricState.bodySites();
    m_physicalConnector = enumStringMetricState.physicalConnector();
    m_metricValue = enumStringMetricState.metricValue();
    m_extensions = enumStringMetricState.extensions();
    return *this;
}

inline EnumStringMetricState EnumStringMetricStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return EnumStringMetricState(m_activationState, m_activeDeterminationPeriod, m_lifeTimePeriod, m_bodySites, m_physicalConnector, m_metricValue, m_extensions);
}

inline bool EnumStringMetricStateBuilder::isChanged(const EnumStringMetricState& base) const
{
    return *this != base;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::activationState(ComponentActivation activationState)
{
    m_activationState = activationState;
    return *this;
}

inline ComponentActivation& EnumStringMetricStateBuilder::activationState()
{
    return m_activationState;
}

inline ComponentActivation EnumStringMetricStateBuilder::activationState() const
{
    return m_activationState;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::activeDeterminationPeriod(const boost::optional<Duration>& activeDeterminationPeriod)
{
    m_activeDeterminationPeriod = activeDeterminationPeriod;
    return *this;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::activeDeterminationPeriod(boost::optional<Duration>&& activeDeterminationPeriod)
{
    m_activeDeterminationPeriod = std::move(activeDeterminationPeriod);
    return *this;
}

inline boost::optional<Duration>& EnumStringMetricStateBuilder::activeDeterminationPeriod()
{
    return m_activeDeterminationPeriod;
}

inline const boost::optional<Duration>& EnumStringMetricStateBuilder::activeDeterminationPeriod() const
{
    return m_activeDeterminationPeriod;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::lifeTimePeriod(const boost::optional<Duration>& lifeTimePeriod)
{
    m_lifeTimePeriod = lifeTimePeriod;
    return *this;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::lifeTimePeriod(boost::optional<Duration>&& lifeTimePeriod)
{
    m_lifeTimePeriod = std::move(lifeTimePeriod);
    return *this;
}

inline boost::optional<Duration>& EnumStringMetricStateBuilder::lifeTimePeriod()
{
    return m_lifeTimePeriod;
}

inline const boost::optional<Duration>& EnumStringMetricStateBuilder::lifeTimePeriod() const
{
    return m_lifeTimePeriod;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::bodySites(const BodySites& bodySites)
{
    m_bodySites = bodySites;
    return *this;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::bodySites(BodySites&& bodySites)
{
    m_bodySites = std::move(bodySites);
    return *this;
}

inline BodySites& EnumStringMetricStateBuilder::bodySites()
{
    return m_bodySites;
}

inline const BodySites& EnumStringMetricStateBuilder::bodySites() const
{
    return m_bodySites;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::physicalConnector(const boost::optional<PhysicalConnectorInfo>& physicalConnector)
{
    m_physicalConnector = physicalConnector;
    return *this;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::physicalConnector(boost::optional<PhysicalConnectorInfo>&& physicalConnector)
{
    m_physicalConnector = std::move(physicalConnector);
    return *this;
}

inline boost::optional<PhysicalConnectorInfo>& EnumStringMetricStateBuilder::physicalConnector()
{
    return m_physicalConnector;
}

inline const boost::optional<PhysicalConnectorInfo>& EnumStringMetricStateBuilder::physicalConnector() const
{
    return m_physicalConnector;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::metricValue(const boost::optional<StringMetricValue>& metricValue)
{
    m_metricValue = metricValue;
    return *this;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::metricValue(boost::optional<StringMetricValue>&& metricValue)
{
    m_metricValue = std::move(metricValue);
    return *this;
}

inline boost::optional<StringMetricValue>& EnumStringMetricStateBuilder::metricValue()
{
    return m_metricValue;
}

inline const boost::optional<StringMetricValue>& EnumStringMetricStateBuilder::metricValue() const
{
    return m_metricValue;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline EnumStringMetricStateBuilder& EnumStringMetricStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& EnumStringMetricStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& EnumStringMetricStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const EnumStringMetricState& lhs, const EnumStringMetricStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const EnumStringMetricStateBuilder& lhs, const EnumStringMetricStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const EnumStringMetricState& lhs, const EnumStringMetricStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const EnumStringMetricStateBuilder& lhs, const EnumStringMetricState& rhs)
{
    return !(lhs == rhs);
}

inline EnumStringMetricStateBuilder getBuilder(const EnumStringMetricState& enumStringMetricState)
{
    return EnumStringMetricStateBuilder(enumStringMetricState);
}

inline EnumStringMetricStateBuilder getBuilder(const DFL::NotNull<SharedPtr<EnumStringMetricState>>& enumStringMetricState)
{
    return EnumStringMetricStateBuilder(enumStringMetricState);
}

}
}
