/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Metric/MetricQuality.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref MetricQuality
 * @ingroup Mdib
 */
class MetricQualityBuilder
{
    public:
        /// @brief Typedef to the immutable @ref MetricQuality
        using BuiltType = MetricQuality;

        /// @brief Builder based on given immutable @ref MetricQuality
        explicit MetricQualityBuilder(const MetricQuality& metricQuality=MetricQuality());

        /// @brief Builder based on given immutable @ref MetricQuality
        explicit MetricQualityBuilder(const DFL::NotNull<SharedPtr<MetricQuality>>& metricQuality);

        /// @brief Overwrite all values with given immutable @ref MetricQuality
        MetricQualityBuilder& operator=(const MetricQuality& metricQuality);

        /// @brief Explicit conversion to immutable @ref MetricQuality
        MetricQuality build() const;

        /// @brief Test whether the builder differs from the immutable @ref MetricQuality
        bool isChanged(const MetricQuality& base) const;

        /// @brief Setter for validity
        /// @{
        MetricQualityBuilder& validity(MeasurementValidity validity);
        /// @}

        /// @brief Setter for mode
        /// @{
        MetricQualityBuilder& mode(GenerationMode mode);
        /// @}

        /// @brief Setter for qualityIndicator
        /// @{
        MetricQualityBuilder& qualityIndicator(QualityIndicator qualityIndicator);
        /// @}

        /// @brief Setter for extensions
        /// @{
        MetricQualityBuilder& extensions(const ExtensionTypes& extensions);
        MetricQualityBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for validity
        /// @{
        MeasurementValidity& validity();
        MeasurementValidity validity() const;
        /// @}

        /// @brief Getter for mode
        /// @{
        GenerationMode& mode();
        GenerationMode mode() const;
        /// @}

        /// @brief Getter for qualityIndicator
        /// @{
        QualityIndicator& qualityIndicator();
        QualityIndicator qualityIndicator() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        MeasurementValidity m_validity;
        GenerationMode m_mode;
        QualityIndicator m_qualityIndicator;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const MetricQuality& lhs, const MetricQuality& rhs);
DFL_MDIB_EXPIMP bool operator==(const MetricQualityBuilder& lhs, const MetricQualityBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const MetricQualityBuilder& lhs, const MetricQuality& rhs);
bool operator==(const MetricQuality& lhs, const MetricQualityBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const MetricQuality& lhs, const MetricQuality& rhs);
bool operator!=(const MetricQualityBuilder& lhs, const MetricQualityBuilder& rhs);
bool operator!=(const MetricQuality& lhs, const MetricQualityBuilder& rhs);
bool operator!=(const MetricQualityBuilder& lhs, const MetricQuality& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref MetricQuality
 * @ingroup Mdib
 */
/// @{
MetricQualityBuilder getBuilder(const MetricQuality& metricQuality);
MetricQualityBuilder getBuilder(const DFL::NotNull<SharedPtr<MetricQuality>>& metricQuality);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const MetricQuality& lhs, const MetricQuality& rhs);

inline MetricQualityBuilder::MetricQualityBuilder(const MetricQuality& metricQuality) :
    m_validity(metricQuality.validity()),
    m_mode(metricQuality.mode()),
    m_qualityIndicator(metricQuality.qualityIndicator()),
    m_extensions(metricQuality.extensions())
{
}

inline MetricQualityBuilder::MetricQualityBuilder(const DFL::NotNull<SharedPtr<MetricQuality>>& metricQuality) :
    m_validity(metricQuality->validity()),
    m_mode(metricQuality->mode()),
    m_qualityIndicator(metricQuality->qualityIndicator()),
    m_extensions(metricQuality->extensions())
{
}

inline MetricQualityBuilder& MetricQualityBuilder::operator=(const MetricQuality& metricQuality)
{
    m_validity = metricQuality.validity();
    m_mode = metricQuality.mode();
    m_qualityIndicator = metricQuality.qualityIndicator();
    m_extensions = metricQuality.extensions();
    return *this;
}

inline MetricQuality MetricQualityBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return MetricQuality(m_validity, m_mode, m_qualityIndicator, m_extensions);
}

inline bool MetricQualityBuilder::isChanged(const MetricQuality& base) const
{
    return *this != base;
}

inline MetricQualityBuilder& MetricQualityBuilder::validity(MeasurementValidity validity)
{
    m_validity = validity;
    return *this;
}

inline MeasurementValidity& MetricQualityBuilder::validity()
{
    return m_validity;
}

inline MeasurementValidity MetricQualityBuilder::validity() const
{
    return m_validity;
}

inline MetricQualityBuilder& MetricQualityBuilder::mode(GenerationMode mode)
{
    m_mode = mode;
    return *this;
}

inline GenerationMode& MetricQualityBuilder::mode()
{
    return m_mode;
}

inline GenerationMode MetricQualityBuilder::mode() const
{
    return m_mode;
}

inline MetricQualityBuilder& MetricQualityBuilder::qualityIndicator(QualityIndicator qualityIndicator)
{
    m_qualityIndicator = qualityIndicator;
    return *this;
}

inline QualityIndicator& MetricQualityBuilder::qualityIndicator()
{
    return m_qualityIndicator;
}

inline QualityIndicator MetricQualityBuilder::qualityIndicator() const
{
    return m_qualityIndicator;
}

inline MetricQualityBuilder& MetricQualityBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline MetricQualityBuilder& MetricQualityBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& MetricQualityBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& MetricQualityBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const MetricQuality& lhs, const MetricQualityBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const MetricQualityBuilder& lhs, const MetricQualityBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const MetricQuality& lhs, const MetricQualityBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const MetricQualityBuilder& lhs, const MetricQuality& rhs)
{
    return !(lhs == rhs);
}

inline MetricQualityBuilder getBuilder(const MetricQuality& metricQuality)
{
    return MetricQualityBuilder(metricQuality);
}

inline MetricQualityBuilder getBuilder(const DFL::NotNull<SharedPtr<MetricQuality>>& metricQuality)
{
    return MetricQualityBuilder(metricQuality);
}

}
}
