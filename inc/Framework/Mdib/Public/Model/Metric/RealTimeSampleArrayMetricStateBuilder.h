/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Metric/RealTimeSampleArrayMetricState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref RealTimeSampleArrayMetricState
 * @ingroup Mdib
 */
class RealTimeSampleArrayMetricStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref RealTimeSampleArrayMetricState
        using BuiltType = RealTimeSampleArrayMetricState;

        /// @brief Builder based on given immutable @ref RealTimeSampleArrayMetricState
        explicit RealTimeSampleArrayMetricStateBuilder(const RealTimeSampleArrayMetricState& realTimeSampleArrayMetricState=RealTimeSampleArrayMetricState());

        /// @brief Builder based on given immutable @ref RealTimeSampleArrayMetricState
        explicit RealTimeSampleArrayMetricStateBuilder(const DFL::NotNull<SharedPtr<RealTimeSampleArrayMetricState>>& realTimeSampleArrayMetricState);

        /// @brief Overwrite all values with given immutable @ref RealTimeSampleArrayMetricState
        RealTimeSampleArrayMetricStateBuilder& operator=(const RealTimeSampleArrayMetricState& realTimeSampleArrayMetricState);

        /// @brief Explicit conversion to immutable @ref RealTimeSampleArrayMetricState
        RealTimeSampleArrayMetricState build() const;

        /// @brief Test whether the builder differs from the immutable @ref RealTimeSampleArrayMetricState
        bool isChanged(const RealTimeSampleArrayMetricState& base) const;

        /// @brief Setter for activationState
        /// @{
        RealTimeSampleArrayMetricStateBuilder& activationState(ComponentActivation activationState);
        /// @}

        /// @brief Setter for activeDeterminationPeriod
        /// @{
        RealTimeSampleArrayMetricStateBuilder& activeDeterminationPeriod(const boost::optional<Duration>& activeDeterminationPeriod);
        RealTimeSampleArrayMetricStateBuilder& activeDeterminationPeriod(boost::optional<Duration>&& activeDeterminationPeriod);
        /// @}

        /// @brief Setter for lifeTimePeriod
        /// @{
        RealTimeSampleArrayMetricStateBuilder& lifeTimePeriod(const boost::optional<Duration>& lifeTimePeriod);
        RealTimeSampleArrayMetricStateBuilder& lifeTimePeriod(boost::optional<Duration>&& lifeTimePeriod);
        /// @}

        /// @brief Setter for bodySites
        /// @{
        RealTimeSampleArrayMetricStateBuilder& bodySites(const BodySites& bodySites);
        RealTimeSampleArrayMetricStateBuilder& bodySites(BodySites&& bodySites);
        /// @}

        /// @brief Setter for physicalConnector
        /// @{
        RealTimeSampleArrayMetricStateBuilder& physicalConnector(const boost::optional<PhysicalConnectorInfo>& physicalConnector);
        RealTimeSampleArrayMetricStateBuilder& physicalConnector(boost::optional<PhysicalConnectorInfo>&& physicalConnector);
        /// @}

        /// @brief Setter for metricValue
        /// @{
        RealTimeSampleArrayMetricStateBuilder& metricValue(const boost::optional<SampleArrayValue>& metricValue);
        RealTimeSampleArrayMetricStateBuilder& metricValue(boost::optional<SampleArrayValue>&& metricValue);
        /// @}

        /// @brief Setter for physiologicalRanges
        /// @{
        RealTimeSampleArrayMetricStateBuilder& physiologicalRanges(const Ranges& physiologicalRanges);
        RealTimeSampleArrayMetricStateBuilder& physiologicalRanges(Ranges&& physiologicalRanges);
        /// @}

        /// @brief Setter for extensions
        /// @{
        RealTimeSampleArrayMetricStateBuilder& extensions(const ExtensionTypes& extensions);
        RealTimeSampleArrayMetricStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for activationState
        /// @{
        ComponentActivation& activationState();
        ComponentActivation activationState() const;
        /// @}

        /// @brief Getter for activeDeterminationPeriod
        /// @{
        boost::optional<Duration>& activeDeterminationPeriod();
        const boost::optional<Duration>& activeDeterminationPeriod() const;
        /// @}

        /// @brief Getter for lifeTimePeriod
        /// @{
        boost::optional<Duration>& lifeTimePeriod();
        const boost::optional<Duration>& lifeTimePeriod() const;
        /// @}

        /// @brief Getter for bodySites
        /// @{
        BodySites& bodySites();
        const BodySites& bodySites() const;
        /// @}

        /// @brief Getter for physicalConnector
        /// @{
        boost::optional<PhysicalConnectorInfo>& physicalConnector();
        const boost::optional<PhysicalConnectorInfo>& physicalConnector() const;
        /// @}

        /// @brief Getter for metricValue
        /// @{
        boost::optional<SampleArrayValue>& metricValue();
        const boost::optional<SampleArrayValue>& metricValue() const;
        /// @}

        /// @brief Getter for physiologicalRanges
        /// @{
        Ranges& physiologicalRanges();
        const Ranges& physiologicalRanges() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        ComponentActivation m_activationState;
        boost::optional<Duration> m_activeDeterminationPeriod;
        boost::optional<Duration> m_lifeTimePeriod;
        BodySites m_bodySites;
        boost::optional<PhysicalConnectorInfo> m_physicalConnector;
        boost::optional<SampleArrayValue> m_metricValue;
        Ranges m_physiologicalRanges;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const RealTimeSampleArrayMetricState& lhs, const RealTimeSampleArrayMetricState& rhs);
DFL_MDIB_EXPIMP bool operator==(const RealTimeSampleArrayMetricStateBuilder& lhs, const RealTimeSampleArrayMetricStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const RealTimeSampleArrayMetricStateBuilder& lhs, const RealTimeSampleArrayMetricState& rhs);
bool operator==(const RealTimeSampleArrayMetricState& lhs, const RealTimeSampleArrayMetricStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const RealTimeSampleArrayMetricState& lhs, const RealTimeSampleArrayMetricState& rhs);
bool operator!=(const RealTimeSampleArrayMetricStateBuilder& lhs, const RealTimeSampleArrayMetricStateBuilder& rhs);
bool operator!=(const RealTimeSampleArrayMetricState& lhs, const RealTimeSampleArrayMetricStateBuilder& rhs);
bool operator!=(const RealTimeSampleArrayMetricStateBuilder& lhs, const RealTimeSampleArrayMetricState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref RealTimeSampleArrayMetricState
 * @ingroup Mdib
 */
/// @{
RealTimeSampleArrayMetricStateBuilder getBuilder(const RealTimeSampleArrayMetricState& realTimeSampleArrayMetricState);
RealTimeSampleArrayMetricStateBuilder getBuilder(const DFL::NotNull<SharedPtr<RealTimeSampleArrayMetricState>>& realTimeSampleArrayMetricState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const RealTimeSampleArrayMetricState& lhs, const RealTimeSampleArrayMetricState& rhs);

inline RealTimeSampleArrayMetricStateBuilder::RealTimeSampleArrayMetricStateBuilder(const RealTimeSampleArrayMetricState& realTimeSampleArrayMetricState) :
    m_activationState(realTimeSampleArrayMetricState.activationState()),
    m_activeDeterminationPeriod(realTimeSampleArrayMetricState.activeDeterminationPeriod()),
    m_lifeTimePeriod(realTimeSampleArrayMetricState.lifeTimePeriod()),
    m_bodySites(realTimeSampleArrayMetricState.bodySites()),
    m_physicalConnector(realTimeSampleArrayMetricState.physicalConnector()),
    m_metricValue(realTimeSampleArrayMetricState.metricValue()),
    m_physiologicalRanges(realTimeSampleArrayMetricState.physiologicalRanges()),
    m_extensions(realTimeSampleArrayMetricState.extensions())
{
}

inline RealTimeSampleArrayMetricStateBuilder::RealTimeSampleArrayMetricStateBuilder(const DFL::NotNull<SharedPtr<RealTimeSampleArrayMetricState>>& realTimeSampleArrayMetricState) :
    m_activationState(realTimeSampleArrayMetricState->activationState()),
    m_activeDeterminationPeriod(realTimeSampleArrayMetricState->activeDeterminationPeriod()),
    m_lifeTimePeriod(realTimeSampleArrayMetricState->lifeTimePeriod()),
    m_bodySites(realTimeSampleArrayMetricState->bodySites()),
    m_physicalConnector(realTimeSampleArrayMetricState->physicalConnector()),
    m_metricValue(realTimeSampleArrayMetricState->metricValue()),
    m_physiologicalRanges(realTimeSampleArrayMetricState->physiologicalRanges()),
    m_extensions(realTimeSampleArrayMetricState->extensions())
{
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::operator=(const RealTimeSampleArrayMetricState& realTimeSampleArrayMetricState)
{
    m_activationState = realTimeSampleArrayMetricState.activationState();
    m_activeDeterminationPeriod = realTimeSampleArrayMetricState.activeDeterminationPeriod();
    m_lifeTimePeriod = realTimeSampleArrayMetricState.lifeTimePeriod();
    m_bodySites = realTimeSampleArrayMetricState.bodySites();
    m_physicalConnector = realTimeSampleArrayMetricState.physicalConnector();
    m_metricValue = realTimeSampleArrayMetricState.metricValue();
    m_physiologicalRanges = realTimeSampleArrayMetricState.physiologicalRanges();
    m_extensions = realTimeSampleArrayMetricState.extensions();
    return *this;
}

inline RealTimeSampleArrayMetricState RealTimeSampleArrayMetricStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return RealTimeSampleArrayMetricState(m_activationState, m_activeDeterminationPeriod, m_lifeTimePeriod, m_bodySites, m_physicalConnector, m_metricValue, m_physiologicalRanges, m_extensions);
}

inline bool RealTimeSampleArrayMetricStateBuilder::isChanged(const RealTimeSampleArrayMetricState& base) const
{
    return *this != base;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::activationState(ComponentActivation activationState)
{
    m_activationState = activationState;
    return *this;
}

inline ComponentActivation& RealTimeSampleArrayMetricStateBuilder::activationState()
{
    return m_activationState;
}

inline ComponentActivation RealTimeSampleArrayMetricStateBuilder::activationState() const
{
    return m_activationState;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::activeDeterminationPeriod(const boost::optional<Duration>& activeDeterminationPeriod)
{
    m_activeDeterminationPeriod = activeDeterminationPeriod;
    return *this;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::activeDeterminationPeriod(boost::optional<Duration>&& activeDeterminationPeriod)
{
    m_activeDeterminationPeriod = std::move(activeDeterminationPeriod);
    return *this;
}

inline boost::optional<Duration>& RealTimeSampleArrayMetricStateBuilder::activeDeterminationPeriod()
{
    return m_activeDeterminationPeriod;
}

inline const boost::optional<Duration>& RealTimeSampleArrayMetricStateBuilder::activeDeterminationPeriod() const
{
    return m_activeDeterminationPeriod;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::lifeTimePeriod(const boost::optional<Duration>& lifeTimePeriod)
{
    m_lifeTimePeriod = lifeTimePeriod;
    return *this;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::lifeTimePeriod(boost::optional<Duration>&& lifeTimePeriod)
{
    m_lifeTimePeriod = std::move(lifeTimePeriod);
    return *this;
}

inline boost::optional<Duration>& RealTimeSampleArrayMetricStateBuilder::lifeTimePeriod()
{
    return m_lifeTimePeriod;
}

inline const boost::optional<Duration>& RealTimeSampleArrayMetricStateBuilder::lifeTimePeriod() const
{
    return m_lifeTimePeriod;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::bodySites(const BodySites& bodySites)
{
    m_bodySites = bodySites;
    return *this;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::bodySites(BodySites&& bodySites)
{
    m_bodySites = std::move(bodySites);
    return *this;
}

inline BodySites& RealTimeSampleArrayMetricStateBuilder::bodySites()
{
    return m_bodySites;
}

inline const BodySites& RealTimeSampleArrayMetricStateBuilder::bodySites() const
{
    return m_bodySites;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::physicalConnector(const boost::optional<PhysicalConnectorInfo>& physicalConnector)
{
    m_physicalConnector = physicalConnector;
    return *this;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::physicalConnector(boost::optional<PhysicalConnectorInfo>&& physicalConnector)
{
    m_physicalConnector = std::move(physicalConnector);
    return *this;
}

inline boost::optional<PhysicalConnectorInfo>& RealTimeSampleArrayMetricStateBuilder::physicalConnector()
{
    return m_physicalConnector;
}

inline const boost::optional<PhysicalConnectorInfo>& RealTimeSampleArrayMetricStateBuilder::physicalConnector() const
{
    return m_physicalConnector;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::metricValue(const boost::optional<SampleArrayValue>& metricValue)
{
    m_metricValue = metricValue;
    return *this;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::metricValue(boost::optional<SampleArrayValue>&& metricValue)
{
    m_metricValue = std::move(metricValue);
    return *this;
}

inline boost::optional<SampleArrayValue>& RealTimeSampleArrayMetricStateBuilder::metricValue()
{
    return m_metricValue;
}

inline const boost::optional<SampleArrayValue>& RealTimeSampleArrayMetricStateBuilder::metricValue() const
{
    return m_metricValue;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::physiologicalRanges(const Ranges& physiologicalRanges)
{
    m_physiologicalRanges = physiologicalRanges;
    return *this;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::physiologicalRanges(Ranges&& physiologicalRanges)
{
    m_physiologicalRanges = std::move(physiologicalRanges);
    return *this;
}

inline Ranges& RealTimeSampleArrayMetricStateBuilder::physiologicalRanges()
{
    return m_physiologicalRanges;
}

inline const Ranges& RealTimeSampleArrayMetricStateBuilder::physiologicalRanges() const
{
    return m_physiologicalRanges;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline RealTimeSampleArrayMetricStateBuilder& RealTimeSampleArrayMetricStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& RealTimeSampleArrayMetricStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& RealTimeSampleArrayMetricStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const RealTimeSampleArrayMetricState& lhs, const RealTimeSampleArrayMetricStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const RealTimeSampleArrayMetricStateBuilder& lhs, const RealTimeSampleArrayMetricStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const RealTimeSampleArrayMetricState& lhs, const RealTimeSampleArrayMetricStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const RealTimeSampleArrayMetricStateBuilder& lhs, const RealTimeSampleArrayMetricState& rhs)
{
    return !(lhs == rhs);
}

inline RealTimeSampleArrayMetricStateBuilder getBuilder(const RealTimeSampleArrayMetricState& realTimeSampleArrayMetricState)
{
    return RealTimeSampleArrayMetricStateBuilder(realTimeSampleArrayMetricState);
}

inline RealTimeSampleArrayMetricStateBuilder getBuilder(const DFL::NotNull<SharedPtr<RealTimeSampleArrayMetricState>>& realTimeSampleArrayMetricState)
{
    return RealTimeSampleArrayMetricStateBuilder(realTimeSampleArrayMetricState);
}

}
}
