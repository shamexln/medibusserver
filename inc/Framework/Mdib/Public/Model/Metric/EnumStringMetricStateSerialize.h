/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <Framework/Mdib/Public/Model/Metric/EnumStringMetricState.h>
#include <Framework/Chrono/Public/DurationSerialize.h>
#include <Framework/Mdib/Public/Model/CodedValueSerialize.h>
#include <Framework/Mdib/Public/Model/Component/PhysicalConnectorInfoSerialize.h>
#include <Framework/Mdib/Public/Model/ExtensionTypeSerialize.h>
#include <Framework/Mdib/Public/Model/Metric/StringMetricValueSerialize.h>
#include <Framework/Utils/Public/SerializationHelper.h>

#include <boost/serialization/nvp.hpp>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/version.hpp>
#include <boost/serialization/optional.hpp>
#include <boost/serialization/vector.hpp>

#include <utility>

BOOST_SERIALIZATION_SPLIT_FREE(::DFL::Mdib::EnumStringMetricState)

BOOST_CLASS_VERSION(::DFL::Mdib::EnumStringMetricState, 0)

BOOST_CLASS_TRACKING(::DFL::Mdib::EnumStringMetricState, boost::serialization::track_never)

namespace boost
{
namespace serialization
{
/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void save(Archive& ar, const ::DFL::Mdib::EnumStringMetricState& src, const unsigned int /*fileVersion*/)
{
    const auto& activationState = src.activationState();
    ar & make_nvp("ActivationState", activationState);

    const auto& activeDeterminationPeriod = src.activeDeterminationPeriod();
    ar & make_nvp("ActiveDeterminationPeriod", activeDeterminationPeriod);

    const auto& lifeTimePeriod = src.lifeTimePeriod();
    ar & make_nvp("LifeTimePeriod", lifeTimePeriod);

    const auto& bodySites = src.bodySites();
    ar & make_nvp("BodySites", bodySites);

    const auto& physicalConnector = src.physicalConnector();
    ar & make_nvp("PhysicalConnector", physicalConnector);

    const auto& metricValue = src.metricValue();
    ar & make_nvp("MetricValue", metricValue);

    const auto& extensions = src.extensions();
    ar & make_nvp("Extensions", extensions);
}

/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void load_construct_data(Archive& ar, ::DFL::Mdib::EnumStringMetricState* dst, const unsigned int /*version*/)
{
    ::DFL::Mdib::ComponentActivation activationState{};
    ar & make_nvp("ActivationState", activationState);

    boost::optional<::DFL::Mdib::Duration> activeDeterminationPeriod{};
    ar & make_nvp("ActiveDeterminationPeriod", activeDeterminationPeriod);

    boost::optional<::DFL::Mdib::Duration> lifeTimePeriod{};
    ar & make_nvp("LifeTimePeriod", lifeTimePeriod);

    ::DFL::Mdib::BodySites bodySites{};
    ar & make_nvp("BodySites", bodySites);

    boost::optional<::DFL::Mdib::PhysicalConnectorInfo> physicalConnector{};
    ar & make_nvp("PhysicalConnector", physicalConnector);

    boost::optional<::DFL::Mdib::StringMetricValue> metricValue{};
    ar & make_nvp("MetricValue", metricValue);

    ::DFL::Mdib::ExtensionTypes extensions{};
    ar & make_nvp("Extensions", extensions);

    ::new(dst) ::DFL::Mdib::EnumStringMetricState(
        activationState,
        activeDeterminationPeriod,
        lifeTimePeriod,
        bodySites,
        physicalConnector,
        metricValue,
        std::move(extensions));
}

/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void load(Archive& /*ar*/, ::DFL::Mdib::EnumStringMetricState& /*dst*/, const unsigned int /*version*/)
{
}

}
}
