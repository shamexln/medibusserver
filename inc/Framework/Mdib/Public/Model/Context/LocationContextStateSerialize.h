/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <Framework/Mdib/Public/Model/Context/LocationContextState.h>
#include <Framework/Chrono/Public/SystemTimeSerialize.h>
#include <Framework/Mdib/Public/Model/CodedValueSerialize.h>
#include <Framework/Mdib/Public/Model/Context/LocationDetailSerialize.h>
#include <Framework/Mdib/Public/Model/ExtensionTypeSerialize.h>
#include <Framework/Mdib/Public/Model/InstanceIdentifierSerialize.h>
#include <Framework/Mdib/Public/Model/VersionCounterSerialize.h>
#include <Framework/Utils/Public/SerializationHelper.h>

#include <boost/serialization/nvp.hpp>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/version.hpp>
#include <boost/serialization/optional.hpp>
#include <boost/serialization/vector.hpp>

#include <utility>

BOOST_SERIALIZATION_SPLIT_FREE(::DFL::Mdib::LocationContextState)

BOOST_CLASS_VERSION(::DFL::Mdib::LocationContextState, 0)

BOOST_CLASS_TRACKING(::DFL::Mdib::LocationContextState, boost::serialization::track_never)

namespace boost
{
namespace serialization
{
/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void save(Archive& ar, const ::DFL::Mdib::LocationContextState& src, const unsigned int /*fileVersion*/)
{
    const auto& category = src.category();
    DFL::Serialization::saveNvpOptional(ar, "Category", category);

    const auto& contextAssociation = src.contextAssociation();
    ar & make_nvp("ContextAssociation", contextAssociation);

    const auto& bindingMdibVersion = src.bindingMdibVersion();
    ar & make_nvp("BindingMdibVersion", bindingMdibVersion);

    const auto& unbindingMdibVersion = src.unbindingMdibVersion();
    ar & make_nvp("UnbindingMdibVersion", unbindingMdibVersion);

    const auto& bindingStartTime = src.bindingStartTime();
    ar & make_nvp("BindingStartTime", bindingStartTime);

    const auto& bindingEndTime = src.bindingEndTime();
    ar & make_nvp("BindingEndTime", bindingEndTime);

    const auto& validators = src.validators();
    ar & make_nvp("Validators", validators);

    const auto& identifications = src.identifications();
    ar & make_nvp("Identifications", identifications);

    const auto& locationDetail = src.locationDetail();
    ar & make_nvp("LocationDetails", locationDetail);

    const auto& extensions = src.extensions();
    ar & make_nvp("Extensions", extensions);
}

/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void load_construct_data(Archive& ar, ::DFL::Mdib::LocationContextState* dst, const unsigned int /*version*/)
{
    boost::optional<::DFL::Mdib::CodedValue> category{};
    DFL::Serialization::loadNvpOptional(ar, "Category", category);

    ::DFL::Mdib::ContextAssociation contextAssociation{};
    ar & make_nvp("ContextAssociation", contextAssociation);

    boost::optional<::DFL::Mdib::VersionCounter> bindingMdibVersion{};
    ar & make_nvp("BindingMdibVersion", bindingMdibVersion);

    boost::optional<::DFL::Mdib::VersionCounter> unbindingMdibVersion{};
    ar & make_nvp("UnbindingMdibVersion", unbindingMdibVersion);

    boost::optional<::DFL::Mdib::Timestamp> bindingStartTime{};
    ar & make_nvp("BindingStartTime", bindingStartTime);

    boost::optional<::DFL::Mdib::Timestamp> bindingEndTime{};
    ar & make_nvp("BindingEndTime", bindingEndTime);

    ::DFL::Mdib::InstanceIdentifiers validators{};
    ar & make_nvp("Validators", validators);

    ::DFL::Mdib::InstanceIdentifiers identifications{};
    ar & make_nvp("Identifications", identifications);

    boost::optional<::DFL::Mdib::LocationDetail> locationDetail{};
    ar & make_nvp("LocationDetails", locationDetail);

    ::DFL::Mdib::ExtensionTypes extensions{};
    ar & make_nvp("Extensions", extensions);

    ::new(dst) ::DFL::Mdib::LocationContextState(
        category,
        contextAssociation,
        bindingMdibVersion,
        unbindingMdibVersion,
        bindingStartTime,
        bindingEndTime,
        validators,
        identifications,
        locationDetail,
        std::move(extensions));
}

/**
 * @brief Support for Boost Serialization.
 * @ingroup Mdib
 */
template<class Archive>
void load(Archive& /*ar*/, ::DFL::Mdib::LocationContextState& /*dst*/, const unsigned int /*version*/)
{
}

}
}
