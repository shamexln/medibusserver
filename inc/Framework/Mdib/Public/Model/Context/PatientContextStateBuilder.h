/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Context/PatientContextState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref PatientContextState
 * @ingroup Mdib
 */
class PatientContextStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref PatientContextState
        using BuiltType = PatientContextState;

        /// @brief Builder based on given immutable @ref PatientContextState
        explicit PatientContextStateBuilder(const PatientContextState& patientContextState=PatientContextState());

        /// @brief Builder based on given immutable @ref PatientContextState
        explicit PatientContextStateBuilder(const DFL::NotNull<SharedPtr<PatientContextState>>& patientContextState);

        /// @brief Overwrite all values with given immutable @ref PatientContextState
        PatientContextStateBuilder& operator=(const PatientContextState& patientContextState);

        /// @brief Explicit conversion to immutable @ref PatientContextState
        PatientContextState build() const;

        /// @brief Test whether the builder differs from the immutable @ref PatientContextState
        bool isChanged(const PatientContextState& base) const;

        /// @brief Setter for category
        /// @{
        PatientContextStateBuilder& category(const boost::optional<CodedValue>& category);
        PatientContextStateBuilder& category(boost::optional<CodedValue>&& category);
        /// @}

        /// @brief Setter for contextAssociation
        /// @{
        PatientContextStateBuilder& contextAssociation(ContextAssociation contextAssociation);
        /// @}

        /// @brief Setter for bindingMdibVersion
        /// @{
        PatientContextStateBuilder& bindingMdibVersion(const boost::optional<VersionCounter>& bindingMdibVersion);
        PatientContextStateBuilder& bindingMdibVersion(boost::optional<VersionCounter>&& bindingMdibVersion);
        /// @}

        /// @brief Setter for unbindingMdibVersion
        /// @{
        PatientContextStateBuilder& unbindingMdibVersion(const boost::optional<VersionCounter>& unbindingMdibVersion);
        PatientContextStateBuilder& unbindingMdibVersion(boost::optional<VersionCounter>&& unbindingMdibVersion);
        /// @}

        /// @brief Setter for bindingStartTime
        /// @{
        PatientContextStateBuilder& bindingStartTime(const boost::optional<Timestamp>& bindingStartTime);
        PatientContextStateBuilder& bindingStartTime(boost::optional<Timestamp>&& bindingStartTime);
        /// @}

        /// @brief Setter for bindingEndTime
        /// @{
        PatientContextStateBuilder& bindingEndTime(const boost::optional<Timestamp>& bindingEndTime);
        PatientContextStateBuilder& bindingEndTime(boost::optional<Timestamp>&& bindingEndTime);
        /// @}

        /// @brief Setter for validators
        /// @{
        PatientContextStateBuilder& validators(const InstanceIdentifiers& validators);
        PatientContextStateBuilder& validators(InstanceIdentifiers&& validators);
        /// @}

        /// @brief Setter for identifications
        /// @{
        PatientContextStateBuilder& identifications(const InstanceIdentifiers& identifications);
        PatientContextStateBuilder& identifications(InstanceIdentifiers&& identifications);
        /// @}

        /// @brief Setter for patientDemographicsCoreData
        /// @{
        PatientContextStateBuilder& patientDemographicsCoreData(const boost::optional<PatientDemographicsCoreData>& patientDemographicsCoreData);
        PatientContextStateBuilder& patientDemographicsCoreData(boost::optional<PatientDemographicsCoreData>&& patientDemographicsCoreData);
        /// @}

        /// @brief Setter for extensions
        /// @{
        PatientContextStateBuilder& extensions(const ExtensionTypes& extensions);
        PatientContextStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for category
        /// @{
        boost::optional<CodedValue>& category();
        const boost::optional<CodedValue>& category() const;
        /// @}

        /// @brief Getter for contextAssociation
        /// @{
        ContextAssociation& contextAssociation();
        ContextAssociation contextAssociation() const;
        /// @}

        /// @brief Getter for bindingMdibVersion
        /// @{
        boost::optional<VersionCounter>& bindingMdibVersion();
        const boost::optional<VersionCounter>& bindingMdibVersion() const;
        /// @}

        /// @brief Getter for unbindingMdibVersion
        /// @{
        boost::optional<VersionCounter>& unbindingMdibVersion();
        const boost::optional<VersionCounter>& unbindingMdibVersion() const;
        /// @}

        /// @brief Getter for bindingStartTime
        /// @{
        boost::optional<Timestamp>& bindingStartTime();
        const boost::optional<Timestamp>& bindingStartTime() const;
        /// @}

        /// @brief Getter for bindingEndTime
        /// @{
        boost::optional<Timestamp>& bindingEndTime();
        const boost::optional<Timestamp>& bindingEndTime() const;
        /// @}

        /// @brief Getter for validators
        /// @{
        InstanceIdentifiers& validators();
        const InstanceIdentifiers& validators() const;
        /// @}

        /// @brief Getter for identifications
        /// @{
        InstanceIdentifiers& identifications();
        const InstanceIdentifiers& identifications() const;
        /// @}

        /// @brief Getter for patientDemographicsCoreData
        /// @{
        boost::optional<PatientDemographicsCoreData>& patientDemographicsCoreData();
        const boost::optional<PatientDemographicsCoreData>& patientDemographicsCoreData() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        boost::optional<CodedValue> m_category;
        ContextAssociation m_contextAssociation;
        boost::optional<VersionCounter> m_bindingMdibVersion;
        boost::optional<VersionCounter> m_unbindingMdibVersion;
        boost::optional<Timestamp> m_bindingStartTime;
        boost::optional<Timestamp> m_bindingEndTime;
        InstanceIdentifiers m_validators;
        InstanceIdentifiers m_identifications;
        boost::optional<PatientDemographicsCoreData> m_patientDemographicsCoreData;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const PatientContextState& lhs, const PatientContextState& rhs);
DFL_MDIB_EXPIMP bool operator==(const PatientContextStateBuilder& lhs, const PatientContextStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const PatientContextStateBuilder& lhs, const PatientContextState& rhs);
bool operator==(const PatientContextState& lhs, const PatientContextStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const PatientContextState& lhs, const PatientContextState& rhs);
bool operator!=(const PatientContextStateBuilder& lhs, const PatientContextStateBuilder& rhs);
bool operator!=(const PatientContextState& lhs, const PatientContextStateBuilder& rhs);
bool operator!=(const PatientContextStateBuilder& lhs, const PatientContextState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref PatientContextState
 * @ingroup Mdib
 */
/// @{
PatientContextStateBuilder getBuilder(const PatientContextState& patientContextState);
PatientContextStateBuilder getBuilder(const DFL::NotNull<SharedPtr<PatientContextState>>& patientContextState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const PatientContextState& lhs, const PatientContextState& rhs);

inline PatientContextStateBuilder::PatientContextStateBuilder(const PatientContextState& patientContextState) :
    m_category(patientContextState.category()),
    m_contextAssociation(patientContextState.contextAssociation()),
    m_bindingMdibVersion(patientContextState.bindingMdibVersion()),
    m_unbindingMdibVersion(patientContextState.unbindingMdibVersion()),
    m_bindingStartTime(patientContextState.bindingStartTime()),
    m_bindingEndTime(patientContextState.bindingEndTime()),
    m_validators(patientContextState.validators()),
    m_identifications(patientContextState.identifications()),
    m_patientDemographicsCoreData(patientContextState.patientDemographicsCoreData()),
    m_extensions(patientContextState.extensions())
{
}

inline PatientContextStateBuilder::PatientContextStateBuilder(const DFL::NotNull<SharedPtr<PatientContextState>>& patientContextState) :
    m_category(patientContextState->category()),
    m_contextAssociation(patientContextState->contextAssociation()),
    m_bindingMdibVersion(patientContextState->bindingMdibVersion()),
    m_unbindingMdibVersion(patientContextState->unbindingMdibVersion()),
    m_bindingStartTime(patientContextState->bindingStartTime()),
    m_bindingEndTime(patientContextState->bindingEndTime()),
    m_validators(patientContextState->validators()),
    m_identifications(patientContextState->identifications()),
    m_patientDemographicsCoreData(patientContextState->patientDemographicsCoreData()),
    m_extensions(patientContextState->extensions())
{
}

inline PatientContextStateBuilder& PatientContextStateBuilder::operator=(const PatientContextState& patientContextState)
{
    m_category = patientContextState.category();
    m_contextAssociation = patientContextState.contextAssociation();
    m_bindingMdibVersion = patientContextState.bindingMdibVersion();
    m_unbindingMdibVersion = patientContextState.unbindingMdibVersion();
    m_bindingStartTime = patientContextState.bindingStartTime();
    m_bindingEndTime = patientContextState.bindingEndTime();
    m_validators = patientContextState.validators();
    m_identifications = patientContextState.identifications();
    m_patientDemographicsCoreData = patientContextState.patientDemographicsCoreData();
    m_extensions = patientContextState.extensions();
    return *this;
}

inline PatientContextState PatientContextStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return PatientContextState(m_category, m_contextAssociation, m_bindingMdibVersion, m_unbindingMdibVersion, m_bindingStartTime, m_bindingEndTime, m_validators, m_identifications, m_patientDemographicsCoreData, m_extensions);
}

inline bool PatientContextStateBuilder::isChanged(const PatientContextState& base) const
{
    return *this != base;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::category(const boost::optional<CodedValue>& category)
{
    m_category = category;
    return *this;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::category(boost::optional<CodedValue>&& category)
{
    m_category = std::move(category);
    return *this;
}

inline boost::optional<CodedValue>& PatientContextStateBuilder::category()
{
    return m_category;
}

inline const boost::optional<CodedValue>& PatientContextStateBuilder::category() const
{
    return m_category;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::contextAssociation(ContextAssociation contextAssociation)
{
    m_contextAssociation = contextAssociation;
    return *this;
}

inline ContextAssociation& PatientContextStateBuilder::contextAssociation()
{
    return m_contextAssociation;
}

inline ContextAssociation PatientContextStateBuilder::contextAssociation() const
{
    return m_contextAssociation;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::bindingMdibVersion(const boost::optional<VersionCounter>& bindingMdibVersion)
{
    m_bindingMdibVersion = bindingMdibVersion;
    return *this;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::bindingMdibVersion(boost::optional<VersionCounter>&& bindingMdibVersion)
{
    m_bindingMdibVersion = std::move(bindingMdibVersion);
    return *this;
}

inline boost::optional<VersionCounter>& PatientContextStateBuilder::bindingMdibVersion()
{
    return m_bindingMdibVersion;
}

inline const boost::optional<VersionCounter>& PatientContextStateBuilder::bindingMdibVersion() const
{
    return m_bindingMdibVersion;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::unbindingMdibVersion(const boost::optional<VersionCounter>& unbindingMdibVersion)
{
    m_unbindingMdibVersion = unbindingMdibVersion;
    return *this;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::unbindingMdibVersion(boost::optional<VersionCounter>&& unbindingMdibVersion)
{
    m_unbindingMdibVersion = std::move(unbindingMdibVersion);
    return *this;
}

inline boost::optional<VersionCounter>& PatientContextStateBuilder::unbindingMdibVersion()
{
    return m_unbindingMdibVersion;
}

inline const boost::optional<VersionCounter>& PatientContextStateBuilder::unbindingMdibVersion() const
{
    return m_unbindingMdibVersion;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::bindingStartTime(const boost::optional<Timestamp>& bindingStartTime)
{
    m_bindingStartTime = bindingStartTime;
    return *this;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::bindingStartTime(boost::optional<Timestamp>&& bindingStartTime)
{
    m_bindingStartTime = std::move(bindingStartTime);
    return *this;
}

inline boost::optional<Timestamp>& PatientContextStateBuilder::bindingStartTime()
{
    return m_bindingStartTime;
}

inline const boost::optional<Timestamp>& PatientContextStateBuilder::bindingStartTime() const
{
    return m_bindingStartTime;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::bindingEndTime(const boost::optional<Timestamp>& bindingEndTime)
{
    m_bindingEndTime = bindingEndTime;
    return *this;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::bindingEndTime(boost::optional<Timestamp>&& bindingEndTime)
{
    m_bindingEndTime = std::move(bindingEndTime);
    return *this;
}

inline boost::optional<Timestamp>& PatientContextStateBuilder::bindingEndTime()
{
    return m_bindingEndTime;
}

inline const boost::optional<Timestamp>& PatientContextStateBuilder::bindingEndTime() const
{
    return m_bindingEndTime;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::validators(const InstanceIdentifiers& validators)
{
    m_validators = validators;
    return *this;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::validators(InstanceIdentifiers&& validators)
{
    m_validators = std::move(validators);
    return *this;
}

inline InstanceIdentifiers& PatientContextStateBuilder::validators()
{
    return m_validators;
}

inline const InstanceIdentifiers& PatientContextStateBuilder::validators() const
{
    return m_validators;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::identifications(const InstanceIdentifiers& identifications)
{
    m_identifications = identifications;
    return *this;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::identifications(InstanceIdentifiers&& identifications)
{
    m_identifications = std::move(identifications);
    return *this;
}

inline InstanceIdentifiers& PatientContextStateBuilder::identifications()
{
    return m_identifications;
}

inline const InstanceIdentifiers& PatientContextStateBuilder::identifications() const
{
    return m_identifications;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::patientDemographicsCoreData(const boost::optional<PatientDemographicsCoreData>& patientDemographicsCoreData)
{
    m_patientDemographicsCoreData = patientDemographicsCoreData;
    return *this;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::patientDemographicsCoreData(boost::optional<PatientDemographicsCoreData>&& patientDemographicsCoreData)
{
    m_patientDemographicsCoreData = std::move(patientDemographicsCoreData);
    return *this;
}

inline boost::optional<PatientDemographicsCoreData>& PatientContextStateBuilder::patientDemographicsCoreData()
{
    return m_patientDemographicsCoreData;
}

inline const boost::optional<PatientDemographicsCoreData>& PatientContextStateBuilder::patientDemographicsCoreData() const
{
    return m_patientDemographicsCoreData;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline PatientContextStateBuilder& PatientContextStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& PatientContextStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& PatientContextStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const PatientContextState& lhs, const PatientContextStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const PatientContextStateBuilder& lhs, const PatientContextStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const PatientContextState& lhs, const PatientContextStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const PatientContextStateBuilder& lhs, const PatientContextState& rhs)
{
    return !(lhs == rhs);
}

inline PatientContextStateBuilder getBuilder(const PatientContextState& patientContextState)
{
    return PatientContextStateBuilder(patientContextState);
}

inline PatientContextStateBuilder getBuilder(const DFL::NotNull<SharedPtr<PatientContextState>>& patientContextState)
{
    return PatientContextStateBuilder(patientContextState);
}

}
}
