/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Context/LocationContextDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref LocationContextDescriptor
 * @ingroup Mdib
 */
class LocationContextDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref LocationContextDescriptor
        using BuiltType = LocationContextDescriptor;

        /// @brief Builder based on given immutable @ref LocationContextDescriptor
        explicit LocationContextDescriptorBuilder(const LocationContextDescriptor& locationContextDescriptor=LocationContextDescriptor());

        /// @brief Builder based on given immutable @ref LocationContextDescriptor
        explicit LocationContextDescriptorBuilder(const DFL::NotNull<SharedPtr<LocationContextDescriptor>>& locationContextDescriptor);

        /// @brief Overwrite all values with given immutable @ref LocationContextDescriptor
        LocationContextDescriptorBuilder& operator=(const LocationContextDescriptor& locationContextDescriptor);

        /// @brief Explicit conversion to immutable @ref LocationContextDescriptor
        LocationContextDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref LocationContextDescriptor
        bool isChanged(const LocationContextDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        LocationContextDescriptorBuilder& safetyClassification(SafetyClassification safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        LocationContextDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        LocationContextDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for extensions
        /// @{
        LocationContextDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        LocationContextDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        SafetyClassification& safetyClassification();
        SafetyClassification safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        SafetyClassification m_safetyClassification;
        boost::optional<CodedValue> m_type;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const LocationContextDescriptor& lhs, const LocationContextDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const LocationContextDescriptorBuilder& lhs, const LocationContextDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const LocationContextDescriptorBuilder& lhs, const LocationContextDescriptor& rhs);
bool operator==(const LocationContextDescriptor& lhs, const LocationContextDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const LocationContextDescriptor& lhs, const LocationContextDescriptor& rhs);
bool operator!=(const LocationContextDescriptorBuilder& lhs, const LocationContextDescriptorBuilder& rhs);
bool operator!=(const LocationContextDescriptor& lhs, const LocationContextDescriptorBuilder& rhs);
bool operator!=(const LocationContextDescriptorBuilder& lhs, const LocationContextDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref LocationContextDescriptor
 * @ingroup Mdib
 */
/// @{
LocationContextDescriptorBuilder getBuilder(const LocationContextDescriptor& locationContextDescriptor);
LocationContextDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<LocationContextDescriptor>>& locationContextDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const LocationContextDescriptor& lhs, const LocationContextDescriptor& rhs);

inline LocationContextDescriptorBuilder::LocationContextDescriptorBuilder(const LocationContextDescriptor& locationContextDescriptor) :
    m_safetyClassification(locationContextDescriptor.safetyClassification()),
    m_type(locationContextDescriptor.type()),
    m_extensions(locationContextDescriptor.extensions())
{
}

inline LocationContextDescriptorBuilder::LocationContextDescriptorBuilder(const DFL::NotNull<SharedPtr<LocationContextDescriptor>>& locationContextDescriptor) :
    m_safetyClassification(locationContextDescriptor->safetyClassification()),
    m_type(locationContextDescriptor->type()),
    m_extensions(locationContextDescriptor->extensions())
{
}

inline LocationContextDescriptorBuilder& LocationContextDescriptorBuilder::operator=(const LocationContextDescriptor& locationContextDescriptor)
{
    m_safetyClassification = locationContextDescriptor.safetyClassification();
    m_type = locationContextDescriptor.type();
    m_extensions = locationContextDescriptor.extensions();
    return *this;
}

inline LocationContextDescriptor LocationContextDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return LocationContextDescriptor(m_safetyClassification, m_type, m_extensions);
}

inline bool LocationContextDescriptorBuilder::isChanged(const LocationContextDescriptor& base) const
{
    return *this != base;
}

inline LocationContextDescriptorBuilder& LocationContextDescriptorBuilder::safetyClassification(SafetyClassification safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline SafetyClassification& LocationContextDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline SafetyClassification LocationContextDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline LocationContextDescriptorBuilder& LocationContextDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline LocationContextDescriptorBuilder& LocationContextDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& LocationContextDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& LocationContextDescriptorBuilder::type() const
{
    return m_type;
}

inline LocationContextDescriptorBuilder& LocationContextDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline LocationContextDescriptorBuilder& LocationContextDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& LocationContextDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& LocationContextDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const LocationContextDescriptor& lhs, const LocationContextDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const LocationContextDescriptorBuilder& lhs, const LocationContextDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const LocationContextDescriptor& lhs, const LocationContextDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const LocationContextDescriptorBuilder& lhs, const LocationContextDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline LocationContextDescriptorBuilder getBuilder(const LocationContextDescriptor& locationContextDescriptor)
{
    return LocationContextDescriptorBuilder(locationContextDescriptor);
}

inline LocationContextDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<LocationContextDescriptor>>& locationContextDescriptor)
{
    return LocationContextDescriptorBuilder(locationContextDescriptor);
}

}
}
