/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Operation/SetComponentStateOperationDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref SetComponentStateOperationDescriptor
 * @ingroup Mdib
 */
class SetComponentStateOperationDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref SetComponentStateOperationDescriptor
        using BuiltType = SetComponentStateOperationDescriptor;

        /// @brief Builder based on given immutable @ref SetComponentStateOperationDescriptor
        explicit SetComponentStateOperationDescriptorBuilder(const SetComponentStateOperationDescriptor& setComponentStateOperationDescriptor=SetComponentStateOperationDescriptor());

        /// @brief Builder based on given immutable @ref SetComponentStateOperationDescriptor
        explicit SetComponentStateOperationDescriptorBuilder(const DFL::NotNull<SharedPtr<SetComponentStateOperationDescriptor>>& setComponentStateOperationDescriptor);

        /// @brief Overwrite all values with given immutable @ref SetComponentStateOperationDescriptor
        SetComponentStateOperationDescriptorBuilder& operator=(const SetComponentStateOperationDescriptor& setComponentStateOperationDescriptor);

        /// @brief Explicit conversion to immutable @ref SetComponentStateOperationDescriptor
        SetComponentStateOperationDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref SetComponentStateOperationDescriptor
        bool isChanged(const SetComponentStateOperationDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        SetComponentStateOperationDescriptorBuilder& safetyClassification(boost::optional<SafetyClassification> safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        SetComponentStateOperationDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        SetComponentStateOperationDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for operationTarget
        /// @{
        SetComponentStateOperationDescriptorBuilder& operationTarget(const Handle& operationTarget);
        SetComponentStateOperationDescriptorBuilder& operationTarget(Handle&& operationTarget);
        /// @}

        /// @brief Setter for maxTimeToFinish
        /// @{
        SetComponentStateOperationDescriptorBuilder& maxTimeToFinish(const boost::optional<Duration>& maxTimeToFinish);
        SetComponentStateOperationDescriptorBuilder& maxTimeToFinish(boost::optional<Duration>&& maxTimeToFinish);
        /// @}

        /// @brief Setter for invocationEffectiveTimeout
        /// @{
        SetComponentStateOperationDescriptorBuilder& invocationEffectiveTimeout(const boost::optional<Duration>& invocationEffectiveTimeout);
        SetComponentStateOperationDescriptorBuilder& invocationEffectiveTimeout(boost::optional<Duration>&& invocationEffectiveTimeout);
        /// @}

        /// @brief Setter for retriggerable
        /// @{
        SetComponentStateOperationDescriptorBuilder& retriggerable(Retriggerable retriggerable);
        /// @}

        /// @brief Setter for accessLevel
        /// @{
        SetComponentStateOperationDescriptorBuilder& accessLevel(AccessLevel accessLevel);
        /// @}

        /// @brief Setter for modifiableData
        /// @{
        SetComponentStateOperationDescriptorBuilder& modifiableData(const XPathExpressions& modifiableData);
        SetComponentStateOperationDescriptorBuilder& modifiableData(XPathExpressions&& modifiableData);
        /// @}

        /// @brief Setter for extensions
        /// @{
        SetComponentStateOperationDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        SetComponentStateOperationDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        boost::optional<SafetyClassification>& safetyClassification();
        boost::optional<SafetyClassification> safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for operationTarget
        /// @{
        Handle& operationTarget();
        const Handle& operationTarget() const;
        /// @}

        /// @brief Getter for maxTimeToFinish
        /// @{
        boost::optional<Duration>& maxTimeToFinish();
        const boost::optional<Duration>& maxTimeToFinish() const;
        /// @}

        /// @brief Getter for invocationEffectiveTimeout
        /// @{
        boost::optional<Duration>& invocationEffectiveTimeout();
        const boost::optional<Duration>& invocationEffectiveTimeout() const;
        /// @}

        /// @brief Getter for retriggerable
        /// @{
        Retriggerable& retriggerable();
        Retriggerable retriggerable() const;
        /// @}

        /// @brief Getter for accessLevel
        /// @{
        AccessLevel& accessLevel();
        AccessLevel accessLevel() const;
        /// @}

        /// @brief Getter for modifiableData
        /// @{
        XPathExpressions& modifiableData();
        const XPathExpressions& modifiableData() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        boost::optional<SafetyClassification> m_safetyClassification;
        boost::optional<CodedValue> m_type;
        Handle m_operationTarget;
        boost::optional<Duration> m_maxTimeToFinish;
        boost::optional<Duration> m_invocationEffectiveTimeout;
        Retriggerable m_retriggerable;
        AccessLevel m_accessLevel;
        XPathExpressions m_modifiableData;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const SetComponentStateOperationDescriptor& lhs, const SetComponentStateOperationDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetComponentStateOperationDescriptorBuilder& lhs, const SetComponentStateOperationDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetComponentStateOperationDescriptorBuilder& lhs, const SetComponentStateOperationDescriptor& rhs);
bool operator==(const SetComponentStateOperationDescriptor& lhs, const SetComponentStateOperationDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const SetComponentStateOperationDescriptor& lhs, const SetComponentStateOperationDescriptor& rhs);
bool operator!=(const SetComponentStateOperationDescriptorBuilder& lhs, const SetComponentStateOperationDescriptorBuilder& rhs);
bool operator!=(const SetComponentStateOperationDescriptor& lhs, const SetComponentStateOperationDescriptorBuilder& rhs);
bool operator!=(const SetComponentStateOperationDescriptorBuilder& lhs, const SetComponentStateOperationDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref SetComponentStateOperationDescriptor
 * @ingroup Mdib
 */
/// @{
SetComponentStateOperationDescriptorBuilder getBuilder(const SetComponentStateOperationDescriptor& setComponentStateOperationDescriptor);
SetComponentStateOperationDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<SetComponentStateOperationDescriptor>>& setComponentStateOperationDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const SetComponentStateOperationDescriptor& lhs, const SetComponentStateOperationDescriptor& rhs);

inline SetComponentStateOperationDescriptorBuilder::SetComponentStateOperationDescriptorBuilder(const SetComponentStateOperationDescriptor& setComponentStateOperationDescriptor) :
    m_safetyClassification(setComponentStateOperationDescriptor.safetyClassification()),
    m_type(setComponentStateOperationDescriptor.type()),
    m_operationTarget(setComponentStateOperationDescriptor.operationTarget()),
    m_maxTimeToFinish(setComponentStateOperationDescriptor.maxTimeToFinish()),
    m_invocationEffectiveTimeout(setComponentStateOperationDescriptor.invocationEffectiveTimeout()),
    m_retriggerable(setComponentStateOperationDescriptor.retriggerable()),
    m_accessLevel(setComponentStateOperationDescriptor.accessLevel()),
    m_modifiableData(setComponentStateOperationDescriptor.modifiableData()),
    m_extensions(setComponentStateOperationDescriptor.extensions())
{
}

inline SetComponentStateOperationDescriptorBuilder::SetComponentStateOperationDescriptorBuilder(const DFL::NotNull<SharedPtr<SetComponentStateOperationDescriptor>>& setComponentStateOperationDescriptor) :
    m_safetyClassification(setComponentStateOperationDescriptor->safetyClassification()),
    m_type(setComponentStateOperationDescriptor->type()),
    m_operationTarget(setComponentStateOperationDescriptor->operationTarget()),
    m_maxTimeToFinish(setComponentStateOperationDescriptor->maxTimeToFinish()),
    m_invocationEffectiveTimeout(setComponentStateOperationDescriptor->invocationEffectiveTimeout()),
    m_retriggerable(setComponentStateOperationDescriptor->retriggerable()),
    m_accessLevel(setComponentStateOperationDescriptor->accessLevel()),
    m_modifiableData(setComponentStateOperationDescriptor->modifiableData()),
    m_extensions(setComponentStateOperationDescriptor->extensions())
{
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::operator=(const SetComponentStateOperationDescriptor& setComponentStateOperationDescriptor)
{
    m_safetyClassification = setComponentStateOperationDescriptor.safetyClassification();
    m_type = setComponentStateOperationDescriptor.type();
    m_operationTarget = setComponentStateOperationDescriptor.operationTarget();
    m_maxTimeToFinish = setComponentStateOperationDescriptor.maxTimeToFinish();
    m_invocationEffectiveTimeout = setComponentStateOperationDescriptor.invocationEffectiveTimeout();
    m_retriggerable = setComponentStateOperationDescriptor.retriggerable();
    m_accessLevel = setComponentStateOperationDescriptor.accessLevel();
    m_modifiableData = setComponentStateOperationDescriptor.modifiableData();
    m_extensions = setComponentStateOperationDescriptor.extensions();
    return *this;
}

inline SetComponentStateOperationDescriptor SetComponentStateOperationDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return SetComponentStateOperationDescriptor(m_safetyClassification, m_type, m_operationTarget, m_maxTimeToFinish, m_invocationEffectiveTimeout, m_retriggerable, m_accessLevel, m_modifiableData, m_extensions);
}

inline bool SetComponentStateOperationDescriptorBuilder::isChanged(const SetComponentStateOperationDescriptor& base) const
{
    return *this != base;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::safetyClassification(boost::optional<SafetyClassification> safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline boost::optional<SafetyClassification>& SetComponentStateOperationDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline boost::optional<SafetyClassification> SetComponentStateOperationDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& SetComponentStateOperationDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& SetComponentStateOperationDescriptorBuilder::type() const
{
    return m_type;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::operationTarget(const Handle& operationTarget)
{
    m_operationTarget = operationTarget;
    return *this;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::operationTarget(Handle&& operationTarget)
{
    m_operationTarget = std::move(operationTarget);
    return *this;
}

inline Handle& SetComponentStateOperationDescriptorBuilder::operationTarget()
{
    return m_operationTarget;
}

inline const Handle& SetComponentStateOperationDescriptorBuilder::operationTarget() const
{
    return m_operationTarget;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::maxTimeToFinish(const boost::optional<Duration>& maxTimeToFinish)
{
    m_maxTimeToFinish = maxTimeToFinish;
    return *this;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::maxTimeToFinish(boost::optional<Duration>&& maxTimeToFinish)
{
    m_maxTimeToFinish = std::move(maxTimeToFinish);
    return *this;
}

inline boost::optional<Duration>& SetComponentStateOperationDescriptorBuilder::maxTimeToFinish()
{
    return m_maxTimeToFinish;
}

inline const boost::optional<Duration>& SetComponentStateOperationDescriptorBuilder::maxTimeToFinish() const
{
    return m_maxTimeToFinish;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::invocationEffectiveTimeout(const boost::optional<Duration>& invocationEffectiveTimeout)
{
    m_invocationEffectiveTimeout = invocationEffectiveTimeout;
    return *this;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::invocationEffectiveTimeout(boost::optional<Duration>&& invocationEffectiveTimeout)
{
    m_invocationEffectiveTimeout = std::move(invocationEffectiveTimeout);
    return *this;
}

inline boost::optional<Duration>& SetComponentStateOperationDescriptorBuilder::invocationEffectiveTimeout()
{
    return m_invocationEffectiveTimeout;
}

inline const boost::optional<Duration>& SetComponentStateOperationDescriptorBuilder::invocationEffectiveTimeout() const
{
    return m_invocationEffectiveTimeout;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::retriggerable(Retriggerable retriggerable)
{
    m_retriggerable = retriggerable;
    return *this;
}

inline Retriggerable& SetComponentStateOperationDescriptorBuilder::retriggerable()
{
    return m_retriggerable;
}

inline Retriggerable SetComponentStateOperationDescriptorBuilder::retriggerable() const
{
    return m_retriggerable;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::accessLevel(AccessLevel accessLevel)
{
    m_accessLevel = accessLevel;
    return *this;
}

inline AccessLevel& SetComponentStateOperationDescriptorBuilder::accessLevel()
{
    return m_accessLevel;
}

inline AccessLevel SetComponentStateOperationDescriptorBuilder::accessLevel() const
{
    return m_accessLevel;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::modifiableData(const XPathExpressions& modifiableData)
{
    m_modifiableData = modifiableData;
    return *this;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::modifiableData(XPathExpressions&& modifiableData)
{
    m_modifiableData = std::move(modifiableData);
    return *this;
}

inline XPathExpressions& SetComponentStateOperationDescriptorBuilder::modifiableData()
{
    return m_modifiableData;
}

inline const XPathExpressions& SetComponentStateOperationDescriptorBuilder::modifiableData() const
{
    return m_modifiableData;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline SetComponentStateOperationDescriptorBuilder& SetComponentStateOperationDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& SetComponentStateOperationDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& SetComponentStateOperationDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const SetComponentStateOperationDescriptor& lhs, const SetComponentStateOperationDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const SetComponentStateOperationDescriptorBuilder& lhs, const SetComponentStateOperationDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetComponentStateOperationDescriptor& lhs, const SetComponentStateOperationDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetComponentStateOperationDescriptorBuilder& lhs, const SetComponentStateOperationDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline SetComponentStateOperationDescriptorBuilder getBuilder(const SetComponentStateOperationDescriptor& setComponentStateOperationDescriptor)
{
    return SetComponentStateOperationDescriptorBuilder(setComponentStateOperationDescriptor);
}

inline SetComponentStateOperationDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<SetComponentStateOperationDescriptor>>& setComponentStateOperationDescriptor)
{
    return SetComponentStateOperationDescriptorBuilder(setComponentStateOperationDescriptor);
}

}
}
