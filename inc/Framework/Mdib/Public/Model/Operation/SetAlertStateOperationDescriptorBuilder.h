/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Operation/SetAlertStateOperationDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref SetAlertStateOperationDescriptor
 * @ingroup Mdib
 */
class SetAlertStateOperationDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref SetAlertStateOperationDescriptor
        using BuiltType = SetAlertStateOperationDescriptor;

        /// @brief Builder based on given immutable @ref SetAlertStateOperationDescriptor
        explicit SetAlertStateOperationDescriptorBuilder(const SetAlertStateOperationDescriptor& setAlertStateOperationDescriptor=SetAlertStateOperationDescriptor());

        /// @brief Builder based on given immutable @ref SetAlertStateOperationDescriptor
        explicit SetAlertStateOperationDescriptorBuilder(const DFL::NotNull<SharedPtr<SetAlertStateOperationDescriptor>>& setAlertStateOperationDescriptor);

        /// @brief Overwrite all values with given immutable @ref SetAlertStateOperationDescriptor
        SetAlertStateOperationDescriptorBuilder& operator=(const SetAlertStateOperationDescriptor& setAlertStateOperationDescriptor);

        /// @brief Explicit conversion to immutable @ref SetAlertStateOperationDescriptor
        SetAlertStateOperationDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref SetAlertStateOperationDescriptor
        bool isChanged(const SetAlertStateOperationDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        SetAlertStateOperationDescriptorBuilder& safetyClassification(boost::optional<SafetyClassification> safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        SetAlertStateOperationDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        SetAlertStateOperationDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for operationTarget
        /// @{
        SetAlertStateOperationDescriptorBuilder& operationTarget(const Handle& operationTarget);
        SetAlertStateOperationDescriptorBuilder& operationTarget(Handle&& operationTarget);
        /// @}

        /// @brief Setter for maxTimeToFinish
        /// @{
        SetAlertStateOperationDescriptorBuilder& maxTimeToFinish(const boost::optional<Duration>& maxTimeToFinish);
        SetAlertStateOperationDescriptorBuilder& maxTimeToFinish(boost::optional<Duration>&& maxTimeToFinish);
        /// @}

        /// @brief Setter for invocationEffectiveTimeout
        /// @{
        SetAlertStateOperationDescriptorBuilder& invocationEffectiveTimeout(const boost::optional<Duration>& invocationEffectiveTimeout);
        SetAlertStateOperationDescriptorBuilder& invocationEffectiveTimeout(boost::optional<Duration>&& invocationEffectiveTimeout);
        /// @}

        /// @brief Setter for retriggerable
        /// @{
        SetAlertStateOperationDescriptorBuilder& retriggerable(Retriggerable retriggerable);
        /// @}

        /// @brief Setter for accessLevel
        /// @{
        SetAlertStateOperationDescriptorBuilder& accessLevel(AccessLevel accessLevel);
        /// @}

        /// @brief Setter for modifiableData
        /// @{
        SetAlertStateOperationDescriptorBuilder& modifiableData(const XPathExpressions& modifiableData);
        SetAlertStateOperationDescriptorBuilder& modifiableData(XPathExpressions&& modifiableData);
        /// @}

        /// @brief Setter for extensions
        /// @{
        SetAlertStateOperationDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        SetAlertStateOperationDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        boost::optional<SafetyClassification>& safetyClassification();
        boost::optional<SafetyClassification> safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for operationTarget
        /// @{
        Handle& operationTarget();
        const Handle& operationTarget() const;
        /// @}

        /// @brief Getter for maxTimeToFinish
        /// @{
        boost::optional<Duration>& maxTimeToFinish();
        const boost::optional<Duration>& maxTimeToFinish() const;
        /// @}

        /// @brief Getter for invocationEffectiveTimeout
        /// @{
        boost::optional<Duration>& invocationEffectiveTimeout();
        const boost::optional<Duration>& invocationEffectiveTimeout() const;
        /// @}

        /// @brief Getter for retriggerable
        /// @{
        Retriggerable& retriggerable();
        Retriggerable retriggerable() const;
        /// @}

        /// @brief Getter for accessLevel
        /// @{
        AccessLevel& accessLevel();
        AccessLevel accessLevel() const;
        /// @}

        /// @brief Getter for modifiableData
        /// @{
        XPathExpressions& modifiableData();
        const XPathExpressions& modifiableData() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        boost::optional<SafetyClassification> m_safetyClassification;
        boost::optional<CodedValue> m_type;
        Handle m_operationTarget;
        boost::optional<Duration> m_maxTimeToFinish;
        boost::optional<Duration> m_invocationEffectiveTimeout;
        Retriggerable m_retriggerable;
        AccessLevel m_accessLevel;
        XPathExpressions m_modifiableData;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const SetAlertStateOperationDescriptor& lhs, const SetAlertStateOperationDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetAlertStateOperationDescriptorBuilder& lhs, const SetAlertStateOperationDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetAlertStateOperationDescriptorBuilder& lhs, const SetAlertStateOperationDescriptor& rhs);
bool operator==(const SetAlertStateOperationDescriptor& lhs, const SetAlertStateOperationDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const SetAlertStateOperationDescriptor& lhs, const SetAlertStateOperationDescriptor& rhs);
bool operator!=(const SetAlertStateOperationDescriptorBuilder& lhs, const SetAlertStateOperationDescriptorBuilder& rhs);
bool operator!=(const SetAlertStateOperationDescriptor& lhs, const SetAlertStateOperationDescriptorBuilder& rhs);
bool operator!=(const SetAlertStateOperationDescriptorBuilder& lhs, const SetAlertStateOperationDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref SetAlertStateOperationDescriptor
 * @ingroup Mdib
 */
/// @{
SetAlertStateOperationDescriptorBuilder getBuilder(const SetAlertStateOperationDescriptor& setAlertStateOperationDescriptor);
SetAlertStateOperationDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<SetAlertStateOperationDescriptor>>& setAlertStateOperationDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const SetAlertStateOperationDescriptor& lhs, const SetAlertStateOperationDescriptor& rhs);

inline SetAlertStateOperationDescriptorBuilder::SetAlertStateOperationDescriptorBuilder(const SetAlertStateOperationDescriptor& setAlertStateOperationDescriptor) :
    m_safetyClassification(setAlertStateOperationDescriptor.safetyClassification()),
    m_type(setAlertStateOperationDescriptor.type()),
    m_operationTarget(setAlertStateOperationDescriptor.operationTarget()),
    m_maxTimeToFinish(setAlertStateOperationDescriptor.maxTimeToFinish()),
    m_invocationEffectiveTimeout(setAlertStateOperationDescriptor.invocationEffectiveTimeout()),
    m_retriggerable(setAlertStateOperationDescriptor.retriggerable()),
    m_accessLevel(setAlertStateOperationDescriptor.accessLevel()),
    m_modifiableData(setAlertStateOperationDescriptor.modifiableData()),
    m_extensions(setAlertStateOperationDescriptor.extensions())
{
}

inline SetAlertStateOperationDescriptorBuilder::SetAlertStateOperationDescriptorBuilder(const DFL::NotNull<SharedPtr<SetAlertStateOperationDescriptor>>& setAlertStateOperationDescriptor) :
    m_safetyClassification(setAlertStateOperationDescriptor->safetyClassification()),
    m_type(setAlertStateOperationDescriptor->type()),
    m_operationTarget(setAlertStateOperationDescriptor->operationTarget()),
    m_maxTimeToFinish(setAlertStateOperationDescriptor->maxTimeToFinish()),
    m_invocationEffectiveTimeout(setAlertStateOperationDescriptor->invocationEffectiveTimeout()),
    m_retriggerable(setAlertStateOperationDescriptor->retriggerable()),
    m_accessLevel(setAlertStateOperationDescriptor->accessLevel()),
    m_modifiableData(setAlertStateOperationDescriptor->modifiableData()),
    m_extensions(setAlertStateOperationDescriptor->extensions())
{
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::operator=(const SetAlertStateOperationDescriptor& setAlertStateOperationDescriptor)
{
    m_safetyClassification = setAlertStateOperationDescriptor.safetyClassification();
    m_type = setAlertStateOperationDescriptor.type();
    m_operationTarget = setAlertStateOperationDescriptor.operationTarget();
    m_maxTimeToFinish = setAlertStateOperationDescriptor.maxTimeToFinish();
    m_invocationEffectiveTimeout = setAlertStateOperationDescriptor.invocationEffectiveTimeout();
    m_retriggerable = setAlertStateOperationDescriptor.retriggerable();
    m_accessLevel = setAlertStateOperationDescriptor.accessLevel();
    m_modifiableData = setAlertStateOperationDescriptor.modifiableData();
    m_extensions = setAlertStateOperationDescriptor.extensions();
    return *this;
}

inline SetAlertStateOperationDescriptor SetAlertStateOperationDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return SetAlertStateOperationDescriptor(m_safetyClassification, m_type, m_operationTarget, m_maxTimeToFinish, m_invocationEffectiveTimeout, m_retriggerable, m_accessLevel, m_modifiableData, m_extensions);
}

inline bool SetAlertStateOperationDescriptorBuilder::isChanged(const SetAlertStateOperationDescriptor& base) const
{
    return *this != base;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::safetyClassification(boost::optional<SafetyClassification> safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline boost::optional<SafetyClassification>& SetAlertStateOperationDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline boost::optional<SafetyClassification> SetAlertStateOperationDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& SetAlertStateOperationDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& SetAlertStateOperationDescriptorBuilder::type() const
{
    return m_type;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::operationTarget(const Handle& operationTarget)
{
    m_operationTarget = operationTarget;
    return *this;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::operationTarget(Handle&& operationTarget)
{
    m_operationTarget = std::move(operationTarget);
    return *this;
}

inline Handle& SetAlertStateOperationDescriptorBuilder::operationTarget()
{
    return m_operationTarget;
}

inline const Handle& SetAlertStateOperationDescriptorBuilder::operationTarget() const
{
    return m_operationTarget;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::maxTimeToFinish(const boost::optional<Duration>& maxTimeToFinish)
{
    m_maxTimeToFinish = maxTimeToFinish;
    return *this;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::maxTimeToFinish(boost::optional<Duration>&& maxTimeToFinish)
{
    m_maxTimeToFinish = std::move(maxTimeToFinish);
    return *this;
}

inline boost::optional<Duration>& SetAlertStateOperationDescriptorBuilder::maxTimeToFinish()
{
    return m_maxTimeToFinish;
}

inline const boost::optional<Duration>& SetAlertStateOperationDescriptorBuilder::maxTimeToFinish() const
{
    return m_maxTimeToFinish;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::invocationEffectiveTimeout(const boost::optional<Duration>& invocationEffectiveTimeout)
{
    m_invocationEffectiveTimeout = invocationEffectiveTimeout;
    return *this;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::invocationEffectiveTimeout(boost::optional<Duration>&& invocationEffectiveTimeout)
{
    m_invocationEffectiveTimeout = std::move(invocationEffectiveTimeout);
    return *this;
}

inline boost::optional<Duration>& SetAlertStateOperationDescriptorBuilder::invocationEffectiveTimeout()
{
    return m_invocationEffectiveTimeout;
}

inline const boost::optional<Duration>& SetAlertStateOperationDescriptorBuilder::invocationEffectiveTimeout() const
{
    return m_invocationEffectiveTimeout;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::retriggerable(Retriggerable retriggerable)
{
    m_retriggerable = retriggerable;
    return *this;
}

inline Retriggerable& SetAlertStateOperationDescriptorBuilder::retriggerable()
{
    return m_retriggerable;
}

inline Retriggerable SetAlertStateOperationDescriptorBuilder::retriggerable() const
{
    return m_retriggerable;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::accessLevel(AccessLevel accessLevel)
{
    m_accessLevel = accessLevel;
    return *this;
}

inline AccessLevel& SetAlertStateOperationDescriptorBuilder::accessLevel()
{
    return m_accessLevel;
}

inline AccessLevel SetAlertStateOperationDescriptorBuilder::accessLevel() const
{
    return m_accessLevel;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::modifiableData(const XPathExpressions& modifiableData)
{
    m_modifiableData = modifiableData;
    return *this;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::modifiableData(XPathExpressions&& modifiableData)
{
    m_modifiableData = std::move(modifiableData);
    return *this;
}

inline XPathExpressions& SetAlertStateOperationDescriptorBuilder::modifiableData()
{
    return m_modifiableData;
}

inline const XPathExpressions& SetAlertStateOperationDescriptorBuilder::modifiableData() const
{
    return m_modifiableData;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline SetAlertStateOperationDescriptorBuilder& SetAlertStateOperationDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& SetAlertStateOperationDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& SetAlertStateOperationDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const SetAlertStateOperationDescriptor& lhs, const SetAlertStateOperationDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const SetAlertStateOperationDescriptorBuilder& lhs, const SetAlertStateOperationDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetAlertStateOperationDescriptor& lhs, const SetAlertStateOperationDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetAlertStateOperationDescriptorBuilder& lhs, const SetAlertStateOperationDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline SetAlertStateOperationDescriptorBuilder getBuilder(const SetAlertStateOperationDescriptor& setAlertStateOperationDescriptor)
{
    return SetAlertStateOperationDescriptorBuilder(setAlertStateOperationDescriptor);
}

inline SetAlertStateOperationDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<SetAlertStateOperationDescriptor>>& setAlertStateOperationDescriptor)
{
    return SetAlertStateOperationDescriptorBuilder(setAlertStateOperationDescriptor);
}

}
}
