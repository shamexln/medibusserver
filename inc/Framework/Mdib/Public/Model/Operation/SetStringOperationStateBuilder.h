/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Operation/SetStringOperationState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref SetStringOperationState
 * @ingroup Mdib
 */
class SetStringOperationStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref SetStringOperationState
        using BuiltType = SetStringOperationState;

        /// @brief Builder based on given immutable @ref SetStringOperationState
        explicit SetStringOperationStateBuilder(const SetStringOperationState& setStringOperationState=SetStringOperationState());

        /// @brief Builder based on given immutable @ref SetStringOperationState
        explicit SetStringOperationStateBuilder(const DFL::NotNull<SharedPtr<SetStringOperationState>>& setStringOperationState);

        /// @brief Overwrite all values with given immutable @ref SetStringOperationState
        SetStringOperationStateBuilder& operator=(const SetStringOperationState& setStringOperationState);

        /// @brief Explicit conversion to immutable @ref SetStringOperationState
        SetStringOperationState build() const;

        /// @brief Test whether the builder differs from the immutable @ref SetStringOperationState
        bool isChanged(const SetStringOperationState& base) const;

        /// @brief Setter for operatingMode
        /// @{
        SetStringOperationStateBuilder& operatingMode(OperatingMode operatingMode);
        /// @}

        /// @brief Setter for allowedValues
        /// @{
        SetStringOperationStateBuilder& allowedValues(const AllowedStringValues& allowedValues);
        SetStringOperationStateBuilder& allowedValues(AllowedStringValues&& allowedValues);
        /// @}

        /// @brief Setter for extensions
        /// @{
        SetStringOperationStateBuilder& extensions(const ExtensionTypes& extensions);
        SetStringOperationStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for operatingMode
        /// @{
        OperatingMode& operatingMode();
        OperatingMode operatingMode() const;
        /// @}

        /// @brief Getter for allowedValues
        /// @{
        AllowedStringValues& allowedValues();
        const AllowedStringValues& allowedValues() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        OperatingMode m_operatingMode;
        AllowedStringValues m_allowedValues;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const SetStringOperationState& lhs, const SetStringOperationState& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetStringOperationStateBuilder& lhs, const SetStringOperationStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetStringOperationStateBuilder& lhs, const SetStringOperationState& rhs);
bool operator==(const SetStringOperationState& lhs, const SetStringOperationStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const SetStringOperationState& lhs, const SetStringOperationState& rhs);
bool operator!=(const SetStringOperationStateBuilder& lhs, const SetStringOperationStateBuilder& rhs);
bool operator!=(const SetStringOperationState& lhs, const SetStringOperationStateBuilder& rhs);
bool operator!=(const SetStringOperationStateBuilder& lhs, const SetStringOperationState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref SetStringOperationState
 * @ingroup Mdib
 */
/// @{
SetStringOperationStateBuilder getBuilder(const SetStringOperationState& setStringOperationState);
SetStringOperationStateBuilder getBuilder(const DFL::NotNull<SharedPtr<SetStringOperationState>>& setStringOperationState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const SetStringOperationState& lhs, const SetStringOperationState& rhs);

inline SetStringOperationStateBuilder::SetStringOperationStateBuilder(const SetStringOperationState& setStringOperationState) :
    m_operatingMode(setStringOperationState.operatingMode()),
    m_allowedValues(setStringOperationState.allowedValues()),
    m_extensions(setStringOperationState.extensions())
{
}

inline SetStringOperationStateBuilder::SetStringOperationStateBuilder(const DFL::NotNull<SharedPtr<SetStringOperationState>>& setStringOperationState) :
    m_operatingMode(setStringOperationState->operatingMode()),
    m_allowedValues(setStringOperationState->allowedValues()),
    m_extensions(setStringOperationState->extensions())
{
}

inline SetStringOperationStateBuilder& SetStringOperationStateBuilder::operator=(const SetStringOperationState& setStringOperationState)
{
    m_operatingMode = setStringOperationState.operatingMode();
    m_allowedValues = setStringOperationState.allowedValues();
    m_extensions = setStringOperationState.extensions();
    return *this;
}

inline SetStringOperationState SetStringOperationStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return SetStringOperationState(m_operatingMode, m_allowedValues, m_extensions);
}

inline bool SetStringOperationStateBuilder::isChanged(const SetStringOperationState& base) const
{
    return *this != base;
}

inline SetStringOperationStateBuilder& SetStringOperationStateBuilder::operatingMode(OperatingMode operatingMode)
{
    m_operatingMode = operatingMode;
    return *this;
}

inline OperatingMode& SetStringOperationStateBuilder::operatingMode()
{
    return m_operatingMode;
}

inline OperatingMode SetStringOperationStateBuilder::operatingMode() const
{
    return m_operatingMode;
}

inline SetStringOperationStateBuilder& SetStringOperationStateBuilder::allowedValues(const AllowedStringValues& allowedValues)
{
    m_allowedValues = allowedValues;
    return *this;
}

inline SetStringOperationStateBuilder& SetStringOperationStateBuilder::allowedValues(AllowedStringValues&& allowedValues)
{
    m_allowedValues = std::move(allowedValues);
    return *this;
}

inline AllowedStringValues& SetStringOperationStateBuilder::allowedValues()
{
    return m_allowedValues;
}

inline const AllowedStringValues& SetStringOperationStateBuilder::allowedValues() const
{
    return m_allowedValues;
}

inline SetStringOperationStateBuilder& SetStringOperationStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline SetStringOperationStateBuilder& SetStringOperationStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& SetStringOperationStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& SetStringOperationStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const SetStringOperationState& lhs, const SetStringOperationStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const SetStringOperationStateBuilder& lhs, const SetStringOperationStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetStringOperationState& lhs, const SetStringOperationStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetStringOperationStateBuilder& lhs, const SetStringOperationState& rhs)
{
    return !(lhs == rhs);
}

inline SetStringOperationStateBuilder getBuilder(const SetStringOperationState& setStringOperationState)
{
    return SetStringOperationStateBuilder(setStringOperationState);
}

inline SetStringOperationStateBuilder getBuilder(const DFL::NotNull<SharedPtr<SetStringOperationState>>& setStringOperationState)
{
    return SetStringOperationStateBuilder(setStringOperationState);
}

}
}
