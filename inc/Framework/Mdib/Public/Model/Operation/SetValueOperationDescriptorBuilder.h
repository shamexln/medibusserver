/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Operation/SetValueOperationDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref SetValueOperationDescriptor
 * @ingroup Mdib
 */
class SetValueOperationDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref SetValueOperationDescriptor
        using BuiltType = SetValueOperationDescriptor;

        /// @brief Builder based on given immutable @ref SetValueOperationDescriptor
        explicit SetValueOperationDescriptorBuilder(const SetValueOperationDescriptor& setValueOperationDescriptor=SetValueOperationDescriptor());

        /// @brief Builder based on given immutable @ref SetValueOperationDescriptor
        explicit SetValueOperationDescriptorBuilder(const DFL::NotNull<SharedPtr<SetValueOperationDescriptor>>& setValueOperationDescriptor);

        /// @brief Overwrite all values with given immutable @ref SetValueOperationDescriptor
        SetValueOperationDescriptorBuilder& operator=(const SetValueOperationDescriptor& setValueOperationDescriptor);

        /// @brief Explicit conversion to immutable @ref SetValueOperationDescriptor
        SetValueOperationDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref SetValueOperationDescriptor
        bool isChanged(const SetValueOperationDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        SetValueOperationDescriptorBuilder& safetyClassification(boost::optional<SafetyClassification> safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        SetValueOperationDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        SetValueOperationDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for operationTarget
        /// @{
        SetValueOperationDescriptorBuilder& operationTarget(const Handle& operationTarget);
        SetValueOperationDescriptorBuilder& operationTarget(Handle&& operationTarget);
        /// @}

        /// @brief Setter for maxTimeToFinish
        /// @{
        SetValueOperationDescriptorBuilder& maxTimeToFinish(const boost::optional<Duration>& maxTimeToFinish);
        SetValueOperationDescriptorBuilder& maxTimeToFinish(boost::optional<Duration>&& maxTimeToFinish);
        /// @}

        /// @brief Setter for invocationEffectiveTimeout
        /// @{
        SetValueOperationDescriptorBuilder& invocationEffectiveTimeout(const boost::optional<Duration>& invocationEffectiveTimeout);
        SetValueOperationDescriptorBuilder& invocationEffectiveTimeout(boost::optional<Duration>&& invocationEffectiveTimeout);
        /// @}

        /// @brief Setter for retriggerable
        /// @{
        SetValueOperationDescriptorBuilder& retriggerable(Retriggerable retriggerable);
        /// @}

        /// @brief Setter for accessLevel
        /// @{
        SetValueOperationDescriptorBuilder& accessLevel(AccessLevel accessLevel);
        /// @}

        /// @brief Setter for extensions
        /// @{
        SetValueOperationDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        SetValueOperationDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        boost::optional<SafetyClassification>& safetyClassification();
        boost::optional<SafetyClassification> safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for operationTarget
        /// @{
        Handle& operationTarget();
        const Handle& operationTarget() const;
        /// @}

        /// @brief Getter for maxTimeToFinish
        /// @{
        boost::optional<Duration>& maxTimeToFinish();
        const boost::optional<Duration>& maxTimeToFinish() const;
        /// @}

        /// @brief Getter for invocationEffectiveTimeout
        /// @{
        boost::optional<Duration>& invocationEffectiveTimeout();
        const boost::optional<Duration>& invocationEffectiveTimeout() const;
        /// @}

        /// @brief Getter for retriggerable
        /// @{
        Retriggerable& retriggerable();
        Retriggerable retriggerable() const;
        /// @}

        /// @brief Getter for accessLevel
        /// @{
        AccessLevel& accessLevel();
        AccessLevel accessLevel() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        boost::optional<SafetyClassification> m_safetyClassification;
        boost::optional<CodedValue> m_type;
        Handle m_operationTarget;
        boost::optional<Duration> m_maxTimeToFinish;
        boost::optional<Duration> m_invocationEffectiveTimeout;
        Retriggerable m_retriggerable;
        AccessLevel m_accessLevel;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const SetValueOperationDescriptor& lhs, const SetValueOperationDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetValueOperationDescriptorBuilder& lhs, const SetValueOperationDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetValueOperationDescriptorBuilder& lhs, const SetValueOperationDescriptor& rhs);
bool operator==(const SetValueOperationDescriptor& lhs, const SetValueOperationDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const SetValueOperationDescriptor& lhs, const SetValueOperationDescriptor& rhs);
bool operator!=(const SetValueOperationDescriptorBuilder& lhs, const SetValueOperationDescriptorBuilder& rhs);
bool operator!=(const SetValueOperationDescriptor& lhs, const SetValueOperationDescriptorBuilder& rhs);
bool operator!=(const SetValueOperationDescriptorBuilder& lhs, const SetValueOperationDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref SetValueOperationDescriptor
 * @ingroup Mdib
 */
/// @{
SetValueOperationDescriptorBuilder getBuilder(const SetValueOperationDescriptor& setValueOperationDescriptor);
SetValueOperationDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<SetValueOperationDescriptor>>& setValueOperationDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const SetValueOperationDescriptor& lhs, const SetValueOperationDescriptor& rhs);

inline SetValueOperationDescriptorBuilder::SetValueOperationDescriptorBuilder(const SetValueOperationDescriptor& setValueOperationDescriptor) :
    m_safetyClassification(setValueOperationDescriptor.safetyClassification()),
    m_type(setValueOperationDescriptor.type()),
    m_operationTarget(setValueOperationDescriptor.operationTarget()),
    m_maxTimeToFinish(setValueOperationDescriptor.maxTimeToFinish()),
    m_invocationEffectiveTimeout(setValueOperationDescriptor.invocationEffectiveTimeout()),
    m_retriggerable(setValueOperationDescriptor.retriggerable()),
    m_accessLevel(setValueOperationDescriptor.accessLevel()),
    m_extensions(setValueOperationDescriptor.extensions())
{
}

inline SetValueOperationDescriptorBuilder::SetValueOperationDescriptorBuilder(const DFL::NotNull<SharedPtr<SetValueOperationDescriptor>>& setValueOperationDescriptor) :
    m_safetyClassification(setValueOperationDescriptor->safetyClassification()),
    m_type(setValueOperationDescriptor->type()),
    m_operationTarget(setValueOperationDescriptor->operationTarget()),
    m_maxTimeToFinish(setValueOperationDescriptor->maxTimeToFinish()),
    m_invocationEffectiveTimeout(setValueOperationDescriptor->invocationEffectiveTimeout()),
    m_retriggerable(setValueOperationDescriptor->retriggerable()),
    m_accessLevel(setValueOperationDescriptor->accessLevel()),
    m_extensions(setValueOperationDescriptor->extensions())
{
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::operator=(const SetValueOperationDescriptor& setValueOperationDescriptor)
{
    m_safetyClassification = setValueOperationDescriptor.safetyClassification();
    m_type = setValueOperationDescriptor.type();
    m_operationTarget = setValueOperationDescriptor.operationTarget();
    m_maxTimeToFinish = setValueOperationDescriptor.maxTimeToFinish();
    m_invocationEffectiveTimeout = setValueOperationDescriptor.invocationEffectiveTimeout();
    m_retriggerable = setValueOperationDescriptor.retriggerable();
    m_accessLevel = setValueOperationDescriptor.accessLevel();
    m_extensions = setValueOperationDescriptor.extensions();
    return *this;
}

inline SetValueOperationDescriptor SetValueOperationDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return SetValueOperationDescriptor(m_safetyClassification, m_type, m_operationTarget, m_maxTimeToFinish, m_invocationEffectiveTimeout, m_retriggerable, m_accessLevel, m_extensions);
}

inline bool SetValueOperationDescriptorBuilder::isChanged(const SetValueOperationDescriptor& base) const
{
    return *this != base;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::safetyClassification(boost::optional<SafetyClassification> safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline boost::optional<SafetyClassification>& SetValueOperationDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline boost::optional<SafetyClassification> SetValueOperationDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& SetValueOperationDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& SetValueOperationDescriptorBuilder::type() const
{
    return m_type;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::operationTarget(const Handle& operationTarget)
{
    m_operationTarget = operationTarget;
    return *this;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::operationTarget(Handle&& operationTarget)
{
    m_operationTarget = std::move(operationTarget);
    return *this;
}

inline Handle& SetValueOperationDescriptorBuilder::operationTarget()
{
    return m_operationTarget;
}

inline const Handle& SetValueOperationDescriptorBuilder::operationTarget() const
{
    return m_operationTarget;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::maxTimeToFinish(const boost::optional<Duration>& maxTimeToFinish)
{
    m_maxTimeToFinish = maxTimeToFinish;
    return *this;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::maxTimeToFinish(boost::optional<Duration>&& maxTimeToFinish)
{
    m_maxTimeToFinish = std::move(maxTimeToFinish);
    return *this;
}

inline boost::optional<Duration>& SetValueOperationDescriptorBuilder::maxTimeToFinish()
{
    return m_maxTimeToFinish;
}

inline const boost::optional<Duration>& SetValueOperationDescriptorBuilder::maxTimeToFinish() const
{
    return m_maxTimeToFinish;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::invocationEffectiveTimeout(const boost::optional<Duration>& invocationEffectiveTimeout)
{
    m_invocationEffectiveTimeout = invocationEffectiveTimeout;
    return *this;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::invocationEffectiveTimeout(boost::optional<Duration>&& invocationEffectiveTimeout)
{
    m_invocationEffectiveTimeout = std::move(invocationEffectiveTimeout);
    return *this;
}

inline boost::optional<Duration>& SetValueOperationDescriptorBuilder::invocationEffectiveTimeout()
{
    return m_invocationEffectiveTimeout;
}

inline const boost::optional<Duration>& SetValueOperationDescriptorBuilder::invocationEffectiveTimeout() const
{
    return m_invocationEffectiveTimeout;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::retriggerable(Retriggerable retriggerable)
{
    m_retriggerable = retriggerable;
    return *this;
}

inline Retriggerable& SetValueOperationDescriptorBuilder::retriggerable()
{
    return m_retriggerable;
}

inline Retriggerable SetValueOperationDescriptorBuilder::retriggerable() const
{
    return m_retriggerable;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::accessLevel(AccessLevel accessLevel)
{
    m_accessLevel = accessLevel;
    return *this;
}

inline AccessLevel& SetValueOperationDescriptorBuilder::accessLevel()
{
    return m_accessLevel;
}

inline AccessLevel SetValueOperationDescriptorBuilder::accessLevel() const
{
    return m_accessLevel;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline SetValueOperationDescriptorBuilder& SetValueOperationDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& SetValueOperationDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& SetValueOperationDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const SetValueOperationDescriptor& lhs, const SetValueOperationDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const SetValueOperationDescriptorBuilder& lhs, const SetValueOperationDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetValueOperationDescriptor& lhs, const SetValueOperationDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetValueOperationDescriptorBuilder& lhs, const SetValueOperationDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline SetValueOperationDescriptorBuilder getBuilder(const SetValueOperationDescriptor& setValueOperationDescriptor)
{
    return SetValueOperationDescriptorBuilder(setValueOperationDescriptor);
}

inline SetValueOperationDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<SetValueOperationDescriptor>>& setValueOperationDescriptor)
{
    return SetValueOperationDescriptorBuilder(setValueOperationDescriptor);
}

}
}
