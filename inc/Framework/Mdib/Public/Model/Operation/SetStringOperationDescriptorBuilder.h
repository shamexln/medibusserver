/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Operation/SetStringOperationDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref SetStringOperationDescriptor
 * @ingroup Mdib
 */
class SetStringOperationDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref SetStringOperationDescriptor
        using BuiltType = SetStringOperationDescriptor;

        /// @brief Builder based on given immutable @ref SetStringOperationDescriptor
        explicit SetStringOperationDescriptorBuilder(const SetStringOperationDescriptor& setStringOperationDescriptor=SetStringOperationDescriptor());

        /// @brief Builder based on given immutable @ref SetStringOperationDescriptor
        explicit SetStringOperationDescriptorBuilder(const DFL::NotNull<SharedPtr<SetStringOperationDescriptor>>& setStringOperationDescriptor);

        /// @brief Overwrite all values with given immutable @ref SetStringOperationDescriptor
        SetStringOperationDescriptorBuilder& operator=(const SetStringOperationDescriptor& setStringOperationDescriptor);

        /// @brief Explicit conversion to immutable @ref SetStringOperationDescriptor
        SetStringOperationDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref SetStringOperationDescriptor
        bool isChanged(const SetStringOperationDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        SetStringOperationDescriptorBuilder& safetyClassification(boost::optional<SafetyClassification> safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        SetStringOperationDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        SetStringOperationDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for operationTarget
        /// @{
        SetStringOperationDescriptorBuilder& operationTarget(const Handle& operationTarget);
        SetStringOperationDescriptorBuilder& operationTarget(Handle&& operationTarget);
        /// @}

        /// @brief Setter for maxTimeToFinish
        /// @{
        SetStringOperationDescriptorBuilder& maxTimeToFinish(const boost::optional<Duration>& maxTimeToFinish);
        SetStringOperationDescriptorBuilder& maxTimeToFinish(boost::optional<Duration>&& maxTimeToFinish);
        /// @}

        /// @brief Setter for invocationEffectiveTimeout
        /// @{
        SetStringOperationDescriptorBuilder& invocationEffectiveTimeout(const boost::optional<Duration>& invocationEffectiveTimeout);
        SetStringOperationDescriptorBuilder& invocationEffectiveTimeout(boost::optional<Duration>&& invocationEffectiveTimeout);
        /// @}

        /// @brief Setter for retriggerable
        /// @{
        SetStringOperationDescriptorBuilder& retriggerable(Retriggerable retriggerable);
        /// @}

        /// @brief Setter for accessLevel
        /// @{
        SetStringOperationDescriptorBuilder& accessLevel(AccessLevel accessLevel);
        /// @}

        /// @brief Setter for maxLength
        /// @{
        SetStringOperationDescriptorBuilder& maxLength(boost::optional<SetStringOperationDescriptor::MaxLength> maxLength);
        /// @}

        /// @brief Setter for extensions
        /// @{
        SetStringOperationDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        SetStringOperationDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        boost::optional<SafetyClassification>& safetyClassification();
        boost::optional<SafetyClassification> safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for operationTarget
        /// @{
        Handle& operationTarget();
        const Handle& operationTarget() const;
        /// @}

        /// @brief Getter for maxTimeToFinish
        /// @{
        boost::optional<Duration>& maxTimeToFinish();
        const boost::optional<Duration>& maxTimeToFinish() const;
        /// @}

        /// @brief Getter for invocationEffectiveTimeout
        /// @{
        boost::optional<Duration>& invocationEffectiveTimeout();
        const boost::optional<Duration>& invocationEffectiveTimeout() const;
        /// @}

        /// @brief Getter for retriggerable
        /// @{
        Retriggerable& retriggerable();
        Retriggerable retriggerable() const;
        /// @}

        /// @brief Getter for accessLevel
        /// @{
        AccessLevel& accessLevel();
        AccessLevel accessLevel() const;
        /// @}

        /// @brief Getter for maxLength
        /// @{
        boost::optional<SetStringOperationDescriptor::MaxLength>& maxLength();
        boost::optional<SetStringOperationDescriptor::MaxLength> maxLength() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        boost::optional<SafetyClassification> m_safetyClassification;
        boost::optional<CodedValue> m_type;
        Handle m_operationTarget;
        boost::optional<Duration> m_maxTimeToFinish;
        boost::optional<Duration> m_invocationEffectiveTimeout;
        Retriggerable m_retriggerable;
        AccessLevel m_accessLevel;
        boost::optional<SetStringOperationDescriptor::MaxLength> m_maxLength;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const SetStringOperationDescriptor& lhs, const SetStringOperationDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetStringOperationDescriptorBuilder& lhs, const SetStringOperationDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetStringOperationDescriptorBuilder& lhs, const SetStringOperationDescriptor& rhs);
bool operator==(const SetStringOperationDescriptor& lhs, const SetStringOperationDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const SetStringOperationDescriptor& lhs, const SetStringOperationDescriptor& rhs);
bool operator!=(const SetStringOperationDescriptorBuilder& lhs, const SetStringOperationDescriptorBuilder& rhs);
bool operator!=(const SetStringOperationDescriptor& lhs, const SetStringOperationDescriptorBuilder& rhs);
bool operator!=(const SetStringOperationDescriptorBuilder& lhs, const SetStringOperationDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref SetStringOperationDescriptor
 * @ingroup Mdib
 */
/// @{
SetStringOperationDescriptorBuilder getBuilder(const SetStringOperationDescriptor& setStringOperationDescriptor);
SetStringOperationDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<SetStringOperationDescriptor>>& setStringOperationDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const SetStringOperationDescriptor& lhs, const SetStringOperationDescriptor& rhs);

inline SetStringOperationDescriptorBuilder::SetStringOperationDescriptorBuilder(const SetStringOperationDescriptor& setStringOperationDescriptor) :
    m_safetyClassification(setStringOperationDescriptor.safetyClassification()),
    m_type(setStringOperationDescriptor.type()),
    m_operationTarget(setStringOperationDescriptor.operationTarget()),
    m_maxTimeToFinish(setStringOperationDescriptor.maxTimeToFinish()),
    m_invocationEffectiveTimeout(setStringOperationDescriptor.invocationEffectiveTimeout()),
    m_retriggerable(setStringOperationDescriptor.retriggerable()),
    m_accessLevel(setStringOperationDescriptor.accessLevel()),
    m_maxLength(setStringOperationDescriptor.maxLength()),
    m_extensions(setStringOperationDescriptor.extensions())
{
}

inline SetStringOperationDescriptorBuilder::SetStringOperationDescriptorBuilder(const DFL::NotNull<SharedPtr<SetStringOperationDescriptor>>& setStringOperationDescriptor) :
    m_safetyClassification(setStringOperationDescriptor->safetyClassification()),
    m_type(setStringOperationDescriptor->type()),
    m_operationTarget(setStringOperationDescriptor->operationTarget()),
    m_maxTimeToFinish(setStringOperationDescriptor->maxTimeToFinish()),
    m_invocationEffectiveTimeout(setStringOperationDescriptor->invocationEffectiveTimeout()),
    m_retriggerable(setStringOperationDescriptor->retriggerable()),
    m_accessLevel(setStringOperationDescriptor->accessLevel()),
    m_maxLength(setStringOperationDescriptor->maxLength()),
    m_extensions(setStringOperationDescriptor->extensions())
{
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::operator=(const SetStringOperationDescriptor& setStringOperationDescriptor)
{
    m_safetyClassification = setStringOperationDescriptor.safetyClassification();
    m_type = setStringOperationDescriptor.type();
    m_operationTarget = setStringOperationDescriptor.operationTarget();
    m_maxTimeToFinish = setStringOperationDescriptor.maxTimeToFinish();
    m_invocationEffectiveTimeout = setStringOperationDescriptor.invocationEffectiveTimeout();
    m_retriggerable = setStringOperationDescriptor.retriggerable();
    m_accessLevel = setStringOperationDescriptor.accessLevel();
    m_maxLength = setStringOperationDescriptor.maxLength();
    m_extensions = setStringOperationDescriptor.extensions();
    return *this;
}

inline SetStringOperationDescriptor SetStringOperationDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return SetStringOperationDescriptor(m_safetyClassification, m_type, m_operationTarget, m_maxTimeToFinish, m_invocationEffectiveTimeout, m_retriggerable, m_accessLevel, m_maxLength, m_extensions);
}

inline bool SetStringOperationDescriptorBuilder::isChanged(const SetStringOperationDescriptor& base) const
{
    return *this != base;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::safetyClassification(boost::optional<SafetyClassification> safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline boost::optional<SafetyClassification>& SetStringOperationDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline boost::optional<SafetyClassification> SetStringOperationDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& SetStringOperationDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& SetStringOperationDescriptorBuilder::type() const
{
    return m_type;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::operationTarget(const Handle& operationTarget)
{
    m_operationTarget = operationTarget;
    return *this;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::operationTarget(Handle&& operationTarget)
{
    m_operationTarget = std::move(operationTarget);
    return *this;
}

inline Handle& SetStringOperationDescriptorBuilder::operationTarget()
{
    return m_operationTarget;
}

inline const Handle& SetStringOperationDescriptorBuilder::operationTarget() const
{
    return m_operationTarget;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::maxTimeToFinish(const boost::optional<Duration>& maxTimeToFinish)
{
    m_maxTimeToFinish = maxTimeToFinish;
    return *this;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::maxTimeToFinish(boost::optional<Duration>&& maxTimeToFinish)
{
    m_maxTimeToFinish = std::move(maxTimeToFinish);
    return *this;
}

inline boost::optional<Duration>& SetStringOperationDescriptorBuilder::maxTimeToFinish()
{
    return m_maxTimeToFinish;
}

inline const boost::optional<Duration>& SetStringOperationDescriptorBuilder::maxTimeToFinish() const
{
    return m_maxTimeToFinish;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::invocationEffectiveTimeout(const boost::optional<Duration>& invocationEffectiveTimeout)
{
    m_invocationEffectiveTimeout = invocationEffectiveTimeout;
    return *this;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::invocationEffectiveTimeout(boost::optional<Duration>&& invocationEffectiveTimeout)
{
    m_invocationEffectiveTimeout = std::move(invocationEffectiveTimeout);
    return *this;
}

inline boost::optional<Duration>& SetStringOperationDescriptorBuilder::invocationEffectiveTimeout()
{
    return m_invocationEffectiveTimeout;
}

inline const boost::optional<Duration>& SetStringOperationDescriptorBuilder::invocationEffectiveTimeout() const
{
    return m_invocationEffectiveTimeout;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::retriggerable(Retriggerable retriggerable)
{
    m_retriggerable = retriggerable;
    return *this;
}

inline Retriggerable& SetStringOperationDescriptorBuilder::retriggerable()
{
    return m_retriggerable;
}

inline Retriggerable SetStringOperationDescriptorBuilder::retriggerable() const
{
    return m_retriggerable;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::accessLevel(AccessLevel accessLevel)
{
    m_accessLevel = accessLevel;
    return *this;
}

inline AccessLevel& SetStringOperationDescriptorBuilder::accessLevel()
{
    return m_accessLevel;
}

inline AccessLevel SetStringOperationDescriptorBuilder::accessLevel() const
{
    return m_accessLevel;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::maxLength(boost::optional<SetStringOperationDescriptor::MaxLength> maxLength)
{
    m_maxLength = maxLength;
    return *this;
}

inline boost::optional<SetStringOperationDescriptor::MaxLength>& SetStringOperationDescriptorBuilder::maxLength()
{
    return m_maxLength;
}

inline boost::optional<SetStringOperationDescriptor::MaxLength> SetStringOperationDescriptorBuilder::maxLength() const
{
    return m_maxLength;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline SetStringOperationDescriptorBuilder& SetStringOperationDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& SetStringOperationDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& SetStringOperationDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const SetStringOperationDescriptor& lhs, const SetStringOperationDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const SetStringOperationDescriptorBuilder& lhs, const SetStringOperationDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetStringOperationDescriptor& lhs, const SetStringOperationDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetStringOperationDescriptorBuilder& lhs, const SetStringOperationDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline SetStringOperationDescriptorBuilder getBuilder(const SetStringOperationDescriptor& setStringOperationDescriptor)
{
    return SetStringOperationDescriptorBuilder(setStringOperationDescriptor);
}

inline SetStringOperationDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<SetStringOperationDescriptor>>& setStringOperationDescriptor)
{
    return SetStringOperationDescriptorBuilder(setStringOperationDescriptor);
}

}
}
