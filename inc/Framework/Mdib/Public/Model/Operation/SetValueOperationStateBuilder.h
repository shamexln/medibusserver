/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Operation/SetValueOperationState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref SetValueOperationState
 * @ingroup Mdib
 */
class SetValueOperationStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref SetValueOperationState
        using BuiltType = SetValueOperationState;

        /// @brief Builder based on given immutable @ref SetValueOperationState
        explicit SetValueOperationStateBuilder(const SetValueOperationState& setValueOperationState=SetValueOperationState());

        /// @brief Builder based on given immutable @ref SetValueOperationState
        explicit SetValueOperationStateBuilder(const DFL::NotNull<SharedPtr<SetValueOperationState>>& setValueOperationState);

        /// @brief Overwrite all values with given immutable @ref SetValueOperationState
        SetValueOperationStateBuilder& operator=(const SetValueOperationState& setValueOperationState);

        /// @brief Explicit conversion to immutable @ref SetValueOperationState
        SetValueOperationState build() const;

        /// @brief Test whether the builder differs from the immutable @ref SetValueOperationState
        bool isChanged(const SetValueOperationState& base) const;

        /// @brief Setter for operatingMode
        /// @{
        SetValueOperationStateBuilder& operatingMode(OperatingMode operatingMode);
        /// @}

        /// @brief Setter for allowedRanges
        /// @{
        SetValueOperationStateBuilder& allowedRanges(const Ranges& allowedRanges);
        SetValueOperationStateBuilder& allowedRanges(Ranges&& allowedRanges);
        /// @}

        /// @brief Setter for extensions
        /// @{
        SetValueOperationStateBuilder& extensions(const ExtensionTypes& extensions);
        SetValueOperationStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for operatingMode
        /// @{
        OperatingMode& operatingMode();
        OperatingMode operatingMode() const;
        /// @}

        /// @brief Getter for allowedRanges
        /// @{
        Ranges& allowedRanges();
        const Ranges& allowedRanges() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        OperatingMode m_operatingMode;
        Ranges m_allowedRanges;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const SetValueOperationState& lhs, const SetValueOperationState& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetValueOperationStateBuilder& lhs, const SetValueOperationStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetValueOperationStateBuilder& lhs, const SetValueOperationState& rhs);
bool operator==(const SetValueOperationState& lhs, const SetValueOperationStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const SetValueOperationState& lhs, const SetValueOperationState& rhs);
bool operator!=(const SetValueOperationStateBuilder& lhs, const SetValueOperationStateBuilder& rhs);
bool operator!=(const SetValueOperationState& lhs, const SetValueOperationStateBuilder& rhs);
bool operator!=(const SetValueOperationStateBuilder& lhs, const SetValueOperationState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref SetValueOperationState
 * @ingroup Mdib
 */
/// @{
SetValueOperationStateBuilder getBuilder(const SetValueOperationState& setValueOperationState);
SetValueOperationStateBuilder getBuilder(const DFL::NotNull<SharedPtr<SetValueOperationState>>& setValueOperationState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const SetValueOperationState& lhs, const SetValueOperationState& rhs);

inline SetValueOperationStateBuilder::SetValueOperationStateBuilder(const SetValueOperationState& setValueOperationState) :
    m_operatingMode(setValueOperationState.operatingMode()),
    m_allowedRanges(setValueOperationState.allowedRanges()),
    m_extensions(setValueOperationState.extensions())
{
}

inline SetValueOperationStateBuilder::SetValueOperationStateBuilder(const DFL::NotNull<SharedPtr<SetValueOperationState>>& setValueOperationState) :
    m_operatingMode(setValueOperationState->operatingMode()),
    m_allowedRanges(setValueOperationState->allowedRanges()),
    m_extensions(setValueOperationState->extensions())
{
}

inline SetValueOperationStateBuilder& SetValueOperationStateBuilder::operator=(const SetValueOperationState& setValueOperationState)
{
    m_operatingMode = setValueOperationState.operatingMode();
    m_allowedRanges = setValueOperationState.allowedRanges();
    m_extensions = setValueOperationState.extensions();
    return *this;
}

inline SetValueOperationState SetValueOperationStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return SetValueOperationState(m_operatingMode, m_allowedRanges, m_extensions);
}

inline bool SetValueOperationStateBuilder::isChanged(const SetValueOperationState& base) const
{
    return *this != base;
}

inline SetValueOperationStateBuilder& SetValueOperationStateBuilder::operatingMode(OperatingMode operatingMode)
{
    m_operatingMode = operatingMode;
    return *this;
}

inline OperatingMode& SetValueOperationStateBuilder::operatingMode()
{
    return m_operatingMode;
}

inline OperatingMode SetValueOperationStateBuilder::operatingMode() const
{
    return m_operatingMode;
}

inline SetValueOperationStateBuilder& SetValueOperationStateBuilder::allowedRanges(const Ranges& allowedRanges)
{
    m_allowedRanges = allowedRanges;
    return *this;
}

inline SetValueOperationStateBuilder& SetValueOperationStateBuilder::allowedRanges(Ranges&& allowedRanges)
{
    m_allowedRanges = std::move(allowedRanges);
    return *this;
}

inline Ranges& SetValueOperationStateBuilder::allowedRanges()
{
    return m_allowedRanges;
}

inline const Ranges& SetValueOperationStateBuilder::allowedRanges() const
{
    return m_allowedRanges;
}

inline SetValueOperationStateBuilder& SetValueOperationStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline SetValueOperationStateBuilder& SetValueOperationStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& SetValueOperationStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& SetValueOperationStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const SetValueOperationState& lhs, const SetValueOperationStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const SetValueOperationStateBuilder& lhs, const SetValueOperationStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetValueOperationState& lhs, const SetValueOperationStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetValueOperationStateBuilder& lhs, const SetValueOperationState& rhs)
{
    return !(lhs == rhs);
}

inline SetValueOperationStateBuilder getBuilder(const SetValueOperationState& setValueOperationState)
{
    return SetValueOperationStateBuilder(setValueOperationState);
}

inline SetValueOperationStateBuilder getBuilder(const DFL::NotNull<SharedPtr<SetValueOperationState>>& setValueOperationState)
{
    return SetValueOperationStateBuilder(setValueOperationState);
}

}
}
