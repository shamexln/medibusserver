/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Operation/SetContextStateOperationState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref SetContextStateOperationState
 * @ingroup Mdib
 */
class SetContextStateOperationStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref SetContextStateOperationState
        using BuiltType = SetContextStateOperationState;

        /// @brief Builder based on given immutable @ref SetContextStateOperationState
        explicit SetContextStateOperationStateBuilder(const SetContextStateOperationState& setContextStateOperationState=SetContextStateOperationState());

        /// @brief Builder based on given immutable @ref SetContextStateOperationState
        explicit SetContextStateOperationStateBuilder(const DFL::NotNull<SharedPtr<SetContextStateOperationState>>& setContextStateOperationState);

        /// @brief Overwrite all values with given immutable @ref SetContextStateOperationState
        SetContextStateOperationStateBuilder& operator=(const SetContextStateOperationState& setContextStateOperationState);

        /// @brief Explicit conversion to immutable @ref SetContextStateOperationState
        SetContextStateOperationState build() const;

        /// @brief Test whether the builder differs from the immutable @ref SetContextStateOperationState
        bool isChanged(const SetContextStateOperationState& base) const;

        /// @brief Setter for operatingMode
        /// @{
        SetContextStateOperationStateBuilder& operatingMode(OperatingMode operatingMode);
        /// @}

        /// @brief Setter for extensions
        /// @{
        SetContextStateOperationStateBuilder& extensions(const ExtensionTypes& extensions);
        SetContextStateOperationStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for operatingMode
        /// @{
        OperatingMode& operatingMode();
        OperatingMode operatingMode() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        OperatingMode m_operatingMode;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const SetContextStateOperationState& lhs, const SetContextStateOperationState& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetContextStateOperationStateBuilder& lhs, const SetContextStateOperationStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetContextStateOperationStateBuilder& lhs, const SetContextStateOperationState& rhs);
bool operator==(const SetContextStateOperationState& lhs, const SetContextStateOperationStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const SetContextStateOperationState& lhs, const SetContextStateOperationState& rhs);
bool operator!=(const SetContextStateOperationStateBuilder& lhs, const SetContextStateOperationStateBuilder& rhs);
bool operator!=(const SetContextStateOperationState& lhs, const SetContextStateOperationStateBuilder& rhs);
bool operator!=(const SetContextStateOperationStateBuilder& lhs, const SetContextStateOperationState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref SetContextStateOperationState
 * @ingroup Mdib
 */
/// @{
SetContextStateOperationStateBuilder getBuilder(const SetContextStateOperationState& setContextStateOperationState);
SetContextStateOperationStateBuilder getBuilder(const DFL::NotNull<SharedPtr<SetContextStateOperationState>>& setContextStateOperationState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const SetContextStateOperationState& lhs, const SetContextStateOperationState& rhs);

inline SetContextStateOperationStateBuilder::SetContextStateOperationStateBuilder(const SetContextStateOperationState& setContextStateOperationState) :
    m_operatingMode(setContextStateOperationState.operatingMode()),
    m_extensions(setContextStateOperationState.extensions())
{
}

inline SetContextStateOperationStateBuilder::SetContextStateOperationStateBuilder(const DFL::NotNull<SharedPtr<SetContextStateOperationState>>& setContextStateOperationState) :
    m_operatingMode(setContextStateOperationState->operatingMode()),
    m_extensions(setContextStateOperationState->extensions())
{
}

inline SetContextStateOperationStateBuilder& SetContextStateOperationStateBuilder::operator=(const SetContextStateOperationState& setContextStateOperationState)
{
    m_operatingMode = setContextStateOperationState.operatingMode();
    m_extensions = setContextStateOperationState.extensions();
    return *this;
}

inline SetContextStateOperationState SetContextStateOperationStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return SetContextStateOperationState(m_operatingMode, m_extensions);
}

inline bool SetContextStateOperationStateBuilder::isChanged(const SetContextStateOperationState& base) const
{
    return *this != base;
}

inline SetContextStateOperationStateBuilder& SetContextStateOperationStateBuilder::operatingMode(OperatingMode operatingMode)
{
    m_operatingMode = operatingMode;
    return *this;
}

inline OperatingMode& SetContextStateOperationStateBuilder::operatingMode()
{
    return m_operatingMode;
}

inline OperatingMode SetContextStateOperationStateBuilder::operatingMode() const
{
    return m_operatingMode;
}

inline SetContextStateOperationStateBuilder& SetContextStateOperationStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline SetContextStateOperationStateBuilder& SetContextStateOperationStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& SetContextStateOperationStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& SetContextStateOperationStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const SetContextStateOperationState& lhs, const SetContextStateOperationStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const SetContextStateOperationStateBuilder& lhs, const SetContextStateOperationStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetContextStateOperationState& lhs, const SetContextStateOperationStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetContextStateOperationStateBuilder& lhs, const SetContextStateOperationState& rhs)
{
    return !(lhs == rhs);
}

inline SetContextStateOperationStateBuilder getBuilder(const SetContextStateOperationState& setContextStateOperationState)
{
    return SetContextStateOperationStateBuilder(setContextStateOperationState);
}

inline SetContextStateOperationStateBuilder getBuilder(const DFL::NotNull<SharedPtr<SetContextStateOperationState>>& setContextStateOperationState)
{
    return SetContextStateOperationStateBuilder(setContextStateOperationState);
}

}
}
