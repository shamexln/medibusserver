/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Operation/ActivateOperationDescriptor.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref ActivateOperationDescriptor
 * @ingroup Mdib
 */
class ActivateOperationDescriptorBuilder
{
    public:
        /// @brief Typedef to the immutable @ref ActivateOperationDescriptor
        using BuiltType = ActivateOperationDescriptor;

        /// @brief Builder based on given immutable @ref ActivateOperationDescriptor
        explicit ActivateOperationDescriptorBuilder(const ActivateOperationDescriptor& activateOperationDescriptor=ActivateOperationDescriptor());

        /// @brief Builder based on given immutable @ref ActivateOperationDescriptor
        explicit ActivateOperationDescriptorBuilder(const DFL::NotNull<SharedPtr<ActivateOperationDescriptor>>& activateOperationDescriptor);

        /// @brief Overwrite all values with given immutable @ref ActivateOperationDescriptor
        ActivateOperationDescriptorBuilder& operator=(const ActivateOperationDescriptor& activateOperationDescriptor);

        /// @brief Explicit conversion to immutable @ref ActivateOperationDescriptor
        ActivateOperationDescriptor build() const;

        /// @brief Test whether the builder differs from the immutable @ref ActivateOperationDescriptor
        bool isChanged(const ActivateOperationDescriptor& base) const;

        /// @brief Setter for safetyClassification
        /// @{
        ActivateOperationDescriptorBuilder& safetyClassification(boost::optional<SafetyClassification> safetyClassification);
        /// @}

        /// @brief Setter for type
        /// @{
        ActivateOperationDescriptorBuilder& type(const boost::optional<CodedValue>& type);
        ActivateOperationDescriptorBuilder& type(boost::optional<CodedValue>&& type);
        /// @}

        /// @brief Setter for operationTarget
        /// @{
        ActivateOperationDescriptorBuilder& operationTarget(const Handle& operationTarget);
        ActivateOperationDescriptorBuilder& operationTarget(Handle&& operationTarget);
        /// @}

        /// @brief Setter for maxTimeToFinish
        /// @{
        ActivateOperationDescriptorBuilder& maxTimeToFinish(const boost::optional<Duration>& maxTimeToFinish);
        ActivateOperationDescriptorBuilder& maxTimeToFinish(boost::optional<Duration>&& maxTimeToFinish);
        /// @}

        /// @brief Setter for invocationEffectiveTimeout
        /// @{
        ActivateOperationDescriptorBuilder& invocationEffectiveTimeout(const boost::optional<Duration>& invocationEffectiveTimeout);
        ActivateOperationDescriptorBuilder& invocationEffectiveTimeout(boost::optional<Duration>&& invocationEffectiveTimeout);
        /// @}

        /// @brief Setter for retriggerable
        /// @{
        ActivateOperationDescriptorBuilder& retriggerable(Retriggerable retriggerable);
        /// @}

        /// @brief Setter for accessLevel
        /// @{
        ActivateOperationDescriptorBuilder& accessLevel(AccessLevel accessLevel);
        /// @}

        /// @brief Setter for arguments
        /// @{
        ActivateOperationDescriptorBuilder& arguments(const ActivateArguments& arguments);
        ActivateOperationDescriptorBuilder& arguments(ActivateArguments&& arguments);
        /// @}

        /// @brief Setter for extensions
        /// @{
        ActivateOperationDescriptorBuilder& extensions(const ExtensionTypes& extensions);
        ActivateOperationDescriptorBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for safetyClassification
        /// @{
        boost::optional<SafetyClassification>& safetyClassification();
        boost::optional<SafetyClassification> safetyClassification() const;
        /// @}

        /// @brief Getter for type
        /// @{
        boost::optional<CodedValue>& type();
        const boost::optional<CodedValue>& type() const;
        /// @}

        /// @brief Getter for operationTarget
        /// @{
        Handle& operationTarget();
        const Handle& operationTarget() const;
        /// @}

        /// @brief Getter for maxTimeToFinish
        /// @{
        boost::optional<Duration>& maxTimeToFinish();
        const boost::optional<Duration>& maxTimeToFinish() const;
        /// @}

        /// @brief Getter for invocationEffectiveTimeout
        /// @{
        boost::optional<Duration>& invocationEffectiveTimeout();
        const boost::optional<Duration>& invocationEffectiveTimeout() const;
        /// @}

        /// @brief Getter for retriggerable
        /// @{
        Retriggerable& retriggerable();
        Retriggerable retriggerable() const;
        /// @}

        /// @brief Getter for accessLevel
        /// @{
        AccessLevel& accessLevel();
        AccessLevel accessLevel() const;
        /// @}

        /// @brief Getter for arguments
        /// @{
        ActivateArguments& arguments();
        const ActivateArguments& arguments() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        boost::optional<SafetyClassification> m_safetyClassification;
        boost::optional<CodedValue> m_type;
        Handle m_operationTarget;
        boost::optional<Duration> m_maxTimeToFinish;
        boost::optional<Duration> m_invocationEffectiveTimeout;
        Retriggerable m_retriggerable;
        AccessLevel m_accessLevel;
        ActivateArguments m_arguments;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const ActivateOperationDescriptor& lhs, const ActivateOperationDescriptor& rhs);
DFL_MDIB_EXPIMP bool operator==(const ActivateOperationDescriptorBuilder& lhs, const ActivateOperationDescriptorBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const ActivateOperationDescriptorBuilder& lhs, const ActivateOperationDescriptor& rhs);
bool operator==(const ActivateOperationDescriptor& lhs, const ActivateOperationDescriptorBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const ActivateOperationDescriptor& lhs, const ActivateOperationDescriptor& rhs);
bool operator!=(const ActivateOperationDescriptorBuilder& lhs, const ActivateOperationDescriptorBuilder& rhs);
bool operator!=(const ActivateOperationDescriptor& lhs, const ActivateOperationDescriptorBuilder& rhs);
bool operator!=(const ActivateOperationDescriptorBuilder& lhs, const ActivateOperationDescriptor& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref ActivateOperationDescriptor
 * @ingroup Mdib
 */
/// @{
ActivateOperationDescriptorBuilder getBuilder(const ActivateOperationDescriptor& activateOperationDescriptor);
ActivateOperationDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<ActivateOperationDescriptor>>& activateOperationDescriptor);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const ActivateOperationDescriptor& lhs, const ActivateOperationDescriptor& rhs);

inline ActivateOperationDescriptorBuilder::ActivateOperationDescriptorBuilder(const ActivateOperationDescriptor& activateOperationDescriptor) :
    m_safetyClassification(activateOperationDescriptor.safetyClassification()),
    m_type(activateOperationDescriptor.type()),
    m_operationTarget(activateOperationDescriptor.operationTarget()),
    m_maxTimeToFinish(activateOperationDescriptor.maxTimeToFinish()),
    m_invocationEffectiveTimeout(activateOperationDescriptor.invocationEffectiveTimeout()),
    m_retriggerable(activateOperationDescriptor.retriggerable()),
    m_accessLevel(activateOperationDescriptor.accessLevel()),
    m_arguments(activateOperationDescriptor.arguments()),
    m_extensions(activateOperationDescriptor.extensions())
{
}

inline ActivateOperationDescriptorBuilder::ActivateOperationDescriptorBuilder(const DFL::NotNull<SharedPtr<ActivateOperationDescriptor>>& activateOperationDescriptor) :
    m_safetyClassification(activateOperationDescriptor->safetyClassification()),
    m_type(activateOperationDescriptor->type()),
    m_operationTarget(activateOperationDescriptor->operationTarget()),
    m_maxTimeToFinish(activateOperationDescriptor->maxTimeToFinish()),
    m_invocationEffectiveTimeout(activateOperationDescriptor->invocationEffectiveTimeout()),
    m_retriggerable(activateOperationDescriptor->retriggerable()),
    m_accessLevel(activateOperationDescriptor->accessLevel()),
    m_arguments(activateOperationDescriptor->arguments()),
    m_extensions(activateOperationDescriptor->extensions())
{
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::operator=(const ActivateOperationDescriptor& activateOperationDescriptor)
{
    m_safetyClassification = activateOperationDescriptor.safetyClassification();
    m_type = activateOperationDescriptor.type();
    m_operationTarget = activateOperationDescriptor.operationTarget();
    m_maxTimeToFinish = activateOperationDescriptor.maxTimeToFinish();
    m_invocationEffectiveTimeout = activateOperationDescriptor.invocationEffectiveTimeout();
    m_retriggerable = activateOperationDescriptor.retriggerable();
    m_accessLevel = activateOperationDescriptor.accessLevel();
    m_arguments = activateOperationDescriptor.arguments();
    m_extensions = activateOperationDescriptor.extensions();
    return *this;
}

inline ActivateOperationDescriptor ActivateOperationDescriptorBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return ActivateOperationDescriptor(m_safetyClassification, m_type, m_operationTarget, m_maxTimeToFinish, m_invocationEffectiveTimeout, m_retriggerable, m_accessLevel, m_arguments, m_extensions);
}

inline bool ActivateOperationDescriptorBuilder::isChanged(const ActivateOperationDescriptor& base) const
{
    return *this != base;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::safetyClassification(boost::optional<SafetyClassification> safetyClassification)
{
    m_safetyClassification = safetyClassification;
    return *this;
}

inline boost::optional<SafetyClassification>& ActivateOperationDescriptorBuilder::safetyClassification()
{
    return m_safetyClassification;
}

inline boost::optional<SafetyClassification> ActivateOperationDescriptorBuilder::safetyClassification() const
{
    return m_safetyClassification;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::type(const boost::optional<CodedValue>& type)
{
    m_type = type;
    return *this;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::type(boost::optional<CodedValue>&& type)
{
    m_type = std::move(type);
    return *this;
}

inline boost::optional<CodedValue>& ActivateOperationDescriptorBuilder::type()
{
    return m_type;
}

inline const boost::optional<CodedValue>& ActivateOperationDescriptorBuilder::type() const
{
    return m_type;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::operationTarget(const Handle& operationTarget)
{
    m_operationTarget = operationTarget;
    return *this;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::operationTarget(Handle&& operationTarget)
{
    m_operationTarget = std::move(operationTarget);
    return *this;
}

inline Handle& ActivateOperationDescriptorBuilder::operationTarget()
{
    return m_operationTarget;
}

inline const Handle& ActivateOperationDescriptorBuilder::operationTarget() const
{
    return m_operationTarget;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::maxTimeToFinish(const boost::optional<Duration>& maxTimeToFinish)
{
    m_maxTimeToFinish = maxTimeToFinish;
    return *this;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::maxTimeToFinish(boost::optional<Duration>&& maxTimeToFinish)
{
    m_maxTimeToFinish = std::move(maxTimeToFinish);
    return *this;
}

inline boost::optional<Duration>& ActivateOperationDescriptorBuilder::maxTimeToFinish()
{
    return m_maxTimeToFinish;
}

inline const boost::optional<Duration>& ActivateOperationDescriptorBuilder::maxTimeToFinish() const
{
    return m_maxTimeToFinish;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::invocationEffectiveTimeout(const boost::optional<Duration>& invocationEffectiveTimeout)
{
    m_invocationEffectiveTimeout = invocationEffectiveTimeout;
    return *this;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::invocationEffectiveTimeout(boost::optional<Duration>&& invocationEffectiveTimeout)
{
    m_invocationEffectiveTimeout = std::move(invocationEffectiveTimeout);
    return *this;
}

inline boost::optional<Duration>& ActivateOperationDescriptorBuilder::invocationEffectiveTimeout()
{
    return m_invocationEffectiveTimeout;
}

inline const boost::optional<Duration>& ActivateOperationDescriptorBuilder::invocationEffectiveTimeout() const
{
    return m_invocationEffectiveTimeout;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::retriggerable(Retriggerable retriggerable)
{
    m_retriggerable = retriggerable;
    return *this;
}

inline Retriggerable& ActivateOperationDescriptorBuilder::retriggerable()
{
    return m_retriggerable;
}

inline Retriggerable ActivateOperationDescriptorBuilder::retriggerable() const
{
    return m_retriggerable;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::accessLevel(AccessLevel accessLevel)
{
    m_accessLevel = accessLevel;
    return *this;
}

inline AccessLevel& ActivateOperationDescriptorBuilder::accessLevel()
{
    return m_accessLevel;
}

inline AccessLevel ActivateOperationDescriptorBuilder::accessLevel() const
{
    return m_accessLevel;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::arguments(const ActivateArguments& arguments)
{
    m_arguments = arguments;
    return *this;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::arguments(ActivateArguments&& arguments)
{
    m_arguments = std::move(arguments);
    return *this;
}

inline ActivateArguments& ActivateOperationDescriptorBuilder::arguments()
{
    return m_arguments;
}

inline const ActivateArguments& ActivateOperationDescriptorBuilder::arguments() const
{
    return m_arguments;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline ActivateOperationDescriptorBuilder& ActivateOperationDescriptorBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& ActivateOperationDescriptorBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& ActivateOperationDescriptorBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const ActivateOperationDescriptor& lhs, const ActivateOperationDescriptorBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const ActivateOperationDescriptorBuilder& lhs, const ActivateOperationDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const ActivateOperationDescriptor& lhs, const ActivateOperationDescriptorBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const ActivateOperationDescriptorBuilder& lhs, const ActivateOperationDescriptor& rhs)
{
    return !(lhs == rhs);
}

inline ActivateOperationDescriptorBuilder getBuilder(const ActivateOperationDescriptor& activateOperationDescriptor)
{
    return ActivateOperationDescriptorBuilder(activateOperationDescriptor);
}

inline ActivateOperationDescriptorBuilder getBuilder(const DFL::NotNull<SharedPtr<ActivateOperationDescriptor>>& activateOperationDescriptor)
{
    return ActivateOperationDescriptorBuilder(activateOperationDescriptor);
}

}
}
