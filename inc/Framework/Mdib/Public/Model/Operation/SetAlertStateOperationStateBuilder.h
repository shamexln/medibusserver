/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Operation/SetAlertStateOperationState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref SetAlertStateOperationState
 * @ingroup Mdib
 */
class SetAlertStateOperationStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref SetAlertStateOperationState
        using BuiltType = SetAlertStateOperationState;

        /// @brief Builder based on given immutable @ref SetAlertStateOperationState
        explicit SetAlertStateOperationStateBuilder(const SetAlertStateOperationState& setAlertStateOperationState=SetAlertStateOperationState());

        /// @brief Builder based on given immutable @ref SetAlertStateOperationState
        explicit SetAlertStateOperationStateBuilder(const DFL::NotNull<SharedPtr<SetAlertStateOperationState>>& setAlertStateOperationState);

        /// @brief Overwrite all values with given immutable @ref SetAlertStateOperationState
        SetAlertStateOperationStateBuilder& operator=(const SetAlertStateOperationState& setAlertStateOperationState);

        /// @brief Explicit conversion to immutable @ref SetAlertStateOperationState
        SetAlertStateOperationState build() const;

        /// @brief Test whether the builder differs from the immutable @ref SetAlertStateOperationState
        bool isChanged(const SetAlertStateOperationState& base) const;

        /// @brief Setter for operatingMode
        /// @{
        SetAlertStateOperationStateBuilder& operatingMode(OperatingMode operatingMode);
        /// @}

        /// @brief Setter for extensions
        /// @{
        SetAlertStateOperationStateBuilder& extensions(const ExtensionTypes& extensions);
        SetAlertStateOperationStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for operatingMode
        /// @{
        OperatingMode& operatingMode();
        OperatingMode operatingMode() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        OperatingMode m_operatingMode;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const SetAlertStateOperationState& lhs, const SetAlertStateOperationState& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetAlertStateOperationStateBuilder& lhs, const SetAlertStateOperationStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const SetAlertStateOperationStateBuilder& lhs, const SetAlertStateOperationState& rhs);
bool operator==(const SetAlertStateOperationState& lhs, const SetAlertStateOperationStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const SetAlertStateOperationState& lhs, const SetAlertStateOperationState& rhs);
bool operator!=(const SetAlertStateOperationStateBuilder& lhs, const SetAlertStateOperationStateBuilder& rhs);
bool operator!=(const SetAlertStateOperationState& lhs, const SetAlertStateOperationStateBuilder& rhs);
bool operator!=(const SetAlertStateOperationStateBuilder& lhs, const SetAlertStateOperationState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref SetAlertStateOperationState
 * @ingroup Mdib
 */
/// @{
SetAlertStateOperationStateBuilder getBuilder(const SetAlertStateOperationState& setAlertStateOperationState);
SetAlertStateOperationStateBuilder getBuilder(const DFL::NotNull<SharedPtr<SetAlertStateOperationState>>& setAlertStateOperationState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const SetAlertStateOperationState& lhs, const SetAlertStateOperationState& rhs);

inline SetAlertStateOperationStateBuilder::SetAlertStateOperationStateBuilder(const SetAlertStateOperationState& setAlertStateOperationState) :
    m_operatingMode(setAlertStateOperationState.operatingMode()),
    m_extensions(setAlertStateOperationState.extensions())
{
}

inline SetAlertStateOperationStateBuilder::SetAlertStateOperationStateBuilder(const DFL::NotNull<SharedPtr<SetAlertStateOperationState>>& setAlertStateOperationState) :
    m_operatingMode(setAlertStateOperationState->operatingMode()),
    m_extensions(setAlertStateOperationState->extensions())
{
}

inline SetAlertStateOperationStateBuilder& SetAlertStateOperationStateBuilder::operator=(const SetAlertStateOperationState& setAlertStateOperationState)
{
    m_operatingMode = setAlertStateOperationState.operatingMode();
    m_extensions = setAlertStateOperationState.extensions();
    return *this;
}

inline SetAlertStateOperationState SetAlertStateOperationStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return SetAlertStateOperationState(m_operatingMode, m_extensions);
}

inline bool SetAlertStateOperationStateBuilder::isChanged(const SetAlertStateOperationState& base) const
{
    return *this != base;
}

inline SetAlertStateOperationStateBuilder& SetAlertStateOperationStateBuilder::operatingMode(OperatingMode operatingMode)
{
    m_operatingMode = operatingMode;
    return *this;
}

inline OperatingMode& SetAlertStateOperationStateBuilder::operatingMode()
{
    return m_operatingMode;
}

inline OperatingMode SetAlertStateOperationStateBuilder::operatingMode() const
{
    return m_operatingMode;
}

inline SetAlertStateOperationStateBuilder& SetAlertStateOperationStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline SetAlertStateOperationStateBuilder& SetAlertStateOperationStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& SetAlertStateOperationStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& SetAlertStateOperationStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const SetAlertStateOperationState& lhs, const SetAlertStateOperationStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const SetAlertStateOperationStateBuilder& lhs, const SetAlertStateOperationStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetAlertStateOperationState& lhs, const SetAlertStateOperationStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const SetAlertStateOperationStateBuilder& lhs, const SetAlertStateOperationState& rhs)
{
    return !(lhs == rhs);
}

inline SetAlertStateOperationStateBuilder getBuilder(const SetAlertStateOperationState& setAlertStateOperationState)
{
    return SetAlertStateOperationStateBuilder(setAlertStateOperationState);
}

inline SetAlertStateOperationStateBuilder getBuilder(const DFL::NotNull<SharedPtr<SetAlertStateOperationState>>& setAlertStateOperationState)
{
    return SetAlertStateOperationStateBuilder(setAlertStateOperationState);
}

}
}
