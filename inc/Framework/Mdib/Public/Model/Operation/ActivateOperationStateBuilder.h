/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <memory>
#include <boost/optional.hpp>
#include <Framework/Mdib/Private/ExpImp.h>
#include <Framework/Mdib/Private/Utils/SmartPtrTypes.h>
#include <Framework/Utils/Public/NotNull.h>

#include <Framework/Mdib/Public/Model/Operation/ActivateOperationState.h>

namespace DFL
{
namespace Mdib
{

/**
 * @brief Builder with fluent interface for @ref ActivateOperationState
 * @ingroup Mdib
 */
class ActivateOperationStateBuilder
{
    public:
        /// @brief Typedef to the immutable @ref ActivateOperationState
        using BuiltType = ActivateOperationState;

        /// @brief Builder based on given immutable @ref ActivateOperationState
        explicit ActivateOperationStateBuilder(const ActivateOperationState& activateOperationState=ActivateOperationState());

        /// @brief Builder based on given immutable @ref ActivateOperationState
        explicit ActivateOperationStateBuilder(const DFL::NotNull<SharedPtr<ActivateOperationState>>& activateOperationState);

        /// @brief Overwrite all values with given immutable @ref ActivateOperationState
        ActivateOperationStateBuilder& operator=(const ActivateOperationState& activateOperationState);

        /// @brief Explicit conversion to immutable @ref ActivateOperationState
        ActivateOperationState build() const;

        /// @brief Test whether the builder differs from the immutable @ref ActivateOperationState
        bool isChanged(const ActivateOperationState& base) const;

        /// @brief Setter for operatingMode
        /// @{
        ActivateOperationStateBuilder& operatingMode(OperatingMode operatingMode);
        /// @}

        /// @brief Setter for extensions
        /// @{
        ActivateOperationStateBuilder& extensions(const ExtensionTypes& extensions);
        ActivateOperationStateBuilder& extensions(ExtensionTypes&& extensions);
        /// @}

        /// @brief Getter for operatingMode
        /// @{
        OperatingMode& operatingMode();
        OperatingMode operatingMode() const;
        /// @}

        /// @brief Getter for extensions
        /// @{
        ExtensionTypes& extensions();
        const ExtensionTypes& extensions() const;
        /// @}

    private:
        OperatingMode m_operatingMode;
        ExtensionTypes m_extensions;
};

/**
 * @brief Equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator==(const ActivateOperationState& lhs, const ActivateOperationState& rhs);
DFL_MDIB_EXPIMP bool operator==(const ActivateOperationStateBuilder& lhs, const ActivateOperationStateBuilder& rhs);
DFL_MDIB_EXPIMP bool operator==(const ActivateOperationStateBuilder& lhs, const ActivateOperationState& rhs);
bool operator==(const ActivateOperationState& lhs, const ActivateOperationStateBuilder& rhs);
/// @}

/**
 * @brief Not equal operator compares all members
 * @ingroup Mdib
 */
/// @{
DFL_MDIB_EXPIMP bool operator!=(const ActivateOperationState& lhs, const ActivateOperationState& rhs);
bool operator!=(const ActivateOperationStateBuilder& lhs, const ActivateOperationStateBuilder& rhs);
bool operator!=(const ActivateOperationState& lhs, const ActivateOperationStateBuilder& rhs);
bool operator!=(const ActivateOperationStateBuilder& lhs, const ActivateOperationState& rhs);
/// @}

/**
 * @brief Factory function to create %Builder based on given immutable @ref ActivateOperationState
 * @ingroup Mdib
 */
/// @{
ActivateOperationStateBuilder getBuilder(const ActivateOperationState& activateOperationState);
ActivateOperationStateBuilder getBuilder(const DFL::NotNull<SharedPtr<ActivateOperationState>>& activateOperationState);
/// @}

/**
 * @brief Helper function throws runtime_error in case of a not equal member
 * @ingroup Mdib
 */
DFL_MDIB_EXPIMP void assertEqual(const ActivateOperationState& lhs, const ActivateOperationState& rhs);

inline ActivateOperationStateBuilder::ActivateOperationStateBuilder(const ActivateOperationState& activateOperationState) :
    m_operatingMode(activateOperationState.operatingMode()),
    m_extensions(activateOperationState.extensions())
{
}

inline ActivateOperationStateBuilder::ActivateOperationStateBuilder(const DFL::NotNull<SharedPtr<ActivateOperationState>>& activateOperationState) :
    m_operatingMode(activateOperationState->operatingMode()),
    m_extensions(activateOperationState->extensions())
{
}

inline ActivateOperationStateBuilder& ActivateOperationStateBuilder::operator=(const ActivateOperationState& activateOperationState)
{
    m_operatingMode = activateOperationState.operatingMode();
    m_extensions = activateOperationState.extensions();
    return *this;
}

inline ActivateOperationState ActivateOperationStateBuilder::build() const
{
    // NOLINTNEXTLINE(modernize-return-braced-init-list)
    return ActivateOperationState(m_operatingMode, m_extensions);
}

inline bool ActivateOperationStateBuilder::isChanged(const ActivateOperationState& base) const
{
    return *this != base;
}

inline ActivateOperationStateBuilder& ActivateOperationStateBuilder::operatingMode(OperatingMode operatingMode)
{
    m_operatingMode = operatingMode;
    return *this;
}

inline OperatingMode& ActivateOperationStateBuilder::operatingMode()
{
    return m_operatingMode;
}

inline OperatingMode ActivateOperationStateBuilder::operatingMode() const
{
    return m_operatingMode;
}

inline ActivateOperationStateBuilder& ActivateOperationStateBuilder::extensions(const ExtensionTypes& extensions)
{
    m_extensions = extensions;
    return *this;
}

inline ActivateOperationStateBuilder& ActivateOperationStateBuilder::extensions(ExtensionTypes&& extensions)
{
    m_extensions = std::move(extensions);
    return *this;
}

inline ExtensionTypes& ActivateOperationStateBuilder::extensions()
{
    return m_extensions;
}

inline const ExtensionTypes& ActivateOperationStateBuilder::extensions() const
{
    return m_extensions;
}

inline bool operator==(const ActivateOperationState& lhs, const ActivateOperationStateBuilder& rhs)
{
    return rhs == lhs;
}

inline bool operator!=(const ActivateOperationStateBuilder& lhs, const ActivateOperationStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const ActivateOperationState& lhs, const ActivateOperationStateBuilder& rhs)
{
    return !(lhs == rhs);
}

inline bool operator!=(const ActivateOperationStateBuilder& lhs, const ActivateOperationState& rhs)
{
    return !(lhs == rhs);
}

inline ActivateOperationStateBuilder getBuilder(const ActivateOperationState& activateOperationState)
{
    return ActivateOperationStateBuilder(activateOperationState);
}

inline ActivateOperationStateBuilder getBuilder(const DFL::NotNull<SharedPtr<ActivateOperationState>>& activateOperationState)
{
    return ActivateOperationStateBuilder(activateOperationState);
}

}
}
