/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <Framework/Mdib/Public/Model/Metric/DistributionSampleArrayMetricDescriptor.h>

namespace DFL
{
namespace Mdib
{
namespace Impl
{
/**
 * @brief Calls the visitor for each member.
 *
 * @param vis visitor
 * @param distributionSampleArrayMetricDescriptor @ref DFL::Mdib::DistributionSampleArrayMetricDescriptor value to visit
 * @ingroup Mdib
 */
template <class Visitor>
void visitMembers(Visitor& vis, const DistributionSampleArrayMetricDescriptor& distributionSampleArrayMetricDescriptor)
{
    vis(distributionSampleArrayMetricDescriptor.safetyClassification());
    vis(distributionSampleArrayMetricDescriptor.type());
    vis(distributionSampleArrayMetricDescriptor.unit());
    vis(distributionSampleArrayMetricDescriptor.bodySites());
    vis(distributionSampleArrayMetricDescriptor.metricCategory());
    vis(distributionSampleArrayMetricDescriptor.derivationMethod());
    vis(distributionSampleArrayMetricDescriptor.metricAvailability());
    vis(distributionSampleArrayMetricDescriptor.maxMeasurementTime());
    vis(distributionSampleArrayMetricDescriptor.maxDelayTime());
    vis(distributionSampleArrayMetricDescriptor.determinationPeriod());
    vis(distributionSampleArrayMetricDescriptor.lifeTimePeriod());
    vis(distributionSampleArrayMetricDescriptor.activationDuration());
    vis(distributionSampleArrayMetricDescriptor.relations());
    vis(distributionSampleArrayMetricDescriptor.resolution());
    vis(distributionSampleArrayMetricDescriptor.technicalRanges());
    vis(distributionSampleArrayMetricDescriptor.domainUnit());
    vis(distributionSampleArrayMetricDescriptor.distributionRange());
    vis(distributionSampleArrayMetricDescriptor.extensions());
}
}
}
}
