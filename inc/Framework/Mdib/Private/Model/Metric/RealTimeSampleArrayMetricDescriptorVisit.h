/**************************************************************************************
 *
 * DO NOT EDIT THIS FILE MANUALLY
 * THIS FILE IS GENERATED BY
 * modules\S32\Tools\MdibBuilders\RunGenerator.cmd
 *
 **************************************************************************************/

#pragma once

#include <Framework/Mdib/Public/Model/Metric/RealTimeSampleArrayMetricDescriptor.h>

namespace DFL
{
namespace Mdib
{
namespace Impl
{
/**
 * @brief Calls the visitor for each member.
 *
 * @param vis visitor
 * @param realTimeSampleArrayMetricDescriptor @ref DFL::Mdib::RealTimeSampleArrayMetricDescriptor value to visit
 * @ingroup Mdib
 */
template <class Visitor>
void visitMembers(Visitor& vis, const RealTimeSampleArrayMetricDescriptor& realTimeSampleArrayMetricDescriptor)
{
    vis(realTimeSampleArrayMetricDescriptor.safetyClassification());
    vis(realTimeSampleArrayMetricDescriptor.type());
    vis(realTimeSampleArrayMetricDescriptor.unit());
    vis(realTimeSampleArrayMetricDescriptor.bodySites());
    vis(realTimeSampleArrayMetricDescriptor.metricCategory());
    vis(realTimeSampleArrayMetricDescriptor.derivationMethod());
    vis(realTimeSampleArrayMetricDescriptor.metricAvailability());
    vis(realTimeSampleArrayMetricDescriptor.maxMeasurementTime());
    vis(realTimeSampleArrayMetricDescriptor.maxDelayTime());
    vis(realTimeSampleArrayMetricDescriptor.determinationPeriod());
    vis(realTimeSampleArrayMetricDescriptor.lifeTimePeriod());
    vis(realTimeSampleArrayMetricDescriptor.activationDuration());
    vis(realTimeSampleArrayMetricDescriptor.relations());
    vis(realTimeSampleArrayMetricDescriptor.resolution());
    vis(realTimeSampleArrayMetricDescriptor.samplePeriod());
    vis(realTimeSampleArrayMetricDescriptor.technicalRanges());
    vis(realTimeSampleArrayMetricDescriptor.extensions());
}
}
}
}
