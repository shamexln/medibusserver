#pragma once

#include <S31/Nomenclature/Public/Credentials.h>
#include <S31/Sdc/Private/Client/Endpoint/HostedServiceExecutor.h>
#include <S31/Sdc/Private/Client/Metadata/DeviceMetadata.h>
#include <S31/Sdc/Private/Client/Metadata/ServiceId.h>
#include <S31/Sdc/Private/Common/Endpoint/EndpointUrl.h>
#include <S31/Sdc/Public/Common/EndpointReference.h>
#include <S31/Utils/Public/Errors.h>
#include <S31/Utils/Public/ObservableSubject.h>

#include <map>
#include <vector>

namespace S31::Sdc::Impl::Endpoint
{

/**
 * @brief Listens to events generated by the \ref DpwsEndpoint during validation, revalidation and invalidation.
 * @ingroup S31SdcClient
 */
class DpwsEndpointObserver
{
    public:
        virtual ~DpwsEndpointObserver() = default;

        /**
         * @brief Is triggered every time the subscribed DPWS endpoint got invalid
         * @param epr Affected endpoint reference.
         * @param error The reason of invalidation. Currently triggered:
         *              - \ref S31::Sdc::Impl::Errors::ResolveXAddrs
         *              - An error detected in the outcome of \ref S31::Sdc::Impl::GetDeviceMetadataJob
         */
        virtual void invalid(const EndpointReference& epr, const S31::Utils::Error& error) = 0;

        /**
         * @brief Every time a resolve has been sent the new XAddrs sequence is notified here.
         */
        virtual void resolved(const EndpointReference& epr, const std::vector<Url>& xAddrs) = 0;

        /**
         * @brief Is triggered every time the subscribed DPWS endpoint got valid.
         * @param epr Affected endpoint reference.
         * @param metadata The metadata including ThisDevice, ThisModel and hosted services information.
         * @param credentials Credentials retrieved from the peer (RemoteDevice)
         * @param executors Executors map that maps service identifiers to hosted service executors.
         *                  The port types that belong to the service identifiers can be enquired from the metadata.
         *
         *                  \note Physical URLs of endpoints are being refreshed automatically behind the scenes after
         *                        TransferGet information was retrieved, e.g., during re-validation. Hence, you do not
         *                        need to re-settle endpoints from a DPWS endpoint after your first reception of the
         *                        callback.
         *
         */
        virtual void valid(const EndpointReference& epr, const DeviceMetadata& metadata, const S31::Nomenclature::Credentials& credentials, const std::map<ServiceId, HostedServiceExecutor>& executors) = 0;
};

/**
 * @brief An endpoint access point and remote device validation tool.
 * @details Internally tries to resolve XAddrs and retrieve device metadata. If SSL is enabled, retrieving of
 *          metadata includes SSL handshakes to authenticate both communicating partners. Therefore, a valid %DpwsEndpoint
 *          means:
 *
 *          - Physical addresses of the remote device have been resolved
 *          - The metadata including physical addresses of hosted services have been resolved
 *          - If SSL is active, the remote device has successfully been authenticated.
 *
 *          After instantiation of %DpwsEndpoint as shared pointer, use \ref DpwsEndpoint::registerObserver() to listen to
 *          any validation activities going on.
 *
 *          \attention The first validation is hold back until \ref DpwsEndpoint::validate() is invoked.
 *
 *          See the following state machine figure:
 *
 *          @startuml
 *            !include S31Sdc-DpwsEndpoint.iuml
 *          @enduml
 *
 *          Remarks:
 *
 *          -# A re-validation can be triggered, e.g., from Hello messages or %ProbeMatches messages
 *          -# For \c RESOLVE_MAX_RETRY the %DpwsEndpoint uses a vector of delays that is reduced on each re-resolve
 *             until there is no delay available
 *          -# The reTransferGet is processed by \ref S31::Sdc::Impl::Endpoint::Executor "endpoint's"
 *             \ref S31::Sdc::Impl::Endpoint::RetryCount "RetryCount" (not a real transition in implementation)
 *          -# Retry counters and delays can be injected on construction.
 *
 * @ingroup S31SdcClient
 */
class DpwsEndpoint: public S31::Utils::ObservableSubject<DpwsEndpointObserver>
{
    public:
        /**
         * @brief Starts validation of the %DpwsEndpoint.
         * @details This function can be called at any time. If \ref DpwsEndpointObserver::invalid() or
         *          \ref DpwsEndpointObserver::valid() was called before, the %DpwsEndpoint immediately starts to
         *          (re-)validate the remote device.
         *
         *          \attention Calls to this function aren't queued! If you start validating a %DpwsEndpoint that is currently
         *                     in between valid and invalid, the event is swallowed. Keep your own queue and start re-validation once
         *                     valid or invalid is met.
         *          \attention Keep in mind that revalidation can be a cost-intensive activity as multiple messages are sent out to
         *                     the network (some resolves, WS-TransferGet including SSL handshake). Limit the amounts of re-validations
         *                     to a minimum.
         */
        virtual void validate() = 0;
};

}
